"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemAct = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
/**
 * Base type for system dialog acts.
 *
 * Each `SystemAct` represents a precise 'piece of information' that is to be communicated to the user.  Each
 * `SystemAct` is to be associated with a Control that can be used to render it.
 *
 * There are two more specific base classes that should be used as the base for user-defined SystemActs:
 *  * `ContentAct`: the base class for System Acts that just communicate some information.
 *  * `InitiativeAct`: the base class for System Acts that ask a question or otherwise encourage the user to continue the conversation.
 *
 * Usage:
 *  * Add `SystemActs` to the result in `Control.canHandle` and `Control.takeInitiative` to represent what the system wants to communicate.
 *  * Convert the `SystemActs` into surface forms (prompts, APL, etc) during the render phase.
 *  * Always extend `ContentAct` or `InitiativeAct` rather than this base type.
 *  * Introduce new System Acts whenever the available acts are not suitable or precise enough.
 */
class SystemAct {
    /**
     * Creates an instance of SystemAct.
     *
     * Each system act represent a specific 'atom of dialog' the system wishes to communicate to the user.
     *
     * Usage:
     *  - New acts should generally extend `InitiativeAct` or `ContentAct` rather than this class, to improve readability.
     */
    constructor(control, props) {
        this.control = control;
        this.takesInitiative = props.takesInitiative;
    }
    /**
     * Produces a string representation of the SystemAct.
     *
     * The associated `Control.id` is included but the complete details of the associate `Control` are omitted for brevity.
     */
    toString() {
        return `${this.constructor.name}:${JSON.stringify(this.cloneWithControlIdNotDetails())}`;
    }
    /**
     * For use in toString.
     * Creates a clone that replaces the control object with controlId.
     */
    cloneWithControlIdNotDetails() {
        var _a, _b;
        const cleanAct = lodash_1.default.cloneDeep(this);
        cleanAct.controlId = (_b = (_a = this.control) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : '';
        delete cleanAct.control;
        return cleanAct;
    }
}
exports.SystemAct = SystemAct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3lzdGVtQWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N5c3RlbUFjdHMvU3lzdGVtQWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7OztBQUVILDREQUF1QjtBQWV2Qjs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxNQUFzQixTQUFTO0lBSTNCOzs7Ozs7O09BT0c7SUFDSCxZQUFZLE9BQWdCLEVBQUUsS0FBaUM7UUFDM0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDO0lBQ2pELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsUUFBUTtRQUNKLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUM3RixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssNEJBQTRCOztRQUNoQyxNQUFNLFFBQVEsR0FBRyxnQkFBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQVEsQ0FBQztRQUMxQyxRQUFRLENBQUMsU0FBUyxlQUFHLElBQUksQ0FBQyxPQUFPLDBDQUFFLEVBQUUsbUNBQUksRUFBRSxDQUFDO1FBQzVDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUN4QixPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDO0NBZ0JKO0FBbkRELDhCQW1EQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tICcuLi9jb250cm9scy9Db250cm9sJztcbmltcG9ydCB7IENvbnRyb2xJbnB1dCB9IGZyb20gJy4uL2NvbnRyb2xzL0NvbnRyb2xJbnB1dCc7XG5pbXBvcnQgeyBDb250cm9sUmVzcG9uc2VCdWlsZGVyIH0gZnJvbSAnLi4vcmVzcG9uc2VHZW5lcmF0aW9uL0NvbnRyb2xSZXNwb25zZUJ1aWxkZXInO1xuXG4vKipcbiAqIERlc2NyaWJlcyBhIHBpZWNlIG9mIGluZm9ybWF0aW9uIHRvIGJlIGNvbW11bmljYXRlZCB0byB0aGUgdXNlci5cbiAqXG4gKiBUaGlzIGlzIHRoZSBtaW5pbWFsIGRlZmluaXRpb24gcmVxdWlyZWQgYnkgdGhlIFJ1bnRpbWUgKENvbnRyb2xIYW5kbGVyKVxuICogU2VlIGBTeXN0ZW1BY3RgIGZvciB0aGUgYWN0dWFsIGNsYXNzIHVzZWQgYnkgQ29udHJvbCBpbXBsZW1lbnRhdGlvbnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVN5c3RlbUFjdCB7XG4gICAgdGFrZXNJbml0aWF0aXZlOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEJhc2UgdHlwZSBmb3Igc3lzdGVtIGRpYWxvZyBhY3RzLlxuICpcbiAqIEVhY2ggYFN5c3RlbUFjdGAgcmVwcmVzZW50cyBhIHByZWNpc2UgJ3BpZWNlIG9mIGluZm9ybWF0aW9uJyB0aGF0IGlzIHRvIGJlIGNvbW11bmljYXRlZCB0byB0aGUgdXNlci4gIEVhY2hcbiAqIGBTeXN0ZW1BY3RgIGlzIHRvIGJlIGFzc29jaWF0ZWQgd2l0aCBhIENvbnRyb2wgdGhhdCBjYW4gYmUgdXNlZCB0byByZW5kZXIgaXQuXG4gKlxuICogVGhlcmUgYXJlIHR3byBtb3JlIHNwZWNpZmljIGJhc2UgY2xhc3NlcyB0aGF0IHNob3VsZCBiZSB1c2VkIGFzIHRoZSBiYXNlIGZvciB1c2VyLWRlZmluZWQgU3lzdGVtQWN0czpcbiAqICAqIGBDb250ZW50QWN0YDogdGhlIGJhc2UgY2xhc3MgZm9yIFN5c3RlbSBBY3RzIHRoYXQganVzdCBjb21tdW5pY2F0ZSBzb21lIGluZm9ybWF0aW9uLlxuICogICogYEluaXRpYXRpdmVBY3RgOiB0aGUgYmFzZSBjbGFzcyBmb3IgU3lzdGVtIEFjdHMgdGhhdCBhc2sgYSBxdWVzdGlvbiBvciBvdGhlcndpc2UgZW5jb3VyYWdlIHRoZSB1c2VyIHRvIGNvbnRpbnVlIHRoZSBjb252ZXJzYXRpb24uXG4gKlxuICogVXNhZ2U6XG4gKiAgKiBBZGQgYFN5c3RlbUFjdHNgIHRvIHRoZSByZXN1bHQgaW4gYENvbnRyb2wuY2FuSGFuZGxlYCBhbmQgYENvbnRyb2wudGFrZUluaXRpYXRpdmVgIHRvIHJlcHJlc2VudCB3aGF0IHRoZSBzeXN0ZW0gd2FudHMgdG8gY29tbXVuaWNhdGUuXG4gKiAgKiBDb252ZXJ0IHRoZSBgU3lzdGVtQWN0c2AgaW50byBzdXJmYWNlIGZvcm1zIChwcm9tcHRzLCBBUEwsIGV0YykgZHVyaW5nIHRoZSByZW5kZXIgcGhhc2UuXG4gKiAgKiBBbHdheXMgZXh0ZW5kIGBDb250ZW50QWN0YCBvciBgSW5pdGlhdGl2ZUFjdGAgcmF0aGVyIHRoYW4gdGhpcyBiYXNlIHR5cGUuXG4gKiAgKiBJbnRyb2R1Y2UgbmV3IFN5c3RlbSBBY3RzIHdoZW5ldmVyIHRoZSBhdmFpbGFibGUgYWN0cyBhcmUgbm90IHN1aXRhYmxlIG9yIHByZWNpc2UgZW5vdWdoLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3lzdGVtQWN0IGltcGxlbWVudHMgSVN5c3RlbUFjdCB7XG4gICAgY29udHJvbDogQ29udHJvbDtcbiAgICB0YWtlc0luaXRpYXRpdmU6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFN5c3RlbUFjdC5cbiAgICAgKlxuICAgICAqIEVhY2ggc3lzdGVtIGFjdCByZXByZXNlbnQgYSBzcGVjaWZpYyAnYXRvbSBvZiBkaWFsb2cnIHRoZSBzeXN0ZW0gd2lzaGVzIHRvIGNvbW11bmljYXRlIHRvIHRoZSB1c2VyLlxuICAgICAqXG4gICAgICogVXNhZ2U6XG4gICAgICogIC0gTmV3IGFjdHMgc2hvdWxkIGdlbmVyYWxseSBleHRlbmQgYEluaXRpYXRpdmVBY3RgIG9yIGBDb250ZW50QWN0YCByYXRoZXIgdGhhbiB0aGlzIGNsYXNzLCB0byBpbXByb3ZlIHJlYWRhYmlsaXR5LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbnRyb2w6IENvbnRyb2wsIHByb3BzOiB7dGFrZXNJbml0aWF0aXZlOiBib29sZWFufSkge1xuICAgICAgICB0aGlzLmNvbnRyb2wgPSBjb250cm9sO1xuICAgICAgICB0aGlzLnRha2VzSW5pdGlhdGl2ZSA9IHByb3BzLnRha2VzSW5pdGlhdGl2ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgU3lzdGVtQWN0LlxuICAgICAqXG4gICAgICogVGhlIGFzc29jaWF0ZWQgYENvbnRyb2wuaWRgIGlzIGluY2x1ZGVkIGJ1dCB0aGUgY29tcGxldGUgZGV0YWlscyBvZiB0aGUgYXNzb2NpYXRlIGBDb250cm9sYCBhcmUgb21pdHRlZCBmb3IgYnJldml0eS5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uc3RydWN0b3IubmFtZX06JHtKU09OLnN0cmluZ2lmeSh0aGlzLmNsb25lV2l0aENvbnRyb2xJZE5vdERldGFpbHMoKSl9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3IgdXNlIGluIHRvU3RyaW5nLlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSB0aGF0IHJlcGxhY2VzIHRoZSBjb250cm9sIG9iamVjdCB3aXRoIGNvbnRyb2xJZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIGNsb25lV2l0aENvbnRyb2xJZE5vdERldGFpbHMoKTogYW55IHtcbiAgICAgICAgY29uc3QgY2xlYW5BY3QgPSBfLmNsb25lRGVlcCh0aGlzKSBhcyBhbnk7XG4gICAgICAgIGNsZWFuQWN0LmNvbnRyb2xJZCA9IHRoaXMuY29udHJvbD8uaWQgPz8gJyc7XG4gICAgICAgIGRlbGV0ZSBjbGVhbkFjdC5jb250cm9sO1xuICAgICAgICByZXR1cm4gY2xlYW5BY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIHRoZSBkaWFsb2cgYWN0LlxuICAgICAqXG4gICAgICogVGhpcyBpcyB0aGUgb25lLXNpemUtZml0cy1hbGwgZGlyZWN0IHJlbmRlcmluZyBvZiBhIGRpYWxvZyBhY3QuICBUaGlzIGlzIG9mdGVuIGFwcHJvcHJpYXRlXG4gICAgICogZm9yIGN1c3RvbSBhY3RzIHRoYXQgYXJlIG5vdCB1c2VkIGJ5IGEgc2hhcmVkIGNvbnRyb2wuXG4gICAgICpcbiAgICAgKiBGcmFtZXdvcmsgYmVoYXZpb3I6XG4gICAgICogICogU2hhcmVkIGNvbnRyb2xzIGNhbm5vdCByZWx5IG9uIGEgb25lLXNpemUtZml0cy1hbGwgcmVuZGVyaW5nIGFuZCBzbyB0aGV5IHByb3ZpZGVcbiAgICAgKiAgICB0aGVpciBvd24gYXBwcm9wcmlhdGUgZGVmYXVsdHMgYW5kIHByb3BzIHRoYXQgYWxsb3cgdGhlIGRldmVsb3BlciB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5wdXQgLSBJbnB1dFxuICAgICAqIEBwYXJhbSByZXNwb25zZUJ1aWxkZXIgLSBSZXNwb25zZSBidWlsZGVyXG4gICAgICovXG4gICAgYWJzdHJhY3QgcmVuZGVyKGlucHV0OiBDb250cm9sSW5wdXQsIHJlc3BvbnNlQnVpbGRlcjogQ29udHJvbFJlc3BvbnNlQnVpbGRlcik6IHZvaWQ7XG59XG4iXX0=