"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const tslib_1 = require("tslib");
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
const debug_1 = tslib_1.__importDefault(require("debug"));
const DEFAULT_LOG_LEVEL = 'error:*, warn:*';
/**
 * Logger
 *
 * This wraps the Debug object from npm 'Debug' package to provide "log-levels".
 * The log-levels are handled as top-level namespaces.
 *
 * Examples
 * ```
 * export DEBUG="error:*" -> Log 'error' messages from every module
 * export DEBUG="error:moduleA" -> Log 'error' messages for moduleA only
 * export DEBUG="error:*, warn:*, info:*, debug:*" -> Log everything
 * ```
 *
 * See https://www.npmjs.com/package/debug for more information on
 * configuration.
 *
 * When instantiated for a given "moduleName", this object provides an `error()`
 * function that logs with amended name "error:moduleName". Likewise for `warn()`,
 * `info()`, and `debug()`.
 */
class Logger {
    constructor(moduleName) {
        var _a;
        this.moduleName = moduleName;
        const namespace = (_a = process.env.DEBUG) !== null && _a !== void 0 ? _a : DEFAULT_LOG_LEVEL;
        debug_1.default.enable(namespace);
    }
    /**
     * Log a message as an "error".
     * @param message - Message
     */
    error(message) {
        debug_1.default(`error:${this.moduleName}`)(message);
    }
    /**
     * Log a message as an "warning".
     * @param message - Message
     */
    warn(message) {
        debug_1.default(`warn:${this.moduleName}`)(message);
    }
    /**
     * Log a message as an "informational" message.
     * @param message - Message
     */
    info(message) {
        debug_1.default(`info:${this.moduleName}`)(message);
    }
    /**
     * Log a message as an "low-level debug message".
     * @param message - Message
     */
    debug(message) {
        debug_1.default(`debug:${this.moduleName}`)(message);
    }
}
exports.Logger = Logger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xvZ2dpbmcvTG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Ozs7R0FXRztBQUNILDBEQUEwQjtBQUUxQixNQUFNLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0FBRTVDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBQ0gsTUFBYSxNQUFNO0lBSWYsWUFBWSxVQUFrQjs7UUFDMUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFFN0IsTUFBTSxTQUFTLFNBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLG1DQUFJLGlCQUFpQixDQUFDO1FBQ3pELGVBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxPQUFlO1FBQ2pCLGVBQUssQ0FBQyxTQUFTLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLENBQUMsT0FBZTtRQUNoQixlQUFLLENBQUMsUUFBUSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSSxDQUFDLE9BQWU7UUFDaEIsZUFBSyxDQUFDLFFBQVEsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxPQUFlO1FBQ2pCLGVBQUssQ0FBQyxTQUFTLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7Q0FDSjtBQTFDRCx3QkEwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBvciBpbiB0aGUgXCJsaWNlbnNlXCIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWRcbiAqIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IERlYnVnIGZyb20gXCJkZWJ1Z1wiO1xuXG5jb25zdCBERUZBVUxUX0xPR19MRVZFTCA9ICdlcnJvcjoqLCB3YXJuOionO1xuXG4vKipcbiAqIExvZ2dlclxuICpcbiAqIFRoaXMgd3JhcHMgdGhlIERlYnVnIG9iamVjdCBmcm9tIG5wbSAnRGVidWcnIHBhY2thZ2UgdG8gcHJvdmlkZSBcImxvZy1sZXZlbHNcIi5cbiAqIFRoZSBsb2ctbGV2ZWxzIGFyZSBoYW5kbGVkIGFzIHRvcC1sZXZlbCBuYW1lc3BhY2VzLlxuICpcbiAqIEV4YW1wbGVzXG4gKiBgYGBcbiAqIGV4cG9ydCBERUJVRz1cImVycm9yOipcIiAtPiBMb2cgJ2Vycm9yJyBtZXNzYWdlcyBmcm9tIGV2ZXJ5IG1vZHVsZVxuICogZXhwb3J0IERFQlVHPVwiZXJyb3I6bW9kdWxlQVwiIC0+IExvZyAnZXJyb3InIG1lc3NhZ2VzIGZvciBtb2R1bGVBIG9ubHlcbiAqIGV4cG9ydCBERUJVRz1cImVycm9yOiosIHdhcm46KiwgaW5mbzoqLCBkZWJ1ZzoqXCIgLT4gTG9nIGV2ZXJ5dGhpbmdcbiAqIGBgYFxuICpcbiAqIFNlZSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9kZWJ1ZyBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvblxuICogY29uZmlndXJhdGlvbi5cbiAqXG4gKiBXaGVuIGluc3RhbnRpYXRlZCBmb3IgYSBnaXZlbiBcIm1vZHVsZU5hbWVcIiwgdGhpcyBvYmplY3QgcHJvdmlkZXMgYW4gYGVycm9yKClgXG4gKiBmdW5jdGlvbiB0aGF0IGxvZ3Mgd2l0aCBhbWVuZGVkIG5hbWUgXCJlcnJvcjptb2R1bGVOYW1lXCIuIExpa2V3aXNlIGZvciBgd2FybigpYCxcbiAqIGBpbmZvKClgLCBhbmQgYGRlYnVnKClgLlxuICovXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcblxuICAgIG1vZHVsZU5hbWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG1vZHVsZU5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLm1vZHVsZU5hbWUgPSBtb2R1bGVOYW1lO1xuXG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHByb2Nlc3MuZW52LkRFQlVHID8/IERFRkFVTFRfTE9HX0xFVkVMO1xuICAgICAgICBEZWJ1Zy5lbmFibGUobmFtZXNwYWNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2cgYSBtZXNzYWdlIGFzIGFuIFwiZXJyb3JcIi5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIE1lc3NhZ2VcbiAgICAgKi9cbiAgICBlcnJvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgRGVidWcoYGVycm9yOiR7dGhpcy5tb2R1bGVOYW1lfWApKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZyBhIG1lc3NhZ2UgYXMgYW4gXCJ3YXJuaW5nXCIuXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBNZXNzYWdlXG4gICAgICovXG4gICAgd2FybihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgRGVidWcoYHdhcm46JHt0aGlzLm1vZHVsZU5hbWV9YCkobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9nIGEgbWVzc2FnZSBhcyBhbiBcImluZm9ybWF0aW9uYWxcIiBtZXNzYWdlLlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gTWVzc2FnZVxuICAgICAqL1xuICAgIGluZm8obWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIERlYnVnKGBpbmZvOiR7dGhpcy5tb2R1bGVOYW1lfWApKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZyBhIG1lc3NhZ2UgYXMgYW4gXCJsb3ctbGV2ZWwgZGVidWcgbWVzc2FnZVwiLlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gTWVzc2FnZVxuICAgICAqL1xuICAgIGRlYnVnKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBEZWJ1ZyhgZGVidWc6JHt0aGlzLm1vZHVsZU5hbWV9YCkobWVzc2FnZSk7XG4gICAgfVxufSJdfQ==