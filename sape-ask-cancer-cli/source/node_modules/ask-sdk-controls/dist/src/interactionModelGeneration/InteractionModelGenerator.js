"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InteractionModelGenerator = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const path_1 = require("path");
const Logger_1 = require("../logging/Logger");
const log = new Logger_1.Logger('AskSdkControls:InteractionModelGenerator');
/**
 * Interaction model generator
 *
 * - For skills that use Controls Framework, use `ControlInteractionModelGenerator`
 */
class InteractionModelGenerator {
    constructor() {
        this.intents = [];
        this.slotTypes = [];
        this.dialogIntents = [];
        this.prompts = [];
    }
    /**
     * Add intent to interaction model
     *
     * @param intent - Intent
     */
    addIntent(intent) {
        // First Check whether the new intent has the same name as any existing intents
        // If intent has the same name already exist in the array,
        // then check whether these two intents are deeply equal to each other
        // skip adding new intent if they are exactly same, otherwise throw error
        const matchingIntent = this.intents.find(existIntent => existIntent.name === intent.name);
        if (matchingIntent === undefined) {
            this.intents.push(intent);
            return this;
        }
        if (lodash_1.default.isEqual(matchingIntent, intent)) {
            return this;
        }
        throw new Error(`Intent ${intent.name} is defined more than once and the definitions are not identical.`);
    }
    /**
     * Add one or more intents
     */
    addIntents(...intents) {
        for (const intent of intents) {
            this.addIntent(intent);
        }
        return this;
    }
    /**
     * Add or merge slot type
     *
     * If the slot and/or slot-values already exist, the new data is added.
     */
    addOrMergeSlotType(slotType) {
        var _a;
        const matchingSlotType = this.slotTypes.find(s => s.name === slotType.name);
        if (matchingSlotType === undefined) {
            // slot not yet present so just push it
            this.slotTypes.push(slotType);
            return this;
        }
        // slot present so add the values
        for (const value of (_a = slotType.values) !== null && _a !== void 0 ? _a : []) {
            mergeSlotTypeValues(matchingSlotType.values, value, matchingSlotType.name);
        }
        return this;
    }
    /**
     * Add or merge slot types
     *
     * If the slot and/or slot-values already exist, the new data is added.
     */
    addOrMergeSlotTypes(...slotTypes) {
        for (const slotType of slotTypes) {
            this.addOrMergeSlotType(slotType);
        }
        return this;
    }
    /**
     * Add a new slot value to an existing slot type
     *
     * If the slot-value already exists, the new data is added.
     */
    addValuesToSlotType(slotName, ...values) {
        const slotType = this.slotTypes.find(s => s.name === slotName);
        if (!slotType) {
            throw new Error(`SlotType ${slotName} is not defined.`);
        }
        for (const value of values) {
            mergeSlotTypeValues(slotType.values, value, slotType.name);
        }
        return this;
    }
    /**
     * Add a DialogIntent to the dialog model.
     */
    addDialogIntent(dialogIntent) {
        const matchingIntent = this.dialogIntents.find(existIntent => existIntent.name === dialogIntent.name);
        if (matchingIntent === undefined) {
            this.dialogIntents.push(dialogIntent);
            return this;
        }
        if (lodash_1.default.isEqual(matchingIntent, dialogIntent)) {
            return this;
        }
        throw new Error(`DialogIntent ${dialogIntent.name} is defined more than once and the definitions are not identical.`);
    }
    /**
     * Add DialogIntents to the dialog model.
     */
    addDialogIntents(...dialogIntents) {
        for (const dialogIntent of dialogIntents) {
            this.addDialogIntent(dialogIntent);
        }
        return this;
    }
    /**
     * Add DelegationStrategy to the dialog model.
     */
    addDelegationStrategy(delegationStrategy) {
        this.delegationStrategy = delegationStrategy;
        return this;
    }
    /**
     * Add a Prompt to the dialog model.
     */
    addPrompt(prompt) {
        const matchingPrompt = this.prompts.find(existPrompt => existPrompt.id === prompt.id);
        if (matchingPrompt === undefined) {
            this.prompts.push(prompt);
            return this;
        }
        if (lodash_1.default.isEqual(matchingPrompt, prompt)) {
            return this;
        }
        throw new Error(`Prompt with id ${prompt.id} is defined more than once and the definitions are not identical.`);
    }
    /**
     * Add Prompts to the dialog model.
     */
    addPrompts(...prompts) {
        for (const prompt of prompts) {
            this.addPrompt(prompt);
        }
        return this;
    }
    /**
     * Set the invocation name.
     */
    withInvocationName(name) {
        if (this.invocationName) {
            log.warn(`Skill invocation name ${this.invocationName} has been overwritten to ${name}.`);
        }
        this.invocationName = name;
        return this;
    }
    /**
     * Load an interaction model file (JSON format).
     *
     * Usage:
     * - This method does not perform merging for all components. Call this
     *   method before any other methods.
     */
    loadFromFile(inputPath) {
        if (!inputPath || !fs_1.default.existsSync(inputPath)) {
            throw new Error('Input path is not valid.');
        }
        // fetch all info from json
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const interactionModel = require(inputPath).interactionModel;
        const intents = interactionModel.languageModel.intents ? interactionModel.languageModel.intents : [];
        const slotTypes = interactionModel.languageModel.types ? interactionModel.languageModel.types : [];
        const invocationName = interactionModel.languageModel.invocationName;
        const prompts = interactionModel.prompts ? interactionModel.prompts : [];
        const dialog = interactionModel.dialog ? interactionModel.dialog : {};
        const dialogIntents = dialog.intents ? dialog.intents : [];
        const delegationStrategy = dialog.delegationStrategy;
        this.addIntents(...intents);
        this.addOrMergeSlotTypes(...slotTypes);
        this.addDialogIntents(...dialogIntents);
        if (delegationStrategy !== undefined) {
            this.addDelegationStrategy(delegationStrategy);
        }
        this.addPrompts(...prompts);
        this.withInvocationName(invocationName);
        return this;
    }
    /**
     * Build the interaction model.
     *
     * @returns An `InteractionModelData` object.
     */
    build() {
        if (!this.invocationName) {
            console.warn('Invocation name is not defined');
        }
        const interactionModel = {
            languageModel: {},
            prompts: []
        };
        interactionModel.languageModel.types = this.slotTypes;
        interactionModel.languageModel.intents = this.intents;
        if (this.dialogIntents.length > 0 || this.delegationStrategy) {
            interactionModel.dialog = {};
        }
        if (this.dialogIntents.length > 0) {
            interactionModel.dialog.intents = this.dialogIntents;
        }
        if (this.delegationStrategy) {
            interactionModel.dialog.delegationStrategy = this.delegationStrategy;
        }
        interactionModel.prompts = this.prompts;
        interactionModel.languageModel.invocationName = this.invocationName;
        return {
            interactionModel,
        };
    }
    /**
     * Build the interaction model and write to disk.
     *
     * @param filename - Filename
     */
    buildAndWrite(filename) {
        const interactionModelJson = JSON.stringify(this.build(), null, 2);
        const path = path_1.join(process.cwd(), filename);
        fs_1.default.writeFileSync(path, interactionModelJson);
    }
}
exports.InteractionModelGenerator = InteractionModelGenerator;
function mergeSlotTypeValues(slotTypeValues, newSlotValue, slotName) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (!slotTypeValues) {
        slotTypeValues = [newSlotValue];
        return;
    }
    const matchingValue = slotTypeValues.find(v => { var _a, _b; return ((_a = v.name) === null || _a === void 0 ? void 0 : _a.value) === ((_b = newSlotValue.name) === null || _b === void 0 ? void 0 : _b.value) || v.id === newSlotValue.id; });
    if (!matchingValue) {
        // value not yet present so just push it
        slotTypeValues.push(newSlotValue);
    }
    else {
        // value present, so add synonyms
        if (((_a = matchingValue.name) === null || _a === void 0 ? void 0 : _a.value) !== ((_b = newSlotValue.name) === null || _b === void 0 ? void 0 : _b.value)) {
            throw new Error(`Cannot merge slot type ${slotName}, as the value ${JSON.stringify(newSlotValue)} and ${JSON.stringify(matchingValue)} has the same id but different name.value.`);
        }
        if (matchingValue.id !== newSlotValue.id) {
            throw new Error(`Cannot merge slot type ${slotName}, as the value ${JSON.stringify(newSlotValue)} and ${JSON.stringify(matchingValue)} has the same name.value but different id.`);
        }
        for (const synonym of (_d = (_c = newSlotValue.name) === null || _c === void 0 ? void 0 : _c.synonyms) !== null && _d !== void 0 ? _d : []) {
            const matchingSynonym = (_f = (_e = matchingValue.name) === null || _e === void 0 ? void 0 : _e.synonyms) === null || _f === void 0 ? void 0 : _f.find(s => s === synonym);
            if (matchingSynonym === undefined) {
                // synonym not yet preset so just push it
                (_h = (_g = matchingValue.name) === null || _g === void 0 ? void 0 : _g.synonyms) === null || _h === void 0 ? void 0 : _h.push(synonym);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,