"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generalControlIntentSamples = void 0;
/*
 * For consideration:
 *   * trailing feedback, e.g.  "{action} {is correct}"  | "{it} {is correct}"
 *     Currently this type of trailing feedback is captured using {tail} and it is not used by control logic.
 *     A complication is that users might say "yes it is correct"
 *         - simple slot capture can't handle non-adjacent words
 *         - We don't really want to deal with two separate feedback slots and have to reconcile them.
 *         - So for now only the leading feedback is 'active' and we typically ignore the tail slot.
 */
exports.generalControlIntentSamples = [
    // "{feedback}",                         // {Yes}  // For bare feedback utterances, use specific simple intents, eg AMAZON.YesIntent.
    "{feedback} {action}",
    "{feedback} {action} {target}",
    "{feedback} {tail}",
    "{feedback} {action} {tail}",
    "{feedback} {action} {target} {tail}",
    // "{action}",                           // For bare action utterances, use specific simple intents to be compatible with existing ecosystem.
    "{action} {target}",
    "{head} {action}",
    "{head} {action} {target}",
    "{action} {tail}",
    "{action} {target} {tail}",
    "{head} {action} {tail}",
    "{head} {action} {target} {tail}",
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2VuZXJhbENvbnRyb2xJbnRlbnRTYW1wbGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2ludGVyYWN0aW9uTW9kZWxHZW5lcmF0aW9uL21vZGVscy9lbi9HZW5lcmFsQ29udHJvbEludGVudFNhbXBsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7OztHQVdHOzs7QUFHSDs7Ozs7Ozs7R0FRRztBQUNVLFFBQUEsMkJBQTJCLEdBQWE7SUFDakQscUlBQXFJO0lBQ3JJLHFCQUFxQjtJQUNyQiw4QkFBOEI7SUFDOUIsbUJBQW1CO0lBQ25CLDRCQUE0QjtJQUM1QixxQ0FBcUM7SUFDckMsNklBQTZJO0lBQzdJLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsMEJBQTBCO0lBQzFCLGlCQUFpQjtJQUNqQiwwQkFBMEI7SUFDMUIsd0JBQXdCO0lBQ3hCLGlDQUFpQztDQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE5IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG4vKlxuICogRm9yIGNvbnNpZGVyYXRpb246XG4gKiAgICogdHJhaWxpbmcgZmVlZGJhY2ssIGUuZy4gIFwie2FjdGlvbn0ge2lzIGNvcnJlY3R9XCIgIHwgXCJ7aXR9IHtpcyBjb3JyZWN0fVwiXG4gKiAgICAgQ3VycmVudGx5IHRoaXMgdHlwZSBvZiB0cmFpbGluZyBmZWVkYmFjayBpcyBjYXB0dXJlZCB1c2luZyB7dGFpbH0gYW5kIGl0IGlzIG5vdCB1c2VkIGJ5IGNvbnRyb2wgbG9naWMuXG4gKiAgICAgQSBjb21wbGljYXRpb24gaXMgdGhhdCB1c2VycyBtaWdodCBzYXkgXCJ5ZXMgaXQgaXMgY29ycmVjdFwiXG4gKiAgICAgICAgIC0gc2ltcGxlIHNsb3QgY2FwdHVyZSBjYW4ndCBoYW5kbGUgbm9uLWFkamFjZW50IHdvcmRzXG4gKiAgICAgICAgIC0gV2UgZG9uJ3QgcmVhbGx5IHdhbnQgdG8gZGVhbCB3aXRoIHR3byBzZXBhcmF0ZSBmZWVkYmFjayBzbG90cyBhbmQgaGF2ZSB0byByZWNvbmNpbGUgdGhlbS5cbiAqICAgICAgICAgLSBTbyBmb3Igbm93IG9ubHkgdGhlIGxlYWRpbmcgZmVlZGJhY2sgaXMgJ2FjdGl2ZScgYW5kIHdlIHR5cGljYWxseSBpZ25vcmUgdGhlIHRhaWwgc2xvdC5cbiAqL1xuZXhwb3J0IGNvbnN0IGdlbmVyYWxDb250cm9sSW50ZW50U2FtcGxlczogc3RyaW5nW10gPSBbICAgICAgICAgICAgICAgICAgLy8gKiAgU2VlIC4uLy4uL3Nsb3RUeXBlcy9zaGFyZWRTbG90VHlwZXMvZW4vaW5kZXgudHMgZm9yIGJ1aWx0aW4gc2xvdCB2YWx1ZXMuXG4gICAgLy8gXCJ7ZmVlZGJhY2t9XCIsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHtZZXN9ICAvLyBGb3IgYmFyZSBmZWVkYmFjayB1dHRlcmFuY2VzLCB1c2Ugc3BlY2lmaWMgc2ltcGxlIGludGVudHMsIGVnIEFNQVpPTi5ZZXNJbnRlbnQuXG4gICAgXCJ7ZmVlZGJhY2t9IHthY3Rpb259XCIsICAgICAgICAgICAgICAgICAgIC8vIHtOb30sIHtkZWxldGV9XG4gICAgXCJ7ZmVlZGJhY2t9IHthY3Rpb259IHt0YXJnZXR9XCIsICAgICAgICAgIC8vIHtZZXN9LCB7Y2hhbmdlfSB7dGhlIGRlbGl2ZXJ5IGRhdGV9XG4gICAgXCJ7ZmVlZGJhY2t9IHt0YWlsfVwiLCAgICAgICAgICAgICAgICAgICAgIC8vIHtZZXN9LCB7dGhhbmtzfVxuICAgIFwie2ZlZWRiYWNrfSB7YWN0aW9ufSB7dGFpbH1cIiwgICAgICAgICAgICAvLyB7WWVzfSB7cmV2aWV3fSB7d291bGQgYmUgZ3JlYXR9XG4gICAgXCJ7ZmVlZGJhY2t9IHthY3Rpb259IHt0YXJnZXR9IHt0YWlsfVwiLCAgIC8vIHtZZXN9IHtyZXZpZXd9IHt0aGUgZGVsaXZlcnkgZGF0ZX0ge3BsZWFzZX1cbiAgICAvLyBcInthY3Rpb259XCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGJhcmUgYWN0aW9uIHV0dGVyYW5jZXMsIHVzZSBzcGVjaWZpYyBzaW1wbGUgaW50ZW50cyB0byBiZSBjb21wYXRpYmxlIHdpdGggZXhpc3RpbmcgZWNvc3lzdGVtLlxuICAgIFwie2FjdGlvbn0ge3RhcmdldH1cIiwgICAgICAgICAgICAgICAgICAgICAvLyB7Y2hhbmdlfSB7c3RhcnQgZGF0ZX1cbiAgICBcIntoZWFkfSB7YWN0aW9ufVwiLCAgICAgICAgICAgICAgICAgICAgICAgLy8ge2p1c3R9IHtkZWxldGV9XG4gICAgXCJ7aGVhZH0ge2FjdGlvbn0ge3RhcmdldH1cIiwgICAgICAgICAgICAgIC8vIHtqdXN0fSB7ZGVsZXRlfSB7aXR9XG4gICAgXCJ7YWN0aW9ufSB7dGFpbH1cIiwgICAgICAgICAgICAgICAgICAgICAgIC8vIHtkZWxldGV9IHtpcyBjb3JyZWN0fVxuICAgIFwie2FjdGlvbn0ge3RhcmdldH0ge3RhaWx9XCIsICAgICAgICAgICAgICAvLyB7dXBkYXRlfSB7bXkgYWRkcmVzc30ge3BsZWFzZX1cbiAgICBcIntoZWFkfSB7YWN0aW9ufSB7dGFpbH1cIiwgICAgICAgICAgICAgICAgLy8ge2dvIGFoZWFkIGFuZH0ge2RlbGV0ZX0ge3RoYW5rc31cbiAgICBcIntoZWFkfSB7YWN0aW9ufSB7dGFyZ2V0fSB7dGFpbH1cIiwgICAgICAgLy8ge2dvIGFoZWFkIGFuZH0ge2RlbGV0ZX0ge3RoZSBpdGVtfSB7dGhhbmtzfVxuXTsiXX0=