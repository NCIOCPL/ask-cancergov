"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUTCDate = exports.getStartDateOfRange = exports.getEndDateOfRange = exports.getDay = exports.getMonth = exports.getYear = exports.findEdgeDateOfDateRange = exports.getDaysInMonth = exports.alexaDateFormatToDate = exports.dateToAlexaDateFormat = void 0;
// transform date to yyyy-mm-dd dateToAlexaDateFormat
function dateToAlexaDateFormat(date) {
    const mm = date.getMonth() + 1;
    const mmString = mm >= 10 ? `${mm}` : `0${mm}`;
    const dd = date.getDate();
    const ddString = dd >= 10 ? `${dd}` : `0${dd}`;
    return `${date.getFullYear()}-${mmString}-${ddString}`;
}
exports.dateToAlexaDateFormat = dateToAlexaDateFormat;
// transform yyyy-mm-dd to Date
// TODO: Handle all ALEXA.DATE format such as '2015-W49-WE'
function alexaDateFormatToDate(date) {
    return new Date(date);
}
exports.alexaDateFormatToDate = alexaDateFormatToDate;
// Given a specific month and year, find the last date of that month
// E.G. given (2, 2020) returns 28
function getDaysInMonth(m, y) {
    return new Date(y, m - 1, 0).getDate();
}
exports.getDaysInMonth = getDaysInMonth;
/**
 * Find Start / End date of the input date range
 * @param date - Alexa date format string input E.G. 2019 / 2019-04 / 2019-04-01
 * @param start - Flag to determine if the output should be the start / end of the input date range
 */
// TODO: Handle all ALEXA.DATE format such as '2015-W49-WE'
function findEdgeDateOfDateRange(date, start) {
    const yy = getYear(date);
    const mm = date.charAt(4) === '-' ? getMonth(date) : undefined;
    const dd = date.charAt(7) === '-' ? getDay(date) : undefined;
    if (mm === undefined) {
        return start ? `${yy}-01-01` : `${yy}-12-31`;
    }
    else if (dd === undefined) {
        const mmString = mm < 10 ? `0${mm}` : `${mm}`;
        return start ? `${yy}-${mmString}-01` : `${yy}-${mmString}-${getDaysInMonth(mm, yy)}`;
    }
    return date;
}
exports.findEdgeDateOfDateRange = findEdgeDateOfDateRange;
function getYear(date) {
    const yy = parseInt(date.substring(0, 4), 10);
    return yy;
}
exports.getYear = getYear;
function getMonth(date) {
    const mm = parseInt(date.substring(5, 7), 10);
    return mm;
}
exports.getMonth = getMonth;
function getDay(date) {
    const dd = parseInt(date.substring(8, 10), 10);
    return dd;
}
exports.getDay = getDay;
function getEndDateOfRange(date) {
    return alexaDateFormatToDate(findEdgeDateOfDateRange(date, false));
}
exports.getEndDateOfRange = getEndDateOfRange;
function getStartDateOfRange(date) {
    return alexaDateFormatToDate(findEdgeDateOfDateRange(date, true));
}
exports.getStartDateOfRange = getStartDateOfRange;
function getUTCDate(date) {
    // Get the offset between local time zone and UTC in minutes
    const offset = date.getTimezoneOffset();
    const utcTime = date.getTime() + offset * 60000;
    return new Date(utcTime);
}
exports.getUTCDate = getUTCDate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0ZUhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb25Db250cm9scy9kYXRlUmFuZ2VDb250cm9sL0RhdGVIZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7OztHQVdHOzs7QUFFSCxxREFBcUQ7QUFDckQsU0FBZ0IscUJBQXFCLENBQUMsSUFBVTtJQUM1QyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLE1BQU0sUUFBUSxHQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7SUFDdkQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzFCLE1BQU0sUUFBUSxHQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7SUFDdkQsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxRQUFRLElBQUksUUFBUSxFQUFFLENBQUM7QUFDM0QsQ0FBQztBQU5ELHNEQU1DO0FBRUQsK0JBQStCO0FBQy9CLDJEQUEyRDtBQUMzRCxTQUFnQixxQkFBcUIsQ0FBQyxJQUFZO0lBRTlDLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUhELHNEQUdDO0FBRUQsb0VBQW9FO0FBQ3BFLGtDQUFrQztBQUNsQyxTQUFnQixjQUFjLENBQUMsQ0FBUyxFQUFFLENBQVM7SUFDL0MsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUMzQyxDQUFDO0FBRkQsd0NBRUM7QUFFRDs7OztHQUlHO0FBQ0gsMkRBQTJEO0FBQzNELFNBQWdCLHVCQUF1QixDQUFDLElBQVksRUFBRSxLQUFjO0lBQ2hFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDL0QsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQzdELElBQUksRUFBRSxLQUFLLFNBQVMsRUFBRTtRQUNsQixPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztLQUNoRDtTQUFNLElBQUksRUFBRSxLQUFLLFNBQVMsRUFBRTtRQUN6QixNQUFNLFFBQVEsR0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO1FBQ3RELE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksUUFBUSxJQUFJLGNBQWMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUN6RjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFYRCwwREFXQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxJQUFZO0lBQ2hDLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM5QyxPQUFPLEVBQUUsQ0FBQztBQUNkLENBQUM7QUFIRCwwQkFHQztBQUVELFNBQWdCLFFBQVEsQ0FBQyxJQUFZO0lBQ2pDLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM5QyxPQUFPLEVBQUUsQ0FBQztBQUNkLENBQUM7QUFIRCw0QkFHQztBQUVELFNBQWdCLE1BQU0sQ0FBQyxJQUFZO0lBQy9CLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvQyxPQUFPLEVBQUUsQ0FBQztBQUNkLENBQUM7QUFIRCx3QkFHQztBQUVELFNBQWdCLGlCQUFpQixDQUFDLElBQVk7SUFDMUMsT0FBTyxxQkFBcUIsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN2RSxDQUFDO0FBRkQsOENBRUM7QUFFRCxTQUFnQixtQkFBbUIsQ0FBQyxJQUFZO0lBQzVDLE9BQU8scUJBQXFCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDdEUsQ0FBQztBQUZELGtEQUVDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLElBQVU7SUFDakMsNERBQTREO0lBQzVELE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ2hELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBRWhELE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0IsQ0FBQztBQU5ELGdDQU1DIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gdHJhbnNmb3JtIGRhdGUgdG8geXl5eS1tbS1kZCBkYXRlVG9BbGV4YURhdGVGb3JtYXRcbmV4cG9ydCBmdW5jdGlvbiBkYXRlVG9BbGV4YURhdGVGb3JtYXQoZGF0ZTogRGF0ZSk6IHN0cmluZyB7XG4gICAgY29uc3QgbW0gPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICAgIGNvbnN0IG1tU3RyaW5nOiBzdHJpbmcgPSBtbSA+PSAxMCA/IGAke21tfWAgOiBgMCR7bW19YDtcbiAgICBjb25zdCBkZCA9IGRhdGUuZ2V0RGF0ZSgpO1xuICAgIGNvbnN0IGRkU3RyaW5nOiBzdHJpbmcgPSBkZCA+PSAxMCA/IGAke2RkfWAgOiBgMCR7ZGR9YDtcbiAgICByZXR1cm4gYCR7ZGF0ZS5nZXRGdWxsWWVhcigpfS0ke21tU3RyaW5nfS0ke2RkU3RyaW5nfWA7XG59XG5cbi8vIHRyYW5zZm9ybSB5eXl5LW1tLWRkIHRvIERhdGVcbi8vIFRPRE86IEhhbmRsZSBhbGwgQUxFWEEuREFURSBmb3JtYXQgc3VjaCBhcyAnMjAxNS1XNDktV0UnXG5leHBvcnQgZnVuY3Rpb24gYWxleGFEYXRlRm9ybWF0VG9EYXRlKGRhdGU6IHN0cmluZyk6IERhdGUge1xuXG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUpO1xufVxuXG4vLyBHaXZlbiBhIHNwZWNpZmljIG1vbnRoIGFuZCB5ZWFyLCBmaW5kIHRoZSBsYXN0IGRhdGUgb2YgdGhhdCBtb250aFxuLy8gRS5HLiBnaXZlbiAoMiwgMjAyMCkgcmV0dXJucyAyOFxuZXhwb3J0IGZ1bmN0aW9uIGdldERheXNJbk1vbnRoKG06IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHksIG0gLSAxLCAwKS5nZXREYXRlKCk7XG59XG5cbi8qKlxuICogRmluZCBTdGFydCAvIEVuZCBkYXRlIG9mIHRoZSBpbnB1dCBkYXRlIHJhbmdlXG4gKiBAcGFyYW0gZGF0ZSAtIEFsZXhhIGRhdGUgZm9ybWF0IHN0cmluZyBpbnB1dCBFLkcuIDIwMTkgLyAyMDE5LTA0IC8gMjAxOS0wNC0wMVxuICogQHBhcmFtIHN0YXJ0IC0gRmxhZyB0byBkZXRlcm1pbmUgaWYgdGhlIG91dHB1dCBzaG91bGQgYmUgdGhlIHN0YXJ0IC8gZW5kIG9mIHRoZSBpbnB1dCBkYXRlIHJhbmdlXG4gKi9cbi8vIFRPRE86IEhhbmRsZSBhbGwgQUxFWEEuREFURSBmb3JtYXQgc3VjaCBhcyAnMjAxNS1XNDktV0UnXG5leHBvcnQgZnVuY3Rpb24gZmluZEVkZ2VEYXRlT2ZEYXRlUmFuZ2UoZGF0ZTogc3RyaW5nLCBzdGFydDogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgY29uc3QgeXkgPSBnZXRZZWFyKGRhdGUpO1xuICAgIGNvbnN0IG1tID0gZGF0ZS5jaGFyQXQoNCkgPT09ICctJyA/IGdldE1vbnRoKGRhdGUpIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IGRkID0gZGF0ZS5jaGFyQXQoNykgPT09ICctJyA/IGdldERheShkYXRlKSA6IHVuZGVmaW5lZDtcbiAgICBpZiAobW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gc3RhcnQgPyBgJHt5eX0tMDEtMDFgIDogYCR7eXl9LTEyLTMxYDtcbiAgICB9IGVsc2UgaWYgKGRkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgbW1TdHJpbmc6IHN0cmluZyA9IG1tIDwgMTAgPyBgMCR7bW19YCA6IGAke21tfWA7XG4gICAgICAgIHJldHVybiBzdGFydCA/IGAke3l5fS0ke21tU3RyaW5nfS0wMWAgOiBgJHt5eX0tJHttbVN0cmluZ30tJHtnZXREYXlzSW5Nb250aChtbSwgeXkpfWA7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0WWVhcihkYXRlOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIGNvbnN0IHl5ID0gcGFyc2VJbnQoZGF0ZS5zdWJzdHJpbmcoMCwgNCksIDEwKTtcbiAgICByZXR1cm4geXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb250aChkYXRlOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIGNvbnN0IG1tID0gcGFyc2VJbnQoZGF0ZS5zdWJzdHJpbmcoNSwgNyksIDEwKTtcbiAgICByZXR1cm4gbW07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXkoZGF0ZTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBjb25zdCBkZCA9IHBhcnNlSW50KGRhdGUuc3Vic3RyaW5nKDgsIDEwKSwgMTApO1xuICAgIHJldHVybiBkZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVuZERhdGVPZlJhbmdlKGRhdGU6IHN0cmluZyk6IERhdGUge1xuICAgIHJldHVybiBhbGV4YURhdGVGb3JtYXRUb0RhdGUoZmluZEVkZ2VEYXRlT2ZEYXRlUmFuZ2UoZGF0ZSwgZmFsc2UpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXJ0RGF0ZU9mUmFuZ2UoZGF0ZTogc3RyaW5nKTogRGF0ZSB7XG4gICAgcmV0dXJuIGFsZXhhRGF0ZUZvcm1hdFRvRGF0ZShmaW5kRWRnZURhdGVPZkRhdGVSYW5nZShkYXRlLCB0cnVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVVENEYXRlKGRhdGU6IERhdGUpOiBEYXRlIHtcbiAgICAvLyBHZXQgdGhlIG9mZnNldCBiZXR3ZWVuIGxvY2FsIHRpbWUgem9uZSBhbmQgVVRDIGluIG1pbnV0ZXNcbiAgICBjb25zdCBvZmZzZXQ6IG51bWJlciA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBjb25zdCB1dGNUaW1lID0gZGF0ZS5nZXRUaW1lKCkgKyBvZmZzZXQgKiA2MDAwMDtcblxuICAgIHJldHVybiBuZXcgRGF0ZSh1dGNUaW1lKTtcbn0iXX0=