"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateRangeControl = exports.DateControlTarget = exports.TargetCategory = exports.DateRangeControlState = exports.DateRangeControlValidations = exports.DateRangeValidationFailReasonCode = void 0;
const tslib_1 = require("tslib");
const i18next_1 = tslib_1.__importDefault(require("i18next"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const __1 = require("../..");
const Strings_1 = require("../../constants/Strings");
const ContainerControl_1 = require("../../controls/ContainerControl");
const AmazonBuiltInSlotType_1 = require("../../intents/AmazonBuiltInSlotType");
const ConjunctionControlIntent_1 = require("../../intents/ConjunctionControlIntent");
const DateRangeControlIntent_1 = require("../../intents/DateRangeControlIntent");
const GeneralControlIntent_1 = require("../../intents/GeneralControlIntent");
const SingleValueControlIntent_1 = require("../../intents/SingleValueControlIntent");
const ModelTypes_1 = require("../../interactionModelGeneration/ModelTypes");
const Logger_1 = require("../../logging/Logger");
const ContentActs_1 = require("../../systemActs/ContentActs");
const InitiativeActs_1 = require("../../systemActs/InitiativeActs");
const Predicates_1 = require("../../utils/Predicates");
const DateControl_1 = require("../DateControl");
const DateHelper_1 = require("./DateHelper");
const DateRangeNLUHelper_1 = require("./DateRangeNLUHelper");
const log = new Logger_1.Logger('AskSdkControls:DateRangeControl');
/**
 * Reason codes for built-in validation rules.
 */
var DateRangeValidationFailReasonCode;
(function (DateRangeValidationFailReasonCode) {
    /**
     * The start date must precede the end date.
     */
    DateRangeValidationFailReasonCode["START_BEFORE_END"] = "startBeforeEnd";
})(DateRangeValidationFailReasonCode = exports.DateRangeValidationFailReasonCode || (exports.DateRangeValidationFailReasonCode = {}));
/**
 * Built-in validation functions for use with DateControl
 */
var DateRangeControlValidations;
(function (DateRangeControlValidations) {
    DateRangeControlValidations.START_BEFORE_END = (state, input) => {
        const startDate = DateHelper_1.alexaDateFormatToDate(state.startDate);
        const endDate = DateHelper_1.alexaDateFormatToDate(state.endDate);
        if (startDate > endDate) {
            return { reasonCode: DateRangeValidationFailReasonCode.START_BEFORE_END, renderedReason: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_VALIDATION_FAIL_START_AFTER_END') };
        }
        return true;
    };
})(DateRangeControlValidations = exports.DateRangeControlValidations || (exports.DateRangeControlValidations = {}));
/**
 * State tracked by a DateRangeControl.
 */
class DateRangeControlState extends ContainerControl_1.ContainerControlState {
    constructor() {
        // TODO: refactor: collate startDate/endDate into .value
        super(...arguments);
        /**
         * Tracks whether the dateRangeControl is requesting a change to the whole range.
         */
        this.isChangingRange = false;
        /**
         * Tracks whether the dateRangeControl is confirming the whole range.
         */
        this.isConfirmingRange = false;
        /**
         * Tracks whether the topic of conversation is the whole range.
         */
        this.onFocus = true;
        /**
         * Tracks whether the range has been explicitly confirmed by the user.
         */
        this.isValueConfirmed = false;
    }
}
exports.DateRangeControlState = DateRangeControlState;
/**
 * Categorization of "what seems to be the target" of a utterance.
 */
var TargetCategory;
(function (TargetCategory) {
    TargetCategory["StartDate"] = "startDate";
    TargetCategory["EndDate"] = "endDate";
    TargetCategory["Both"] = "both";
    TargetCategory["Neither"] = "neither";
    TargetCategory["Either"] = "either";
})(TargetCategory = exports.TargetCategory || (exports.TargetCategory = {}));
/**
 * Categorization of "what seems to be the target" of a utterance.
 */
var DateControlTarget;
(function (DateControlTarget) {
    DateControlTarget["StartDate"] = "startDate";
    DateControlTarget["EndDate"] = "endDate";
})(DateControlTarget = exports.DateControlTarget || (exports.DateControlTarget = {}));
/**
 * A Control that obtains a date range from the user.
 *
 * Capabilities:
 * - Request a range, or just the start/end date
 * - Change the range, or just the start/end date
 * - Validate the range or just the start/end date
 * - Confirm the range or just the start/end date
 * - Infer specific date(s) for a partially specified date(s).
 *
 * Intents that can be handled:
 * - `GeneralControlIntent`: E.g. `"yes, update my birth date"`
 * - `ConjunctionControlIntent`: E.g. `"yes, change the start and end dates"`
 * - `DateRangeControlIntent`: E.g. "no Tuesday to Saturday".
 * - `AMAZON_DATE_ValueControlIntent`: E.g. "no change it to Tuesday".
 * - `AMAZON.YesIntent`, `AMAZON.NoIntent`
 */
class DateRangeControl extends ContainerControl_1.ContainerControl {
    constructor(props) {
        super(props);
        this.state = new DateRangeControlState();
        this.props = DateRangeControl.mergeWithDefaultProps(props);
        this.startDateControl = new DateControl_1.DateControl({
            id: `${this.props.id}_startDate`,
            interactionModel: {
                targets: this.props.interactionModel.targets.startDate
            },
            prompts: this.props.prompts.startDate,
            validation: this.props.validation.startDateValid,
            required: this.props.required,
            confirmationRequired: this.props.confirmationRequired
        });
        this.endDateControl = new DateControl_1.DateControl({
            id: `${this.props.id}_endDate`,
            interactionModel: {
                targets: this.props.interactionModel.targets.endDate
            },
            prompts: this.props.prompts.endDate,
            validation: this.props.validation.endDateValid,
            required: this.props.required,
            confirmationRequired: this.props.confirmationRequired
        });
        this.addChild(this.startDateControl)
            .addChild(this.endDateControl);
    }
    static mergeWithDefaultProps(props) {
        const defaults = {
            id: 'uninitialized',
            validation: {
                startDateValid: [],
                endDateValid: [],
                rangeValid: []
            },
            required: true,
            confirmationRequired: false,
            interactionModel: {
                targets: {
                    startDate: [Strings_1.Strings.Target.StartDate, Strings_1.Strings.Target.Date, Strings_1.Strings.Target.It],
                    endDate: [Strings_1.Strings.Target.EndDate, Strings_1.Strings.Target.Date, Strings_1.Strings.Target.It],
                    self: [Strings_1.Strings.Target.Date, Strings_1.Strings.Target.DateRange, Strings_1.Strings.Target.It]
                },
                actions: {
                    set: [Strings_1.Strings.Action.Set],
                    change: [Strings_1.Strings.Action.Change]
                },
            },
            prompts: {
                startDate: {
                    confirmValue: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_CONFIRM_START_DATE', { value: act.payload.value }),
                    valueAffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_START_DATE_AFFIRMED'),
                    valueDisaffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_START_DATE_DISAFFIRMED'),
                    valueSet: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_START_DATE_SET', { value: act.payload.value }),
                    valueChanged: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_START_DATE_CHANGED', { value: act.payload.value }),
                    invalidValue: (act) => {
                        if (act.payload.renderedReason !== undefined) {
                            return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_INVALID_START_WITH_REASON', { reason: act.payload.renderedReason });
                        }
                        return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_DATE');
                    },
                    requestValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_START_DATE'),
                    requestChangedValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_START_DATE'),
                },
                endDate: {
                    confirmValue: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_CONFIRM_END_DATE', { value: act.payload.value }),
                    valueAffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_END_DATE_AFFIRMED'),
                    valueDisaffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_END_DATE_DISAFFIRMED'),
                    valueSet: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_END_DATE_SET', { value: act.payload.value }),
                    valueChanged: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_END_DATE_CHANGED', { value: act.payload.value }),
                    invalidValue: (act) => {
                        if (act.payload.renderedReason !== undefined) {
                            return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_INVALID_END_WITH_REASON', { reason: act.payload.renderedReason });
                        }
                        return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_DATE');
                    },
                    requestValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_END_DATE'),
                    requestChangedValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_END_DATE'),
                },
                requestValue: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_VALUE'),
                valueSet: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_VALUE_SET', { start: act.startDate, end: act.endDate }),
                valueChanged: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_VALUE_CHANGED', { start: act.startDate, end: act.endDate }),
                invalidValue: (act) => {
                    if (act.payload.renderedReason !== undefined) {
                        return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_INVALID_VALUE_WITH_REASON', { reason: act.payload.renderedReason });
                    }
                    return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_VALUE');
                },
                valueAffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_VALUE_AFFIRMED'),
                valueDisaffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_VALUE_DISAFFIRMED'),
                confirmValue: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_CONFIRM_VALUE', { value: act.payload.value }),
            },
            reprompts: {
                startDate: {
                    confirmValue: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_CONFIRM_START_DATE', { value: act.payload.value }),
                    valueAffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_START_DATE_AFFIRMED'),
                    valueDisaffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_START_DATE_DISAFFIRMED'),
                    valueSet: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_START_DATE_SET', { value: act.payload.value }),
                    valueChanged: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_START_DATE_CHANGED', { value: act.payload.value }),
                    invalidValue: (act) => {
                        if (act.payload.reasonCode !== undefined) {
                            return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_INVALID_START_WITH_REASON', { reason: act.payload.reasonCode });
                        }
                        return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_DATE');
                    },
                    requestValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_START_DATE'),
                    requestChangedValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_START_DATE'),
                },
                endDate: {
                    confirmValue: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_CONFIRM_END_DATE', { value: act.payload.value }),
                    valueAffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_END_DATE_AFFIRMED'),
                    valueDisaffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_END_DATE_DISAFFIRMED'),
                    valueSet: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_END_DATE_SET', { value: act.payload.value }),
                    valueChanged: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_END_DATE_CHANGED', { value: act.payload.value }),
                    invalidValue: (act) => {
                        if (act.payload.reasonCode !== undefined) {
                            return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_INVALID_END_WITH_REASON', { reason: act.payload.reasonCode });
                        }
                        return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_DATE');
                    },
                    requestValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_END_DATE'),
                    requestChangedValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_END_DATE'),
                },
                requestValue: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_VALUE'),
                valueSet: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_VALUE_SET', { start: act.startDate, end: act.endDate }),
                valueChanged: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_VALUE_CHANGED', { start: act.startDate, end: act.endDate }),
                invalidValue: (act) => {
                    if (act.payload.reasonCode !== undefined) {
                        return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_INVALID_VALUE_WITH_REASON', { reason: act.payload.reasonCode });
                    }
                    return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_VALUE');
                },
                valueAffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_VALUE_AFFIRMED'),
                valueDisaffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_VALUE_DISAFFIRMED'),
                confirmValue: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_CONFIRM_VALUE', { value: act.payload.value }),
            },
        };
        return lodash_1.default.mergeWith(defaults, props);
    }
    // tsDoc - see Control
    async canHandle(input) {
        return await this.canHandleForFocus(input) || this.canHandleForNoFocus(input);
    }
    // tsDoc - see Control
    async handle(input, resultBuilder) {
        log.debug(`DateRangeControl[${this.id}]: handle(). Entering`);
        // update the priorStartDate and priorEndDate before new operation
        this.updatePrior();
        // Calling handle function to make changes to state values
        if (this.handleFunc) {
            return this.handleFunc(input, resultBuilder);
        }
        // If can't handle by DateRangeControl itself, let children handle it and update state values
        await this.handleByChild(input, resultBuilder);
        const newStartDate = this.getStartDateFromChild();
        const newEndDate = this.getEndDateFromChild();
        this.setStartDate(newStartDate);
        this.setEndDate(newEndDate);
        this.state.onFocus = false;
        // After child handle the request and child has no question
        // ask DateRangeControl whether the value is ready
        if (!resultBuilder.hasInitiativeAct() && await this.canTakeInitiative(input)) {
            if (this.takeInitiativeFunc !== undefined) {
                this.takeInitiativeFunc(input, resultBuilder);
            }
        }
    }
    // tsDoc - see Control
    updateInteractionModel(generator, imData) {
        generator.addControlIntent(new GeneralControlIntent_1.GeneralControlIntent(), imData);
        generator.addControlIntent(new ConjunctionControlIntent_1.ConjunctionControlIntent(), imData);
        generator.addControlIntent(new DateRangeControlIntent_1.DateRangeControlIntent(), imData);
        generator.addControlIntent(new __1.SingleValueControlIntent(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.DATE), imData);
        generator.addYesAndNoIntents();
        if (this.props.interactionModel.targets.self.includes(Strings_1.Strings.Target.Date)) {
            generator.addValuesToSlotType(ModelTypes_1.SharedSlotType.TARGET, i18next_1.default.t('DATE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_DATE', { returnObjects: true }));
        }
        if (this.props.interactionModel.targets.self.includes(Strings_1.Strings.Target.DateRange)) {
            generator.addValuesToSlotType(ModelTypes_1.SharedSlotType.TARGET, i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_DATE_RANGE', { returnObjects: true }));
        }
        if (this.props.interactionModel.targets.startDate.includes(Strings_1.Strings.Target.StartDate)) {
            generator.addValuesToSlotType(ModelTypes_1.SharedSlotType.TARGET, i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_START_DATE', { returnObjects: true }));
        }
        if (this.props.interactionModel.targets.endDate.includes(Strings_1.Strings.Target.EndDate)) {
            generator.addValuesToSlotType(ModelTypes_1.SharedSlotType.TARGET, i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_END_DATE', { returnObjects: true }));
        }
    }
    // tsDoc - see InteractionModelContributor
    getTargetIds() {
        return this.props.interactionModel.targets.self;
    }
    getStartDateFromChild() {
        return this.startDateControl.state.value;
    }
    getEndDateFromChild() {
        return this.endDateControl.state.value;
    }
    setStartDate(date) {
        this.startDateControl.state.value = date;
        this.state.startDate = date;
        // Clean open question once a value set
        this.state.isChangingRange = false;
    }
    setEndDate(date) {
        this.endDateControl.state.value = date;
        this.state.endDate = date;
        // Clean open question once a value set
        this.state.isChangingRange = false;
    }
    async canHandleForFocus(input) {
        try {
            Predicates_1.okIf(this.state.onFocus === true);
            // When the focus is on parent itself
            // give the parent priority to handle the request
            return this.isTwoValueInput(input)
                || this.isDateInterpretedAsDateRange(input)
                || this.isChangeBoth(input)
                || this.isChangeRange(input)
                || this.isConfirmationAffirmed(input)
                || this.isConfirmationDisAffirmed(input)
                || this.canHandleByChild(input);
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    async canHandleForNoFocus(input) {
        try {
            Predicates_1.okIf(this.state.onFocus === false);
            // When the focus is on children
            // give children priority to handle the request
            return await this.canHandleByChild(input)
                || this.isTwoValueInput(input)
                || this.isDateInterpretedAsDateRange(input)
                || this.isChangeBoth(input)
                || this.isChangeRange(input)
                || this.isConfirmationAffirmed(input)
                || this.isConfirmationDisAffirmed(input);
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    /**
     * Test if the input has both start date and end date provided
     */
    isTwoValueInput(input) {
        try {
            Predicates_1.okIf(__1.InputUtil.isIntent(input, DateRangeControlIntent_1.DateRangeControlIntent.name));
            const intent = input.request.intent;
            const unpackedSlots = DateRangeControlIntent_1.unpackDateRangeControlIntent(intent);
            if (unpackedSlots.target !== undefined) {
                Predicates_1.okIf(__1.InputUtil.targetIsMatchOrUndefined(unpackedSlots.target, this.props.interactionModel.targets.self));
            }
            else {
                Predicates_1.okIf(__1.InputUtil.targetIsMatchOrUndefined(unpackedSlots["target.a"], this.props.interactionModel.targets.startDate) || __1.InputUtil.targetIsMatchOrUndefined(unpackedSlots["target.a"], this.props.interactionModel.targets.endDate));
                Predicates_1.okIf(__1.InputUtil.targetIsMatchOrUndefined(unpackedSlots["target.b"], this.props.interactionModel.targets.startDate) || __1.InputUtil.targetIsMatchOrUndefined(unpackedSlots["target.b"], this.props.interactionModel.targets.endDate));
            }
            const inputGroups = DateRangeNLUHelper_1.generateDatesInputGroups(this.props, unpackedSlots);
            for (const inputGroup of inputGroups) {
                Predicates_1.okIf(__1.InputUtil.valueStrDefined(inputGroup.value));
                Predicates_1.okIf(__1.InputUtil.actionIsSetOrUndefined(inputGroup.action, this.props.interactionModel.actions.set) || __1.InputUtil.actionIsMatch(inputGroup.action, this.props.interactionModel.actions.change));
                Predicates_1.okIf(inputGroup.target === TargetCategory.StartDate || inputGroup.target === TargetCategory.EndDate);
            }
            this.handleFunc = this.handleTwoValueInput;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleTwoValueInput(input, resultBuilder) {
        const intent = input.request.intent;
        const unpackedSlots = DateRangeControlIntent_1.unpackDateRangeControlIntent(intent);
        const inputGroups = DateRangeNLUHelper_1.generateDatesInputGroups(this.props, unpackedSlots);
        for (const inputGroup of inputGroups) {
            if (inputGroup.target === TargetCategory.StartDate) {
                this.setStartDate(DateHelper_1.findEdgeDateOfDateRange(inputGroup.value, true));
            }
            else if (inputGroup.target === TargetCategory.EndDate) {
                this.setEndDate(DateHelper_1.findEdgeDateOfDateRange(inputGroup.value, false));
            }
        }
        // reset the confirmation flag to false
        this.state.isValueConfirmed = false;
        this.state.onFocus = true;
        if (this.wantsToConfirmRange(input)) {
            this.confirmValue(input, resultBuilder);
            return;
        }
        this.ackDateRangeValueChanged(resultBuilder);
        if (this.wantsToCorrectRange(input)) {
            this.correctRange(input, resultBuilder);
        }
    }
    /**
     * Determine whether the input single date value should be considered as date range
     *
     * The DateRangeControl will regard a single value input as date range when there's no clear target and
     * when the DateRangeControl itself is under focus
     * E.G. 'set range to 2018', where 2018 will be regarded as a range and both start date and end date will be set to 2018
     */
    isDateInterpretedAsDateRange(input) {
        try {
            Predicates_1.okIf(__1.InputUtil.isSingleValueControlIntent(input, AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.DATE));
            const intent = input.request.intent;
            const unpackedSlots = SingleValueControlIntent_1.unpackSingleValueControlIntent(intent);
            Predicates_1.okIf(__1.InputUtil.targetIsMatchOrUndefined(unpackedSlots.target, this.props.interactionModel.targets.self));
            Predicates_1.okIf(__1.InputUtil.actionIsMatchOrUndefined(unpackedSlots.action, this.props.interactionModel.actions.set) || __1.InputUtil.actionIsMatchOrUndefined(unpackedSlots.action, this.props.interactionModel.actions.change));
            this.handleFunc = this.handleDateRangeInput;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleDateRangeInput(input, resultBuilder) {
        const intent = input.request.intent;
        const { valueStr } = SingleValueControlIntent_1.unpackSingleValueControlIntent(intent);
        this.setStartDate(DateHelper_1.findEdgeDateOfDateRange(valueStr, true));
        this.setEndDate(DateHelper_1.findEdgeDateOfDateRange(valueStr, false));
        this.state.isValueConfirmed = false;
        this.state.onFocus = true;
        if (this.wantsToConfirmRange(input)) {
            this.confirmValue(input, resultBuilder);
            return;
        }
        this.ackDateRangeValueChanged(resultBuilder);
        if (this.wantsToCorrectRange(input)) {
            this.correctRange(input, resultBuilder);
        }
    }
    /**
     * Determine whether the input action is targeting both start date and end date
     *
     * E.G. 'Change start date and end date'
     */
    isChangeBoth(input) {
        try {
            Predicates_1.okIf(__1.InputUtil.isIntent(input, ConjunctionControlIntent_1.ConjunctionControlIntent.name));
            const intent = input.request.intent;
            const unpackedSlots = ConjunctionControlIntent_1.unpackConjunctionControlIntent(intent);
            Predicates_1.okIf(__1.InputUtil.feedbackIsMatchOrUndefined(unpackedSlots.feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            const inputs = ConjunctionControlIntent_1.generateActionTaskPairs(unpackedSlots);
            for (const input of inputs) {
                Predicates_1.okIf(__1.InputUtil.targetIsMatchOrUndefined(input.target, this.props.interactionModel.targets.startDate) || __1.InputUtil.targetIsMatchOrUndefined(input.target, this.props.interactionModel.targets.endDate));
                Predicates_1.okIf(__1.InputUtil.actionIsSetOrUndefined(input.action, this.props.interactionModel.actions.set) || __1.InputUtil.actionIsMatch(input.action, this.props.interactionModel.actions.change));
            }
            this.handleFunc = this.handleChangeValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    /**
     * Determine whether the input action is targeting date range
     *
     * E.G. 'Change', 'Change date'
     */
    isChangeRange(input) {
        try {
            Predicates_1.okIf(__1.InputUtil.isIntent(input, GeneralControlIntent_1.GeneralControlIntent.name));
            const intent = input.request.intent;
            const unpackedSlots = GeneralControlIntent_1.unpackGeneralControlIntent(intent);
            Predicates_1.okIf(__1.InputUtil.feedbackIsMatchOrUndefined(unpackedSlots.feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(__1.InputUtil.targetIsMatchOrUndefined(unpackedSlots.target, this.props.interactionModel.targets.self));
            this.handleFunc = this.handleChangeValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    isConfirmationAffirmed(input) {
        try {
            Predicates_1.okIf(__1.InputUtil.isBareYes(input));
            Predicates_1.okIf(this.state.isConfirmingRange);
            this.handleFunc = this.handleConfirmationAffirmed;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleConfirmationAffirmed(input, resultBuilder) {
        this.state.isValueConfirmed = true;
        this.state.isConfirmingRange = false;
        // If the date range is confirmed in parent
        // update children's status to avoid duplicate confirmation
        this.startDateControl.state.isValueConfirmed = true;
        this.endDateControl.state.isValueConfirmed = true;
        const actPayload = i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_STATE_VALUE_FOR_START_AND_END', { start: this.state.startDate, end: this.state.endDate });
        if (this.wantsToCorrectRange(input)) {
            this.correctRange(input, resultBuilder);
            return;
        }
        resultBuilder.addAct(new ContentActs_1.ValueConfirmedAct(this, { value: actPayload }));
        this.ackDateRangeValueChanged(resultBuilder);
    }
    isConfirmationDisAffirmed(input) {
        try {
            Predicates_1.okIf(__1.InputUtil.isBareNo(input));
            Predicates_1.okIf(this.state.isConfirmingRange === true);
            this.handleFunc = this.handleConfirmationDisAffirmed;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleConfirmationDisAffirmed(input, resultBuilder) {
        this.state.isValueConfirmed = false;
        this.state.isConfirmingRange = false;
        const actPayload = i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_STATE_VALUE_FOR_START_AND_END', { start: this.state.startDate, end: this.state.endDate });
        resultBuilder.addAct(new ContentActs_1.ValueDisconfirmedAct(this, { value: actPayload }));
        resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
    }
    handleChangeValue(input, resultBuilder) {
        this.state.isChangingRange = true;
        this.state.onFocus = true;
        resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
    }
    // Update priorEndDate & priorStartDate
    updatePrior() {
        // Only update prior if it's not in confirming range status
        if (!this.state.isConfirmingRange) {
            this.state.previousEndDate = this.state.endDate;
            this.state.previousStartDate = this.state.startDate;
        }
    }
    ackDateRangeValueChanged(resultBuilder) {
        // The DateRangeControl only ack date range changes
        // Only start date change or end date change will be handled by Child controls
        if (this.state.startDate !== undefined && this.state.endDate !== undefined && (this.state.startDate !== this.state.previousStartDate && this.state.endDate !== this.state.previousEndDate)) {
            // If it's the first time to set the value, DateRangeControl will send DateRangeSetAct
            // And when there's an old value exist, DateRangeControl will send DateRangeChangedAct
            this.state.previousStartDate !== undefined && this.state.previousEndDate !== undefined ?
                resultBuilder.addAct(new ContentActs_1.DateRangeChangedAct(this, this.state.startDate, this.state.endDate, this.state.previousStartDate, this.state.previousEndDate)) :
                resultBuilder.addAct(new ContentActs_1.DateRangeSetAct(this, this.state.startDate, this.state.endDate));
        }
    }
    validateDateRange(input) {
        const listOfValidationFunc = typeof (this.props.validation.rangeValid) === 'function' ? [this.props.validation.rangeValid] : this.props.validation.rangeValid;
        for (const validationFunction of listOfValidationFunc) {
            const validationResult = validationFunction(this.state, input);
            if (validationResult !== true) {
                log.debug(`DateRangeControl.validate(): validation failed. Reason: ${JSON.stringify(validationResult, null, 2)}.`);
                return validationResult;
            }
        }
        return true;
    }
    // tsDoc - see Control
    renderAct(act, input, builder) {
        if (act instanceof InitiativeActs_1.RequestValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.requestValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.requestValue, input));
        }
        else if (act instanceof ContentActs_1.DateRangeSetAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueSet, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueSet, input));
        }
        else if (act instanceof ContentActs_1.DateRangeChangedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueChanged, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueChanged, input));
        }
        else if (act instanceof ContentActs_1.InvalidValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.invalidValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.invalidValue, input));
        }
        else if (act instanceof InitiativeActs_1.ConfirmValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.confirmValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.confirmValue, input));
        }
        else if (act instanceof ContentActs_1.ValueConfirmedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueAffirmed, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueAffirmed, input));
        }
        else if (act instanceof ContentActs_1.ValueDisconfirmedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueDisaffirmed, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueDisaffirmed, input));
        }
        else {
            this.throwUnhandledActError(act);
        }
    }
    // tsDoc - see Control
    async canTakeInitiative(input) {
        return this.needsValue(input)
            || await this.canTakeInitiativeByChild(input)
            || this.isChangingRange()
            || this.wantsToCorrectRange(input)
            || this.wantsToConfirmRange(input);
    }
    // tsDoc - see Control
    async takeInitiative(input, resultBuilder) {
        log.debug(`DateRangeControl[${this.id}]: takeInitiative(). Entering`);
        if (this.takeInitiativeFunc !== undefined) {
            this.takeInitiativeFunc(input, resultBuilder);
        }
    }
    needsValue(input) {
        try {
            Predicates_1.okIf(this.evaluateBooleanProp(this.props.required, input));
            Predicates_1.okIf(this.state.startDate === undefined && this.state.endDate === undefined);
            this.takeInitiativeFunc = this.requestDateRange;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    requestDateRange(input, resultBuilder) {
        this.state.onFocus = true;
        resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
    }
    isChangingRange() {
        try {
            Predicates_1.okIf(this.state.isChangingRange === true);
            this.takeInitiativeFunc = this.requestDateRange;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    wantsToCorrectRange(input) {
        try {
            // Only fix range when range is set and there's no open question
            Predicates_1.okIf(!this.needsValue(input) && !this.state.isChangingRange);
            const rangeValidationResult = this.validateDateRange(input);
            Predicates_1.okIf(rangeValidationResult !== true);
            this.takeInitiativeFunc = this.correctRange;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    correctRange(input, resultBuilder) {
        const rangeValidationResult = this.validateDateRange(input);
        this.state.onFocus = true;
        if (rangeValidationResult !== true) {
            const actPayload = i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_STATE_VALUE_FOR_START_AND_END', { start: this.state.startDate, end: this.state.endDate });
            resultBuilder.addAct(new ContentActs_1.InvalidValueAct(this, { value: actPayload, reasonCode: rangeValidationResult.reasonCode, renderedReason: rangeValidationResult.renderedReason }));
            // if the range-validation failure is due to one date changing, only request that one
            if (this.state.startDate !== this.state.previousStartDate && this.state.endDate !== this.state.previousEndDate) {
                resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
            }
            else if (this.state.startDate !== this.state.previousStartDate) {
                resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this.startDateControl));
            }
            else {
                resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this.endDateControl));
            }
            return;
        }
    }
    wantsToConfirmRange(input) {
        try {
            Predicates_1.okIf(this.props.confirmationRequired === true);
            Predicates_1.okIf(this.state.isValueConfirmed === false);
            this.takeInitiativeFunc = this.confirmValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    confirmValue(input, resultBuilder) {
        this.state.isConfirmingRange = true;
        const actPayload = i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_STATE_VALUE_FOR_START_AND_END', { start: this.state.startDate, end: this.state.endDate });
        resultBuilder.addAct(new InitiativeActs_1.ConfirmValueAct(this, { value: actPayload }));
    }
    // tsDoc - see ContainerControl
    async canTakeInitiativeByChild(input) {
        try {
            Predicates_1.okIf(await super.canTakeInitiativeByChild(input));
            this.state.onFocus = false;
            this.takeInitiativeFunc = this.takeInitiativeByChild;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
}
exports.DateRangeControl = DateRangeControl;
//# sourceMappingURL=data:application/json;base64,