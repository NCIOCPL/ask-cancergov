import { DeepRequired } from '..';
import { Control, ControlProps, ControlState } from '../controls/Control';
import { ControlInput } from '../controls/ControlInput';
import { ControlResultBuilder } from '../controls/ControlResult';
import { InteractionModelContributor } from '../controls/mixins/InteractionModelContributor';
import { ValidationResult } from '../controls/ValidationResult';
import { ControlInteractionModelGenerator } from '../interactionModelGeneration/ControlInteractionModelGenerator';
import { ModelData } from '../interactionModelGeneration/ModelTypes';
import { ControlResponseBuilder } from '../responseGeneration/ControlResponseBuilder';
import { InformConfusingConfirmationAct, InformConfusingDisconfirmationAct, InvalidValueAct, ProblematicInputValueAct, ValueConfirmedAct, ValueDisconfirmedAct, ValueSetAct } from "../systemActs/ContentActs";
import { ConfirmValueAct, RequestValueAct, SuggestValueAct } from '../systemActs/InitiativeActs';
import { SystemAct } from '../systemActs/SystemAct';
import { StringOrList } from '../utils/BasicTypes';
/**
 * Props for a NumberControl.
 */
export interface NumberControlProps extends ControlProps {
    /**
     * Unique identifier for control instance
     */
    id: string;
    /**
     * Function(s) that determine if the value is valid.
     *
     * Default: `true`, i.e. any value is valid.
     *
     * Usage:
     * - Validation functions return either `true` or a `ValidationResult` to
     *   describe what validation failed.
     */
    validation?: NumberValidationFunction | NumberValidationFunction[];
    /**
     * Determines if the Control must obtain a value.
     *
     * If `true`:
     *  - the Control report isReady() = false if no value has been obtained.
     *  - the control will take the initiative when given the opportunity.
     */
    required?: boolean | ((input: ControlInput) => boolean);
    /**
     * Props to customize the prompt fragments that will be added by `this.renderAct()`.
     */
    prompts?: NumberControlPromptsProps;
    /**
     * Props to customize the reprompt fragments that will be added by `this.renderAct()`.
     */
    reprompts?: NumberControlPromptsProps;
    /**
     * Whether the Control has to obtain explicit confirmation of the value.
     *
     * If `true`:
     *  - the Control will report `isReady() = false` if the value has not been
     *    explicitly confirmed as correct by user.
     *  - the Control will take the initiative when given the opportunity.
     */
    confirmationRequired?: boolean | NumberConfirmationRequireFunction;
    /**
     * List of value-pairs that are known to be frequently misunderstood by NLU
     *
     * Control behavior:
     * - If the user disaffirms one value of a pair, the other will be
     *   suggested.
     */
    ambiguousPairs?: Array<[number, number]>;
    /**
     * Props to customize the relationship between the control and the
     * interaction model.
     */
    interactionModel?: NumberControlInteractionModelProps;
}
/**
 * NumberControl validation function
 */
export declare type NumberValidationFunction = (state: NumberControlState, input: ControlInput) => true | ValidationResult;
/**
 * NumberControl isRequired function
 */
export declare type NumberConfirmationRequireFunction = (state: NumberControlState, input: ControlInput) => boolean;
/**
 * Mapping of action slot values to the behaviors that this control supports.
 *
 * Behavior:
 * - This control will not handle an input if the action-slot is filled with an
 *   value whose ID is not associated with a capability.
 */
export declare type NumberControlActionProps = {
    /**
     * Action slot value IDs that are associated with the "set value" capability.
     *
     * Default: ['builtin_set']
     */
    set?: string[];
    /**
     * Action slot value IDs that are associated with the "change value" capability.
     *
     * Default ['builtin_change']
     */
    change?: string[];
};
/**
 * Props associated with the interaction model.
 */
export interface NumberControlInteractionModelProps {
    /**
     * Target-slot values associated with this Control.
     *
     * Targets associate utterances to a control. For example, if the user says
     * "change the time", it is parsed as a `GeneralControlIntent` with slot
     * values `action = change` and `target = time`.  Only controls that are
     * registered with the `time` target should offer to handle this intent.
     *
     * Default: ['builtin_it']
     *
     * Usage:
     * - If this prop is defined, it replaces the default; it is not additive
     *   the defaults.  To add an additional target to the defaults, copy the
     *   defaults and amend.
     * - A control can be associated with many target-slot-values, eg ['date',
     *   'startDate', 'eventStartDate', 'vacationStart']
     * - It is a good idea to associate with general targets (e.g. date) and
     *   also with specific targets (e.g. vacationStart) so that the user can
     *   say either general or specific things.  e.g. 'change the date to
     *   Tuesday', or 'I want my vacation to start on Tuesday'.
     * - The association does not have to be exclusive, and general target slot
     *   values will often be associated with many controls. In situations where
     *   there is ambiguity about what the user is referring to, the parent
     *   controls must resolve the confusion.
     * - The 'builtin_*' IDs are associated with default interaction model data
     *   (which can be extended as desired). Any other IDs will require a full
     *   definition of the allowed synonyms in the interaction model.
     *
     * Control behavior:
     * - A control will not handle an input that mentions a target that is not
     *   registered by this prop.
     *
     */
    targets?: string[];
    /**
     * Action slot-values associated to the control's capabilities.
     *
     * Action slot-values associate utterances to a control. For example, if the
     * user says "change the time", it is parsed as a `GeneralControlIntent`
     * with slot values `action = change` and `target = time`.  Only controls
     * that are registered with the `change` action should offer to handle this
     * intent.
     *
     * Usage:
     *  - This allows users to refer to an action using more domain-appropriate
     *    words. For example, a user might like to say 'show two items' rather
     *    that 'set item count to two'.  To achieve this, include the
     *    slot-value-id 'show' in the list associated with the 'set' capability
     *    and ensure the interaction-model includes an action slot value with
     *    id=show and appropriate synonyms.
     *  - The 'builtin_*' IDs are associated with default interaction model data
     *    (which can be extended as desired). Any other IDs will require a full
     *    definition of the allowed synonyms in the interaction model.
     */
    actions?: NumberControlActionProps;
}
/**
 * Props to customize the prompt fragments that will be added by `this.renderAct()`.
 */
export interface NumberControlPromptsProps {
    requestValue?: StringOrList | ((act: RequestValueAct, input: ControlInput) => StringOrList);
    confirmValue?: StringOrList | ((act: ConfirmValueAct<number>, input: ControlInput) => StringOrList);
    valueDisconfirmed?: StringOrList | ((act: ValueDisconfirmedAct<number>, input: ControlInput) => StringOrList);
    valueSet?: StringOrList | ((act: ValueSetAct<number>, input: ControlInput) => StringOrList);
    valueConfirmed?: StringOrList | ((act: ValueConfirmedAct<number>, input: ControlInput) => StringOrList);
    suggestValue?: StringOrList | ((act: SuggestValueAct<number>, input: ControlInput) => StringOrList);
    informConfusingDisconfirmation?: StringOrList | ((act: InformConfusingDisconfirmationAct<number>, input: ControlInput) => StringOrList);
    informConfusingConfirmation?: StringOrList | ((act: InformConfusingConfirmationAct<number>, input: ControlInput) => StringOrList);
    problematicInputValue?: StringOrList | ((act: ProblematicInputValueAct<number>, input: ControlInput) => StringOrList);
    invalidValue?: StringOrList | ((act: InvalidValueAct<number>, input: ControlInput) => StringOrList);
}
/**
 * State tracked by a NumberControl.
 */
export declare class NumberControlState implements ControlState {
    /**
     * The value, an integer.
     */
    value?: number;
    /**
     * Tracks whether the value has been explicitly confirmed by the user.
     */
    isValueConfirmed: boolean;
    /**
     * Tracks the last initiative act from the control
     */
    activeInitiativeAct?: string;
    /**
     * Tracks the values the user disconfirmed.
     */
    rejectedValues: number[];
}
/**
 * A Control that obtains a single integer from the user.
 *
 * Capabilities:
 * - Request a value
 * - Change a value
 * - Validate the value
 * - Confirm the value
 * - Suggest a value, if the user disconfirms and we know a good alternative to suggest.
 *
 * Intents that can be handled:
 * - `GeneralControlIntent`: E.g. `"yes, update my age"`
 * - `AMAZON_NUMBER_ValueControlIntent`: E.g. "no change it to three".
 * - `AMAZON.YesIntent`, `AMAZON.NoIntent`
 */
export declare class NumberControl extends Control implements InteractionModelContributor {
    state: NumberControlState;
    private rawProps;
    private props;
    private handleFunc?;
    private initiativeFunc?;
    constructor(props: NumberControlProps);
    static mergeWithDefaultProps(props: NumberControlProps): DeepRequired<NumberControlProps>;
    canHandle(input: ControlInput): boolean;
    handle(input: ControlInput, resultBuilder: ControlResultBuilder): Promise<void>;
    canTakeInitiative(input: ControlInput): boolean;
    takeInitiative(input: ControlInput, resultBuilder: ControlResultBuilder): void;
    renderAct(act: SystemAct, input: ControlInput, builder: ControlResponseBuilder): void;
    updateInteractionModel(generator: ControlInteractionModelGenerator, imData: ModelData): void;
    getTargetIds(): string[];
    /**
     * Directly set the value.
     *
     * @param value - Value, either an integer or a string that can be parsed as a integer.
     */
    setValue(value: string | number): void;
    /**
     * Clear the state of this control.
     */
    clear(): void;
    private canHandleForEmptyStateValue;
    private handleLastQuestionEmptyAndValueNotExisting;
    private handleLastQuestionEmptyAndValueExisting;
    private canHandleForExistingStateValue;
    private isValueInRejectedValues;
    private handleValueExistsInRejectedValues;
    private isBareNoWhenConfirmingValue;
    private isFeedbackNoAndValueUndefinedWhenConfirmingValue;
    private handleFeedbackNoAndWithoutValueWhenConfirmingValue;
    private isFeedbackNoAndValueNotChangedWhenConfirmingValue;
    private handleFeedbackNoAndValueNotChangedWhenConfirmingValue;
    private isFeedbackNoAndValueChangedWhenConfirmingValue;
    private handleFeedbackNoAndValueChangedWhenConfirmingValue;
    private isFeedbackYesAndValueChangedWhenConfirmingValue;
    private handleFeedbackYesAndValueChangedWhenConfirmingValue;
    private isBareYesConfirmingValue;
    private isFeedbackYesAndValueNotChangedWhenConfirmingValue;
    private isFeedbackYesAndValueUndefinedWhenConfirmingValue;
    private handleFeedbackYesAndValueNotChangedOrUndefinedWhenConfirmingValue;
    private isFeedbackUndefinedAndValueNotChangedWhenConfirmingValue;
    private handleFeedbackYesAndValueUndefinedWhenConfirmingValue;
    private isFeedbackUndefinedAndValueChangedWhenConfirmingValue;
    private handleFeedbackUndefinedAndValueChangedWhenConfirmingValue;
    private isTargetsMatchWithoutFeedbackNorValueWhenConfirmingValue;
    private handleTargetMatchWithoutFeedbackNorValueWhenConfirmingValue;
    private commonHandlerWhenValueChanged;
    private commonHandlerWhenValueRejected;
    private wantsToElicitValue;
    private elicitValue;
    private wantsToFixInvalidValue;
    private fixInvalidValue;
    private wantsToConfirmValue;
    private confirmValue;
    private validateNumber;
    private isConfirmationRequired;
    private getAmbiguousPartner;
}
//# sourceMappingURL=NumberControl.d.ts.map