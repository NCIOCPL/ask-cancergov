"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.systemResource = void 0;
const Logger_1 = require("../logging/Logger");
const ModelTypes_1 = require("../interactionModelGeneration/ModelTypes");
const Strings_1 = require("../constants/Strings");
const log = new Logger_1.Logger('AskSdkControls:i18n');
/**
 * Localized data for built-ins.
 *
 * Contains prompts, reprompts, APL strings, and interaction model data.
 */
exports.systemResource = {
    en: {
        translation: {
            // DateControl Runtime
            DATE_CONTROL_DEFAULT_PROMPT_VALUE_SET: 'OK.',
            DATE_CONTROL_DEFAULT_PROMPT_VALUE_CHANGED: 'Changed from {{old}} to {{new}}.',
            DATE_CONTROL_DEFAULT_PROMPT_INVALID_VALUE_WITH_REASON: 'Sorry but that\'s not a valid date because {{reason}}.',
            DATE_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_VALUE: 'Sorry, invalid Date.',
            DATE_CONTROL_DEFAULT_PROMPT_REQUEST_VALUE: 'What date?',
            DATE_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_VALUE: 'What should I change it to?',
            DATE_CONTROL_DEFAULT_PROMPT_VALIDATION_FAIL_PAST_DATE_ONLY: 'the date cannot be greater than today',
            DATE_CONTROL_DEFAULT_PROMPT_VALIDATION_FAIL_FUTURE_DATE_ONLY: 'the date cannot be less than today',
            DATE_CONTROL_DEFAULT_PROMPT_CONFIRM_VALUE: 'Was that {{value}}?',
            DATE_CONTROL_DEFAULT_PROMPT_VALUE_AFFIRMED: 'Great.',
            DATE_CONTROL_DEFAULT_PROMPT_VALUE_DISAFFIRMED: 'My mistake.',
            DATE_CONTROL_DEFAULT_REPROMPT_VALUE_SET: 'OK.',
            DATE_CONTROL_DEFAULT_REPROMPT_VALUE_CHANGED: 'Changed from {{old}} to {{new}}.',
            DATE_CONTROL_DEFAULT_REPROMPT_INVALID_VALUE_WITH_REASON: 'Sorry but that\'s not a valid date because {{reason}}.',
            DATE_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_VALUE: 'Sorry, invalid Date.',
            DATE_CONTROL_DEFAULT_REPROMPT_REQUEST_VALUE: 'What date?',
            DATE_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_VALUE: 'What should I change it to?',
            DATE_CONTROL_DEFAULT_REPROMPT_VALIDATION_FAIL_PAST_DATE_ONLY: 'the date cannot be greater than today',
            DATE_CONTROL_DEFAULT_REPROMPT_VALIDATION_FAIL_FUTURE_DATE_ONLY: 'the date cannot be less than today',
            DATE_CONTROL_DEFAULT_REPROMPT_CONFIRM_VALUE: 'Was that {{value}}?',
            DATE_CONTROL_DEFAULT_REPROMPT_VALUE_AFFIRMED: 'Great.',
            DATE_CONTROL_DEFAULT_REPROMPT_VALUE_DISAFFIRMED: 'My mistake.',
            // DateControl BuildTime
            DATE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_DATE: {
                id: Strings_1.Strings.Target.Date,
                name: {
                    value: 'date',
                    synonyms: [
                        'date',
                        'the date',
                        'day',
                        'the day',
                    ]
                }
            },
            // NumberControl Runtime
            NUMBER_CONTROL_DEFAULT_PROMPT_VALUE_SET: 'Ok. Value set to {{value}}.',
            NUMBER_CONTROL_DEFAULT_PROMPT_INVALID_VALUE_WITH_REASON: 'Sorry but that\'s not a valid choice because {{reason}}.',
            NUMBER_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_VALUE: 'Sorry but that\'s not a valid choice.',
            NUMBER_CONTROL_DEFAULT_PROMPT_REQUEST_VALUE: 'What number?',
            NUMBER_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_VALUE: 'What should I change it to?',
            NUMBER_CONTROL_DEFAULT_PROMPT_REPEAT_UNUSABLE_VALUE: 'I\'m really sorry but I heard {{value}} again.',
            NUMBER_CONTROL_DEFAULT_PROMPT_VALUE_AFFIRMED: 'Great.',
            NUMBER_CONTROL_DEFAULT_PROMPT_VALUE_DISAFFIRMED: 'My mistake.',
            NUMBER_CONTROL_DEFAULT_PROMPT_CONFIRM_VALUE: 'Was that {{value}}?',
            NUMBER_CONTROL_DEFAULT_PROMPT_SUGGEST_VALUE: 'Did you perhaps mean {{value}}?',
            NUMBER_CONTROL_DEFAULT_PROMPT_INFORM_CONFUSING_DISCONFIRMATION: 'Sorry you disagreed but with the same number.',
            NUMBER_CONTROL_DEFAULT_PROMPT_INFORM_CONFUSING_CONFIRMATION: 'Sorry the previous value is {{previousValue}}, but you confirmed to a different number.',
            NUMBER_CONTROL_DEFAULT_REPROMPT_VALUE_SET: 'Ok. Value set to {{value}}.',
            NUMBER_CONTROL_DEFAULT_REPROMPT_INVALID_VALUE_WITH_REASON: 'Sorry but that\'s not a valid choice because {{reason}}.',
            NUMBER_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_VALUE: 'Sorry but that\'s not a valid choice.',
            NUMBER_CONTROL_DEFAULT_REPROMPT_REQUEST_VALUE: 'What number?',
            NUMBER_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_VALUE: 'What should I change it to?',
            NUMBER_CONTROL_DEFAULT_REPROMPT_REPEAT_UNUSABLE_VALUE: 'I\'m really sorry but I heard {{value}} again.',
            NUMBER_CONTROL_DEFAULT_REPROMPT_VALUE_AFFIRMED: 'Great.',
            NUMBER_CONTROL_DEFAULT_REPROMPT_VALUE_DISAFFIRMED: 'My mistake.',
            NUMBER_CONTROL_DEFAULT_REPROMPT_CONFIRM_VALUE: 'Was that {{value}}?',
            NUMBER_CONTROL_DEFAULT_REPROMPT_SUGGEST_VALUE: 'Did you perhaps mean {{value}}?',
            NUMBER_CONTROL_DEFAULT_REPROMPT_INFORM_CONFUSING_DISCONFIRMATION: 'Sorry you disagreed but with the same number.',
            NUMBER_CONTROL_DEFAULT_REPROMPT_INFORM_CONFUSING_CONFIRMATION: 'Sorry the previous value is {{previousValue}}, but you confirmed to a different number.',
            // NumberControl BuildTime
            NUMBER_CONTROL_DEFAULT_SLOT_VALUES_TARGET_NUMBER: {
                id: Strings_1.Strings.Target.Number,
                name: {
                    value: 'number',
                    synonyms: [
                        'the number',
                    ]
                }
            },
            // ValueControl Runtime
            VALUE_CONTROL_DEFAULT_PROMPT_VALUE_SET: 'OK, {{value}}.',
            VALUE_CONTROL_DEFAULT_PROMPT_VALUE_CHANGED: 'OK, I changed it to {{value}}.',
            VALUE_CONTROL_DEFAULT_PROMPT_INVALID_VALUE_WITH_REASON: 'Sorry, {{value}} is not a valid choice because {{reason}}.',
            VALUE_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_VALUE: 'Sorry, {{value}} is not a valid choice.',
            VALUE_CONTROL_DEFAULT_PROMPT_REQUEST_VALUE: 'What should i set it to?',
            VALUE_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_VALUE: 'What should I change it to?',
            VALUE_CONTROL_DEFAULT_PROMPT_CONFIRM_VALUE: 'Was that {{value}}?',
            VALUE_CONTROL_DEFAULT_PROMPT_VALUE_AFFIRMED: 'Great.',
            VALUE_CONTROL_DEFAULT_PROMPT_VALUE_DISAFFIRMED: 'My mistake.',
            VALUE_CONTROL_DEFAULT_REPROMPT_VALUE_SET: 'OK, {{value}}.',
            VALUE_CONTROL_DEFAULT_REPROMPT_VALUE_CHANGED: 'OK, I changed it to {{value}}.',
            VALUE_CONTROL_DEFAULT_REPROMPT_INVALID_VALUE_WITH_REASON: 'Sorry, {{value}} is not a valid choice because {{reason}}.',
            VALUE_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_VALUE: 'Sorry, {{value}} is not a valid choice.',
            VALUE_CONTROL_DEFAULT_REPROMPT_REQUEST_VALUE: 'What should i set it to?',
            VALUE_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_VALUE: 'What should I change it to?',
            VALUE_CONTROL_DEFAULT_REPROMPT_CONFIRM_VALUE: 'Was that {{value}}?',
            VALUE_CONTROL_DEFAULT_REPROMPT_VALUE_AFFIRMED: 'Great.',
            VALUE_CONTROL_DEFAULT_REPROMPT_VALUE_DISAFFIRMED: 'My mistake.',
            // ListControl Runtime
            LIST_CONTROL_DEFAULT_PROMPT_VALUE_SET: 'OK, {{value}}.',
            LIST_CONTROL_DEFAULT_PROMPT_VALUE_CHANGED: 'OK, I changed it to {{value}}.',
            LIST_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_VALUE: 'Sorry, {{value}} is not a valid choice.',
            LIST_CONTROL_DEFAULT_PROMPT_INVALID_VALUE_WITH_REASON: 'Sorry, {{value}} is not a valid choice because {{reason}}.',
            LIST_CONTROL_DEFAULT_PROMPT_UNUSABLE_INPUT_VALUE: 'Sorry, I\'m not sure how to do that.',
            LIST_CONTROL_DEFAULT_PROMPT_REQUEST_VALUE: 'What is your selection? Some suggestions are {{suggestions}}.',
            LIST_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_VALUE: 'What should I change it to? Some suggestions are {{suggestions}}.',
            LIST_CONTROL_DEFAULT_PROMPT_CONFIRM_VALUE: 'Was that {{value}}?',
            LIST_CONTROL_DEFAULT_PROMPT_VALUE_AFFIRMED: 'Great.',
            LIST_CONTROL_DEFAULT_PROMPT_VALUE_DISAFFIRMED: 'My mistake.',
            LIST_CONTROL_DEFAULT_REPROMPT_VALUE_SET: 'OK, {{value}}.',
            LIST_CONTROL_DEFAULT_REPROMPT_VALUE_CHANGED: 'OK, I changed it to {{value}}.',
            LIST_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_VALUE: 'Sorry, {{value}} is not a valid choice.',
            LIST_CONTROL_DEFAULT_REPROMPT_INVALID_VALUE_WITH_REASON: 'Sorry, {{value}} is not a valid choice because {{reason}}.',
            LIST_CONTROL_DEFAULT_REPROMPT_UNUSABLE_INPUT_VALUE: 'Sorry, I\'m not sure how to do that.',
            LIST_CONTROL_DEFAULT_REPROMPT_REQUEST_VALUE: 'What is your selection? Some suggestions are {{suggestions}}.',
            LIST_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_VALUE: 'What should I change it to? Some suggestions are {{suggestions}}.',
            LIST_CONTROL_DEFAULT_REPROMPT_CONFIRM_VALUE: 'Was that {{value}}?',
            LIST_CONTROL_DEFAULT_REPROMPT_VALUE_AFFIRMED: 'Great.',
            LIST_CONTROL_DEFAULT_REPROMPT_VALUE_DISAFFIRMED: 'My mistake.',
            LIST_CONTROL_DEFAULT_APL_HEADER_TITLE: 'Please select...',
            // ListControl BuildTime
            LIST_CONTROL_DEFAULT_SLOT_VALUES_TARGET_CHOICE: {
                id: Strings_1.Strings.Target.Choice,
                name: {
                    value: 'choice',
                    synonyms: [
                        'my choice',
                        "selection",
                        "my selection"
                    ]
                }
            },
            LIST_CONTROL_DEFAULT_SLOT_VALUES_ACTION_SELECT: {
                id: Strings_1.Strings.Action.Select,
                name: {
                    value: 'select',
                    synonyms: [
                        "select",
                        "choose",
                        "take",
                        "pick"
                    ]
                }
            },
            // DateRangeControl Runtime
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_START_DATE_SET: 'Got it. The start date is {{value}}.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_START_DATE_CHANGED: 'Got it. The start date is changed to {{value}}.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_START_DATE: 'What is the start date you want?',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_START_DATE: 'What should I change the start date to?',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_CONFIRM_START_DATE: 'Was that {{value}}?',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_START_DATE_AFFIRMED: 'Great.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_START_DATE_DISAFFIRMED: 'My mistake.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_END_DATE_SET: 'Got it. The end date is {{value}}.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_END_DATE_CHANGED: 'Got it. The end date is changed to {{value}}.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_END_DATE: 'What is the end date you want?',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_END_DATE: 'What should I change the end date to?',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_CONFIRM_END_DATE: 'Was that {{value}}?',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_END_DATE_AFFIRMED: 'Great.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_END_DATE_DISAFFIRMED: 'My mistake.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_VALUE: 'What is the start date and end date you want?',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_VALUE_SET: 'Got it. The start date is {{start}} and the end date is {{end}}.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_VALUE_CHANGED: 'Got it. The start date is changed to {{start}} and the end date is changed to {{end}}.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_INVALID_START_WITH_REASON: 'Sorry but that\'s not a valid start date because {{reason}}.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_INVALID_END_WITH_REASON: 'Sorry but that\'s not a valid end date because {{reason}}.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_INVALID_VALUE_WITH_REASON: 'Sorry, invalid range because {{reason}}.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_DATE: 'Sorry, invalid date.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_VALUE: 'Sorry, invalid range.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_VALIDATION_FAIL_START_AFTER_END: 'start date can not be greater than end date',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_VALUE_AFFIRMED: 'Great.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_VALUE_DISAFFIRMED: 'My mistake.',
            DATE_RANGE_CONTROL_DEFAULT_PROMPT_CONFIRM_VALUE: 'Was that {{value}}?',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_START_DATE_SET: 'Got it. The start date is {{value}}.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_START_DATE_CHANGED: 'Got it. The start date is changed to {{value}}.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_START_DATE: 'What is the start date you want?',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_START_DATE: 'What should I change the start date to?',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_CONFIRM_START_DATE: 'Was that {{value}}?',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_START_DATE_AFFIRMED: 'Great.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_START_DATE_DISAFFIRMED: 'My mistake.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_END_DATE_SET: 'Got it. The end date is {{value}}.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_END_DATE_CHANGED: 'Got it. The end date is changed to {{value}}.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_END_DATE: 'What is the end date you want?',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_END_DATE: 'What should I change the end date to?',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_CONFIRM_END_DATE: 'Was that {{value}}?',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_END_DATE_AFFIRMED: 'Great.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_END_DATE_DISAFFIRMED: 'My mistake.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_VALUE: 'What is the start date and end date you want?',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_VALUE_SET: 'Got it. The start date is {{start}} and the end date is {{end}}.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_VALUE_CHANGED: 'Got it. The start date is changed to {{start}} and the end date is changed to {{end}}.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_INVALID_START_WITH_REASON: 'Sorry but that\'s not a valid start date because {{reason}}.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_INVALID_END_WITH_REASON: 'Sorry but that\'s not a valid end date because {{reason}}.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_INVALID_VALUE_WITH_REASON: 'Sorry, invalid range because {{reason}}.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_DATE: 'Sorry, invalid date.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_VALUE: 'Sorry, invalid range.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_VALIDATION_FAIL_START_AFTER_END: 'start date can not be greater than end date',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_VALUE_AFFIRMED: 'Great.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_VALUE_DISAFFIRMED: 'My mistake.',
            DATE_RANGE_CONTROL_DEFAULT_REPROMPT_CONFIRM_VALUE: 'Was that {{value}}?',
            DATE_RANGE_CONTROL_DEFAULT_STATE_VALUE_FOR_START_AND_END: '{{start}} to {{end}}',
            // DateRangeControl BuildTime
            DATE_RANGE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_START_DATE: {
                id: Strings_1.Strings.Target.StartDate,
                name: {
                    value: 'startDate',
                    synonyms: [
                        'start date',
                        'the start date',
                        'starting date',
                        'the starting date',
                        'start',
                        'the start',
                    ]
                }
            },
            DATE_RANGE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_END_DATE: {
                id: Strings_1.Strings.Target.EndDate,
                name: {
                    value: 'endDate',
                    synonyms: [
                        'end date',
                        'the end date',
                        'ending date',
                        'the ending date',
                        'end',
                        'the end',
                    ]
                }
            },
            DATE_RANGE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_DATE_RANGE: {
                id: Strings_1.Strings.Target.DateRange,
                name: {
                    value: 'dateRange',
                    synonyms: [
                        'date range',
                        'the date range',
                        'dates',
                        'the dates',
                    ]
                }
            },
            // ControlIntent Samples
            /*
            * ConjunctionControlIntent is for controls that accept multiple values
            * It will likely be replaced when support for multi-value slots is added.
            */
            CONJUNCTION_CONTROL_INTENT_SAMPLES: [
                "{action} {target.a} {conjunction} {target.b}",
                "{feedback} {action} {target.a} {conjunction} {target.b}",
                "{head} {action} {target.a} {conjunction} {target.b}",
                "{action} {target.a} {conjunction} {target.b} {tail}",
                "{feedback} {action} {target.a} {conjunction} {target.b} {tail}",
                "{head} {action} {target.a} {conjunction} {target.b} {tail}",
            ],
            /*
            * Example values for AMAZON.DATE (see https://developer.amazon.com/en-US/docs/alexa/custom-skills/slot-type-reference.html#date)
            *  "tomorrow"
            *  "monday" | "next monday"
            *  "last monday"
            *  "may first"
            *  "next week"
            *  "next month"
            *  "next weekend"
            *  "last weekend"
            *  "christmas day"
            */
            DATE_CONTROL_INTENT_SAMPLES: [
                "{AMAZON.DATE}",
                "{action} {preposition} {AMAZON.DATE}",
                "{action} {target} {preposition} {AMAZON.DATE}",
                "{target} {preposition} {AMAZON.DATE}",
                "{feedback} {AMAZON.DATE}",
                "{feedback} {preposition} {AMAZON.DATE}",
                "{feedback} {action} {preposition} {AMAZON.DATE}",
                "{feedback} {action} {target} {preposition} {AMAZON.DATE}",
                "{feedback} {target} {preposition} {AMAZON.DATE}",
                "{head} {AMAZON.DATE}",
                "{head} {action} {preposition} {AMAZON.DATE}",
                "{head} {action} {target} {preposition} {AMAZON.DATE}",
                "{head} {target} {preposition} {AMAZON.DATE}",
                "{AMAZON.DATE} {tail}",
                "{preposition} {AMAZON.DATE} {tail}",
                "{action} {preposition} {AMAZON.DATE} {tail}",
                "{action} {target} {preposition} {AMAZON.DATE} {tail}",
                "{target} {preposition} {AMAZON.DATE} {tail}",
                "{feedback} {AMAZON.DATE} {tail}",
                "{feedback} {preposition} {AMAZON.DATE} {tail}",
                "{feedback} {action} {preposition} {AMAZON.DATE} {tail}",
                "{feedback} {action} {target} {preposition} {AMAZON.DATE} {tail}",
                "{feedback} {target} {preposition} {AMAZON.DATE} {tail}",
                "{head} {AMAZON.DATE} {tail}",
                "{head} {preposition} {AMAZON.DATE} {tail}",
                "{head} {action} {preposition} {AMAZON.DATE} {tail}",
                "{head} {target} {preposition} {AMAZON.DATE} {tail}",
                "{head} {action} {target} {preposition} {AMAZON.DATE} {tail}",
            ],
            // Note: every sample should have two dates.  For utterances with zero or one date use SimpleControlIntent or DateControlIntent.
            DATE_RANGE_CONTROL_INTENT_SAMPLES: [
                "{AMAZON.DATE.a} {conjunction} {AMAZON.DATE.b}",
                "{AMAZON.DATE.a} {preposition.b} {AMAZON.DATE.b}",
                "{preposition.a} {AMAZON.DATE.a} {preposition.b} {AMAZON.DATE.b}",
                "between {AMAZON.DATE.a} and {AMAZON.DATE.b}",
                "{action} {preposition.a} {AMAZON.DATE.a} {conjunction} {AMAZON.DATE.b}",
                "{action} {preposition.a} {AMAZON.DATE.a} {preposition.b} {AMAZON.DATE.b}",
                "{action} between {AMAZON.DATE.a} and {AMAZON.DATE.b}",
                "{action} {target} {preposition.a} {AMAZON.DATE.a} {preposition.b} {AMAZON.DATE.b}",
                "{action} {target} between {AMAZON.DATE.a} and {AMAZON.DATE.b}",
                "{action} {target.a} {preposition.a} {AMAZON.DATE.a} {conjunction} {target.b} {preposition.b} {AMAZON.DATE.b}",
                "{feedback} {AMAZON.DATE.a} {conjunction} {AMAZON.DATE.b}",
                "{feedback} {AMAZON.DATE.a} {preposition.b} {AMAZON.DATE.b}",
                "{feedback} {preposition.a} {AMAZON.DATE.a} {preposition.b} {AMAZON.DATE.b}",
                "{feedback} between {AMAZON.DATE.a} and {AMAZON.DATE.b}",
                "{head} {AMAZON.DATE.a} {conjunction} {AMAZON.DATE.b}",
                "{head} {AMAZON.DATE.a} {preposition.b} {AMAZON.DATE.b}",
                "{head} {preposition.a} {AMAZON.DATE.a} {preposition.b} {AMAZON.DATE.b}",
                "{head} between {AMAZON.DATE.a} and {AMAZON.DATE.b}",
                "{AMAZON.DATE.a} {conjunction} {AMAZON.DATE.b} {tail}",
                "{AMAZON.DATE.a} {preposition.b} {AMAZON.DATE.b} {tail}",
                "{preposition.a} {AMAZON.DATE.a} {preposition.b} {AMAZON.DATE.b} {tail}",
                "between {AMAZON.DATE.a} and {AMAZON.DATE.b} {tail}",
                "{head} {AMAZON.DATE.a} {conjunction} {AMAZON.DATE.b} {tail}",
                "{head} {AMAZON.DATE.a} {preposition.b} {AMAZON.DATE.b} {tail}",
                "{head} {preposition.a} {AMAZON.DATE.a} {preposition.b} {AMAZON.DATE.b} {tail}",
                "{head} between {AMAZON.DATE.a} and {AMAZON.DATE.b} {tail}",
            ],
            /*
             * For consideration:
             *   * trailing feedback, e.g.  "{action} {is correct}"  | "{it} {is correct}"
             *     Currently this type of trailing feedback is captured using {tail} and it is not used by control logic.
             *     A complication is that users might say "yes it is correct"
             *         - simple slot capture can't handle non-adjacent words
             *         - We don't really want to deal with two separate feedback slots and have to reconcile them.
             *         - So for now only the leading feedback is 'active' and we typically ignore the tail slot.
             */
            GENERAL_CONTROL_INTENT_SAMPLES: [
                // "{feedback}",                         // {Yes}  // For bare feedback utterances, use specific simple intents, eg AMAZON.YesIntent.
                "{feedback} {action}",
                "{feedback} {action} {target}",
                "{feedback} {tail}",
                "{feedback} {action} {tail}",
                "{feedback} {action} {target} {tail}",
                // "{action}",                           // For bare action utterances, use specific simple intents to be compatible with existing ecosystem.
                "{action} {target}",
                "{head} {action}",
                "{head} {action} {target}",
                "{action} {tail}",
                "{action} {target} {tail}",
                "{head} {action} {tail}",
                "{head} {action} {target} {tail}",
            ],
            NUMBER_CONTROL_INTENT_SAMPLES: [
                "{AMAZON.NUMBER}",
                "{action} {AMAZON.NUMBER}",
                "{action} {preposition} {AMAZON.NUMBER}",
                "{action} {target} {preposition} {AMAZON.NUMBER}",
                "{target} {preposition} {AMAZON.NUMBER}",
                "{feedback} {AMAZON.NUMBER}",
                "{feedback} {action} {AMAZON.NUMBER}",
                "{feedback} {preposition} {AMAZON.NUMBER}",
                "{feedback} {action} {preposition} {AMAZON.NUMBER}",
                "{feedback} {action} {target} {preposition} {AMAZON.NUMBER}",
                "{feedback} {target} {preposition} {AMAZON.NUMBER}",
                "{head} {AMAZON.NUMBER}",
                "{head} {action} {AMAZON.NUMBER}",
                "{head} {action} {preposition} {AMAZON.NUMBER}",
                "{head} {action} {target} {preposition} {AMAZON.NUMBER}",
                "{head} {target} {preposition} {AMAZON.NUMBER}",
                "{AMAZON.NUMBER} {tail}",
                "{preposition} {AMAZON.NUMBER} {tail}",
                "{action} {preposition} {AMAZON.NUMBER} {tail}",
                "{action} {target} {preposition} {AMAZON.NUMBER} {tail}",
                "{target} {preposition} {AMAZON.NUMBER} {tail}",
                "{feedback} {AMAZON.NUMBER} {tail}",
                "{feedback} {preposition} {AMAZON.NUMBER} {tail}",
                "{feedback} {action} {AMAZON.NUMBER} {tail}",
                "{feedback} {action} {preposition} {AMAZON.NUMBER} {tail}",
                "{feedback} {action} {target} {preposition} {AMAZON.NUMBER} {tail}",
                "{feedback} {target} {preposition} {AMAZON.NUMBER} {tail}",
                "{head} {AMAZON.NUMBER} {tail}",
                "{head} {preposition} {AMAZON.NUMBER} {tail}",
                "{head} {action} {AMAZON.NUMBER} {tail}",
                "{head} {action} {preposition} {AMAZON.NUMBER} {tail}",
                "{head} {target} {preposition} {AMAZON.NUMBER} {tail}",
                "{head} {action} {target} {preposition} {AMAZON.NUMBER} {tail}",
            ],
            ORDINAL_CONTROL_INTENT_SAMPLES: [
                "{AMAZON.Ordinal}",
                "{preposition} {AMAZON.Ordinal}",
                "{AMAZON.Ordinal} one",
                "{preposition} {AMAZON.Ordinal} one",
                "{action} {AMAZON.Ordinal}",
                "{action} {preposition} {AMAZON.Ordinal}",
                "{action} {preposition} {AMAZON.Ordinal} one",
                "{action} {target} {preposition} {AMAZON.Ordinal}",
                "{target} {preposition} {AMAZON.Ordinal}",
                "{feedback} {AMAZON.Ordinal}",
                "{feedback} {preposition} {AMAZON.Ordinal}",
                "{feedback} {AMAZON.Ordinal} one",
                "{feedback} {preposition} {AMAZON.Ordinal} one",
                "{feedback} {action} {AMAZON.Ordinal}",
                "{feedback} {action} {preposition} {AMAZON.Ordinal}",
                "{feedback} {action} {preposition} {AMAZON.Ordinal} one",
                "{feedback} {action} {target} {preposition} {AMAZON.Ordinal}",
                "{feedback} {target} {preposition} {AMAZON.Ordinal}",
                "{head} {preposition} {AMAZON.Ordinal}",
                "{head} {preposition} {AMAZON.Ordinal} one",
                "{head} {action} {preposition} {AMAZON.Ordinal}",
                "{head} {action} {target} {preposition} {AMAZON.Ordinal}",
                "{head} {target} {preposition} {AMAZON.Ordinal}",
                "{AMAZON.Ordinal} {tail}",
                "{preposition} {AMAZON.Ordinal} {tail}",
                "{AMAZON.Ordinal} one {tail}",
                "{preposition} {AMAZON.Ordinal} one {tail}",
                "{action} {AMAZON.Ordinal} {tail}",
                "{action} {target} {preposition} {AMAZON.Ordinal} {tail}",
                "{target} {preposition} {AMAZON.Ordinal} {tail}",
                "{feedback} {AMAZON.Ordinal} {tail}",
                "{feedback} {preposition} {AMAZON.Ordinal} {tail}",
                "{feedback} {AMAZON.Ordinal} one {tail}",
                "{feedback} {preposition} {AMAZON.Ordinal} one {tail}",
                "{feedback} {action} {AMAZON.Ordinal} {tail}",
                "{feedback} {action} {preposition} {AMAZON.Ordinal} {tail}",
                "{feedback} {action} {preposition} {AMAZON.Ordinal} one {tail}",
                "{feedback} {action} {target} {preposition} {AMAZON.Ordinal} {tail}",
                "{feedback} {target} {preposition} {AMAZON.Ordinal} {tail}",
                "{head} {AMAZON.Ordinal} {tail}",
                "{head} {preposition} {AMAZON.Ordinal} {tail}",
                "{head} {preposition} {AMAZON.Ordinal} one {tail}",
                "{head} {action} {preposition} {AMAZON.Ordinal} {tail}",
                "{head} {action} {preposition} {AMAZON.Ordinal} one {tail}",
                "{head} {target} {preposition} {AMAZON.Ordinal} {tail}",
                "{head} {action} {target} {preposition} {AMAZON.Ordinal} {tail}",
            ],
            SINGLE_VALUE_CONTROL_INTENT_SAMPLES: [
                "[[valueSlotType]]",
                "{action} [[valueSlotType]]",
                "{action} {preposition} [[valueSlotType]]",
                "{action} {target} {preposition} [[valueSlotType]]",
                "{target} {preposition} [[valueSlotType]]",
                "{feedback} [[valueSlotType]]",
                "{feedback} {action} [[valueSlotType]]",
                "{feedback} {preposition} [[valueSlotType]]",
                "{feedback} {action} {preposition} [[valueSlotType]]",
                "{feedback} {action} {target} {preposition} [[valueSlotType]]",
                "{feedback} {target} {preposition} [[valueSlotType]]",
                "{head} [[valueSlotType]]",
                "{head} {action} [[valueSlotType]]",
                "{head} {action} {preposition} [[valueSlotType]]",
                "{head} {action} {target} {preposition} [[valueSlotType]]",
                "{head} {target} {preposition} [[valueSlotType]]",
                "[[valueSlotType]] {tail}",
                "{preposition} [[valueSlotType]] {tail}",
                "{action} {preposition} [[valueSlotType]] {tail}",
                "{action} {target} {preposition} [[valueSlotType]] {tail}",
                "{target} {preposition} [[valueSlotType]] {tail}",
                "{feedback} [[valueSlotType]] {tail}",
                "{feedback} {preposition} [[valueSlotType]] {tail}",
                "{feedback} {action} [[valueSlotType]] {tail}",
                "{feedback} {action} {preposition} [[valueSlotType]] {tail}",
                "{feedback} {action} {target} {preposition} [[valueSlotType]] {tail}",
                "{feedback} {target} {preposition} [[valueSlotType]] {tail}",
                "{head} [[valueSlotType]] {tail}",
                "{head} {preposition} [[valueSlotType]] {tail}",
                "{head} {action} [[valueSlotType]] {tail}",
                "{head} {action} {preposition} [[valueSlotType]] {tail}",
                "{head} {target} {preposition} [[valueSlotType]] {tail}",
                "{head} {action} {target} {preposition} [[valueSlotType]] {tail}",
            ],
            // Shared Slot Type values
            SHARED_SLOT_TYPES_FEEDBACK: {
                name: ModelTypes_1.SharedSlotType.FEEDBACK,
                values: [
                    {
                        id: Strings_1.Strings.Feedback.Affirm,
                        name: {
                            value: 'affirm',
                            synonyms: [
                                "yes I do",
                                "okay",
                                "kay",
                                "k",
                                "yes",
                                "yup",
                                "yep",
                                "yes",
                                "ya",
                                "yes I want",
                                "yes I need",
                                "yes I said",
                                "yes that's right",
                                "that's correct",
                                "ah yes",
                                "affirmative",
                                "makes sense",
                                "right",
                                "sounds good",
                                "sure",
                                "that's right",
                                "totally",
                                "works for me",
                                "yeah",
                                "yeah ok",
                                "yes ok",
                                "yes that's good",
                                "yes sure",
                                "yes good",
                                "yes exactly",
                                "exactly",
                                "yes I do",
                                "absolutely",
                                "yes absolutely",
                                "fine",
                                "yes fine",
                            ]
                        }
                    },
                    {
                        id: Strings_1.Strings.Feedback.Disaffirm,
                        name: {
                            value: 'disaffirm',
                            synonyms: [
                                "no",
                                "no no",
                                "no no no",
                                "no no no no",
                                "no I want",
                                "no I said",
                                "no not that",
                                "not even close",
                                "nope",
                                "incorrect",
                                "you misunderstood",
                                "you have it wrong",
                                "that's wrong",
                                "thats wrong",
                                "wrong",
                                "absolutely not",
                                "I don't think so",
                                "naw",
                                "naw",
                                "negative",
                                "never",
                                "no alexa",
                                "no amazon",
                                "no incorrect",
                                "no that's wrong",
                                "no it's not",
                                "definitely not",
                                "no definitely not",
                                "not ever",
                                "oh no",
                                "ohh no",
                                "o no no",
                                "please no",
                                "that's not what I want",
                                "that was totally wrong",
                                "that is totally wrong",
                                "that is wrong",
                            ]
                        }
                    },
                ]
            },
            SHARED_SLOT_TYPES_HEAD: {
                name: ModelTypes_1.SharedSlotType.HEAD,
                values: [
                    {
                        id: Strings_1.Strings.Head,
                        name: {
                            value: 'head',
                            synonyms: [
                                "I",
                                "I'll",
                                "please",
                                "thanks",
                                "thank you",
                                "I will",
                                "I want",
                                "I choose",
                                "I want you to",
                                "I want you to just",
                                "I need",
                                "I need you to",
                                "I need you to just",
                                "I think",
                                "I think just",
                                "I think I want",
                                "I think I need",
                                "I think you can",
                                "I think you can just",
                                "I think that",
                                "I'm pretty sure",
                                "I'm pretty sure that",
                                "I am pretty sure",
                                "I am pretty sure that",
                                "I believe",
                                "I believe that",
                                "You can",
                                "You can just",
                                "You can just go ahead and",
                                "You should",
                                "You should just",
                                "Just",
                                "Go ahead and",
                                "Just go ahead",
                                "Just go ahead and",
                            ]
                        }
                    }
                ]
            },
            SHARED_SLOT_TYPES_TAIL: {
                name: ModelTypes_1.SharedSlotType.TAIL,
                values: [
                    {
                        id: Strings_1.Strings.Tail,
                        name: {
                            value: 'tail',
                            synonyms: [
                                "please",
                                "thanks",
                                "please thanks",
                                "will be fine",
                                "will be fine thanks",
                                "is good",
                                "is good thanks",
                                "will be good",
                                "will be good thanks",
                                "is plenty",
                                "is plenty thanks",
                                "will be plenty",
                                "will be plenty thanks",
                                "is great",
                                "is great thanks",
                                "will be great",
                                "will be great thanks",
                                "will work",
                                "will work thanks",
                                "is correct",
                                "is correct thanks",
                                "is right",
                                "is right thanks",
                                "at a time"
                            ]
                        }
                    }
                ]
            },
            SHARED_SLOT_TYPES_CONJUNCTION: {
                name: ModelTypes_1.SharedSlotType.CONJUNCTION,
                values: [
                    {
                        id: Strings_1.Strings.Conjunction,
                        name: {
                            value: 'conjunction',
                            synonyms: [
                                "and",
                                "and then",
                                "then",
                                "and also"
                            ]
                        }
                    }
                ]
            },
            SHARED_SLOT_TYPES_PREPOSITION: {
                name: ModelTypes_1.SharedSlotType.PREPOSITION,
                values: [
                    {
                        id: Strings_1.Strings.Preposition,
                        name: {
                            value: 'preposition',
                            synonyms: [
                                "the",
                                "to",
                                "to the",
                                "to be",
                                "to go",
                                "in",
                                "in to",
                                "into",
                                "is",
                                "equal to",
                                "to be equal to",
                                "also",
                                "to also be",
                                "to be also",
                                "from",
                                "until"
                            ]
                        }
                    }
                ]
            },
            SHARED_SLOT_TYPES_ACTION: {
                name: ModelTypes_1.SharedSlotType.ACTION,
                values: [
                    {
                        id: Strings_1.Strings.Action.Set,
                        name: {
                            value: 'set',
                            synonyms: [
                                "set",
                                "assign",
                                "make",
                                "will be",
                                "must be",
                                "must be set to",
                                "must be equal to",
                                "should be",
                                "should be",
                                "should be set to",
                                "should be equal to",
                                "needs to be",
                                "needs to be set to",
                            ]
                        }
                    },
                    {
                        id: Strings_1.Strings.Action.Change,
                        name: {
                            value: 'change',
                            synonyms: [
                                "update",
                                "move",
                                "alter",
                                "change",
                                "switch",
                                "should be",
                                "should be changed to",
                                "should be changed",
                                "should be updated to",
                                "should be updated",
                                "should be altered to",
                                "should be altered",
                                "needs to be changed to",
                                "needs to be changed",
                                "needs to be updated to",
                                "needs to be updated",
                                "needs to be altered to",
                                "needs to be altered"
                            ]
                        }
                    },
                ]
            },
            SHARED_SLOT_TYPES_TARGET: {
                name: ModelTypes_1.SharedSlotType.TARGET,
                values: [
                    {
                        id: Strings_1.Strings.Target.It,
                        name: {
                            value: 'it',
                            synonyms: [
                                'it',
                                "this",
                                "that"
                            ]
                        }
                    },
                ]
            },
        }
    }
};
//# sourceMappingURL=data:application/json;base64,