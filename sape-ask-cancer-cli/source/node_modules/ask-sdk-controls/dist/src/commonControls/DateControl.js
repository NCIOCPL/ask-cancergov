"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateControl = exports.DateControlState = exports.DateControlValidations = exports.DateValidationFailReasonCode = void 0;
const tslib_1 = require("tslib");
const i18next_1 = tslib_1.__importDefault(require("i18next"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const Strings_1 = require("../constants/Strings");
const Control_1 = require("../controls/Control");
const AmazonBuiltInSlotType_1 = require("../intents/AmazonBuiltInSlotType");
const GeneralControlIntent_1 = require("../intents/GeneralControlIntent");
const SingleValueControlIntent_1 = require("../intents/SingleValueControlIntent");
const ModelTypes_1 = require("../interactionModelGeneration/ModelTypes");
const Logger_1 = require("../logging/Logger");
const ContentActs_1 = require("../systemActs/ContentActs");
const InitiativeActs_1 = require("../systemActs/InitiativeActs");
const InputUtil_1 = require("../utils/InputUtil");
const Predicates_1 = require("../utils/Predicates");
const DateHelper_1 = require("./dateRangeControl/DateHelper");
const log = new Logger_1.Logger('AskSdkControls:DateControl');
/**
 * Reason codes for built-in validation rules.
 */
var DateValidationFailReasonCode;
(function (DateValidationFailReasonCode) {
    /**
     * The date must be in the past.
     */
    DateValidationFailReasonCode["PAST_DATE_ONLY"] = "pastDateOnly";
    /**
     * The date must be in the future.
     */
    DateValidationFailReasonCode["FUTURE_DATE_ONLY"] = "futureDateOnly";
})(DateValidationFailReasonCode = exports.DateValidationFailReasonCode || (exports.DateValidationFailReasonCode = {}));
/**
 * Built-in validation functions for use with DateControl
 */
var DateControlValidations;
(function (DateControlValidations) {
    /**
     * Validate that the date is in the past.
     * @param state - Control state
     * @param input - Input
     */
    DateControlValidations.PAST_DATE_ONLY = (state, input) => {
        const startDate = DateHelper_1.getStartDateOfRange(state.value);
        const startDateInUTC = DateHelper_1.getUTCDate(startDate);
        const now = new Date();
        if (startDateInUTC > now) {
            return {
                reasonCode: DateValidationFailReasonCode.PAST_DATE_ONLY,
                renderedReason: i18next_1.default.t('DATE_CONTROL_DEFAULT_PROMPT_VALIDATION_FAIL_PAST_DATE_ONLY')
            };
        }
        return true;
    };
    /**
     * Validate that the date is in the future.
     * @param state - Control state
     * @param input - Input
     */
    DateControlValidations.FUTURE_DATE_ONLY = (state, input) => {
        const endDate = DateHelper_1.getEndDateOfRange(state.value);
        const endDateInUTC = DateHelper_1.getUTCDate(endDate);
        const now = new Date();
        if (endDateInUTC < now) {
            return {
                reasonCode: DateValidationFailReasonCode.FUTURE_DATE_ONLY,
                renderedReason: i18next_1.default.t('DATE_CONTROL_DEFAULT_PROMPT_VALIDATION_FAIL_FUTURE_DATE_ONLY')
            };
        }
        return true;
    };
})(DateControlValidations = exports.DateControlValidations || (exports.DateControlValidations = {}));
/**
 * State tracked by a DateControl.
 */
class DateControlState {
    constructor() {
        /**
         * Tracks whether the value has been explicitly confirmed by the user.
         */
        this.isValueConfirmed = false;
    }
}
exports.DateControlState = DateControlState;
/**
 * A Control that obtains a single date from the user.
 *
 * Capabilities:
 * - Request a value
 * - Change a value
 * - Validate the value
 * - Confirm the value
 * - Infer the specific date for a partially specified date.
 *
 * Intents that can be handled:
 * - `GeneralControlIntent`: E.g. `"yes, update my birth date"`
 * - `AMAZON_DATE_ValueControlIntent`: E.g. "no change it to Tuesday".
 * - `AMAZON.YesIntent`, `AMAZON.NoIntent`
 */
class DateControl extends Control_1.Control {
    constructor(props) {
        super(props.id);
        this.state = new DateControlState();
        this.rawProps = props;
        this.props = DateControl.mergeWithDefaultProps(props);
    }
    static mergeWithDefaultProps(props) {
        const defaults = {
            id: 'dummy',
            prompts: {
                confirmValue: (act) => i18next_1.default.t('DATE_CONTROL_DEFAULT_PROMPT_CONFIRM_VALUE', { value: act.payload.value }),
                valueAffirmed: i18next_1.default.t('DATE_CONTROL_DEFAULT_PROMPT_VALUE_AFFIRMED'),
                valueDisaffirmed: i18next_1.default.t('DATE_CONTROL_DEFAULT_PROMPT_VALUE_DISAFFIRMED'),
                valueSet: i18next_1.default.t('DATE_CONTROL_DEFAULT_PROMPT_VALUE_SET'),
                valueChanged: (act) => i18next_1.default.t('DATE_CONTROL_DEFAULT_PROMPT_VALUE_CHANGED', { old: act.payload.previousValue, new: act.payload.value }),
                invalidValue: (act) => {
                    if (act.payload.renderedReason !== undefined) {
                        return i18next_1.default.t('DATE_CONTROL_DEFAULT_PROMPT_INVALID_VALUE_WITH_REASON', { reason: act.payload.renderedReason });
                    }
                    return i18next_1.default.t('DATE_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_VALUE');
                },
                requestValue: i18next_1.default.t('DATE_CONTROL_DEFAULT_PROMPT_REQUEST_VALUE'),
                requestChangedValue: i18next_1.default.t('DATE_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_VALUE'),
            },
            reprompts: {
                confirmValue: (act) => i18next_1.default.t('DATE_CONTROL_DEFAULT_REPROMPT_CONFIRM_VALUE', { value: act.payload.value }),
                valueAffirmed: i18next_1.default.t('DATE_CONTROL_DEFAULT_REPROMPT_VALUE_AFFIRMED'),
                valueDisaffirmed: i18next_1.default.t('DATE_CONTROL_DEFAULT_REPROMPT_VALUE_DISAFFIRMED'),
                valueSet: i18next_1.default.t('DATE_CONTROL_DEFAULT_REPROMPT_VALUE_SET'),
                valueChanged: (act) => i18next_1.default.t('DATE_CONTROL_DEFAULT_REPROMPT_VALUE_CHANGED', { old: act.payload.previousValue, new: act.payload.value }),
                invalidValue: (act) => {
                    if (act.payload.renderedReason !== undefined) {
                        return i18next_1.default.t('DATE_CONTROL_DEFAULT_REPROMPT_INVALID_VALUE_WITH_REASON', { reason: act.payload.renderedReason });
                    }
                    return i18next_1.default.t('DATE_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_VALUE');
                },
                requestValue: i18next_1.default.t('DATE_CONTROL_DEFAULT_REPROMPT_REQUEST_VALUE'),
                requestChangedValue: i18next_1.default.t('DATE_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_VALUE'),
            },
            interactionModel: {
                actions: {
                    set: [Strings_1.Strings.Action.Set],
                    change: [Strings_1.Strings.Action.Change],
                },
                targets: [Strings_1.Strings.Target.Date, Strings_1.Strings.Target.It]
            },
            validation: [],
            confirmationRequired: false,
            required: true
        };
        return lodash_1.default.merge(defaults, props);
    }
    // tsDoc - see Control
    canHandle(input) {
        return this.isSetWithValue(input)
            || this.isSetWithoutValue(input)
            || this.isChangeWithValue(input)
            || this.isChangeWithoutValue(input)
            || this.isBareValue(input)
            || this.isConfirmationAffirmed(input)
            || this.isConfirmationDisaffirmed(input);
    }
    isSetWithValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isSingleValueControlIntent(input, AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.DATE));
            const { feedback, action, target, valueStr } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatch(action, this.props.interactionModel.actions.set));
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueStrDefined(valueStr));
            this.handleFunc = this.handleSetWithValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleSetWithValue(input, resultBuilder) {
        const { valueStr } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
        this.setValue(valueStr);
        this.validateAndAddActs(input, resultBuilder, Strings_1.Strings.Action.Set);
        return;
    }
    isSetWithoutValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, GeneralControlIntent_1.GeneralControlIntent.name));
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatch(action, this.props.interactionModel.actions.set));
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            this.handleFunc = this.handleSetWithoutValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleSetWithoutValue(input, resultBuilder) {
        this.askElicitationQuestion(input, resultBuilder, Strings_1.Strings.Action.Set);
        return;
    }
    /**
     * Test if the input is a valid change-action with a value provided.
     *
     * @param input - Input
     */
    isChangeWithValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isSingleValueControlIntent(input, AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.DATE));
            const { feedback, action, target, valueStr } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatch(action, this.props.interactionModel.actions.change));
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueStrDefined(valueStr));
            this.handleFunc = this.handleChangeWithValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleChangeWithValue(input, resultBuilder) {
        const { valueStr } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
        this.setValue(valueStr);
        this.validateAndAddActs(input, resultBuilder, Strings_1.Strings.Action.Change);
        return;
    }
    /**
     * Test if the input is a valid change-action without a value provided.
     *
     * @param input - Input
     */
    isChangeWithoutValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, GeneralControlIntent_1.GeneralControlIntent.name));
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatch(action, this.props.interactionModel.actions.change));
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            this.handleFunc = this.handleChangeWithoutValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleChangeWithoutValue(input, resultBuilder) {
        this.askElicitationQuestion(input, resultBuilder, Strings_1.Strings.Action.Change);
        return;
    }
    /**
     * Test if the input is a DateControlIntent with just a date provided.
     * If we aren't asking a question it is assumed the user meant 'set value'.
     * @param input - Input
     */
    isBareValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isSingleValueControlIntent(input, AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.DATE));
            const { feedback, action, target, valueStr } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsUndefined(feedback));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsUndefined(action));
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueStrDefined(valueStr));
            this.handleFunc = this.handleBareValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleBareValue(input, resultBuilder) {
        var _a;
        const { valueStr } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
        this.setValue(valueStr);
        this.validateAndAddActs(input, resultBuilder, (_a = this.state.elicitationAction) !== null && _a !== void 0 ? _a : Strings_1.Strings.Action.Set);
        return;
    }
    isConfirmationAffirmed(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isBareYes(input));
            Predicates_1.okIf(this.state.activeInitiativeAct === 'ConfirmValueAct');
            this.handleFunc = this.handleConfirmationAffirmed;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleConfirmationAffirmed(input, resultBuilder) {
        this.state.activeInitiativeAct = undefined;
        this.state.isValueConfirmed = true;
        resultBuilder.addAct(new ContentActs_1.ValueConfirmedAct(this, { value: this.state.value }));
    }
    isConfirmationDisaffirmed(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isBareNo(input));
            Predicates_1.okIf(this.state.activeInitiativeAct === 'ConfirmValueAct');
            this.handleFunc = this.handleConfirmationDisaffirmed;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleConfirmationDisaffirmed(input, resultBuilder) {
        this.state.isValueConfirmed = false;
        this.state.activeInitiativeAct = undefined;
        resultBuilder.addAct(new ContentActs_1.ValueDisconfirmedAct(this, { value: this.state.value }));
        resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
    }
    // tsDoc - see Control
    async handle(input, resultBuilder) {
        log.debug(`DateControl[${this.id}]: handle(). Entering`);
        if (this.handleFunc === undefined) {
            const intent = input.request.intent;
            throw new Error(`${intent.name} can not be handled by ${this.constructor.name}.`);
        }
        this.handleFunc(input, resultBuilder);
        if (resultBuilder.hasInitiativeAct() !== true && this.canTakeInitiative(input) === true) {
            this.takeInitiative(input, resultBuilder);
        }
    }
    // tsDoc - see Control
    canTakeInitiative(input) {
        return this.wantsToConfirmValue(input)
            || this.wantsToFixInvalidValue(input)
            || this.wantsToElicitValue(input);
    }
    // tsDoc - see Control
    takeInitiative(input, resultBuilder) {
        if (this.initiativeFunc === undefined) {
            const errorMsg = 'DateControl: takeInitiative called but this.initiativeFunc is not set. canTakeInitiative() should be called first to set this.initiativeFunc.';
            log.error(errorMsg);
            throw new Error(errorMsg);
        }
        this.initiativeFunc(input, resultBuilder);
        return;
    }
    wantsToElicitValue(input) {
        if (this.state.value === undefined && this.evaluateBooleanProp(this.props.required, input)) {
            this.initiativeFunc = this.elicitValue;
            return true;
        }
        return false;
    }
    elicitValue(input, resultBuilder) {
        this.askElicitationQuestion(input, resultBuilder, Strings_1.Strings.Action.Set);
    }
    // public-for-testing
    askElicitationQuestion(input, resultBuilder, elicitationAction) {
        this.state.elicitationAction = elicitationAction;
        switch (elicitationAction) {
            case Strings_1.Strings.Action.Set:
                resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
                return;
            case Strings_1.Strings.Action.Change:
                resultBuilder.addAct(new InitiativeActs_1.RequestChangedValueAct(this, { currentValue: this.state.value }));
                return;
            default:
                throw new Error(`Unhandled. Unknown elicitationAction: ${elicitationAction}`);
        }
    }
    validateAndAddActs(input, resultBuilder, elicitationAction) {
        this.state.elicitationAction = elicitationAction;
        const validationResult = this.validate(input);
        if (validationResult === true) {
            if (elicitationAction === Strings_1.Strings.Action.Change) {
                // if elicitationAction == 'change', then the previousValue must be defined.
                if (this.state.previousValue !== undefined) {
                    resultBuilder.addAct(new ContentActs_1.ValueChangedAct(this, { previousValue: this.state.previousValue, value: this.state.value }));
                }
                else {
                    throw new Error('ValueChangedAct should only be used if there is an actual previous value');
                }
            }
            else {
                resultBuilder.addAct(new ContentActs_1.ValueSetAct(this, { value: this.state.value }));
            }
        }
        else {
            // feedback
            resultBuilder.addAct(new ContentActs_1.InvalidValueAct(this, {
                value: this.state.value,
                reasonCode: validationResult.reasonCode,
                renderedReason: validationResult.renderedReason
            }));
            this.askElicitationQuestion(input, resultBuilder, elicitationAction);
        }
        return;
    }
    wantsToConfirmValue(input) {
        if (this.state.value !== undefined && this.state.isValueConfirmed === false && this.evaluateBooleanProp(this.props.confirmationRequired, input)) {
            this.initiativeFunc = this.confirmValue;
            return true;
        }
        return false;
    }
    confirmValue(input, resultBuilder) {
        this.state.activeInitiativeAct = 'ConfirmValueAct';
        resultBuilder.addAct(new InitiativeActs_1.ConfirmValueAct(this, { value: this.state.value }));
    }
    wantsToFixInvalidValue(input) {
        if (this.state.value !== undefined && this.validate(input) !== true) {
            this.initiativeFunc = this.fixInvalidValue;
            return true;
        }
        return false;
    }
    fixInvalidValue(input, resultBuilder) {
        this.validateAndAddActs(input, resultBuilder, Strings_1.Strings.Action.Change);
    }
    validate(input) {
        const listOfValidationFunc = typeof (this.props.validation) === 'function' ? [this.props.validation] : this.props.validation;
        for (const validationFunction of listOfValidationFunc) {
            const validationResult = validationFunction(this.state, input);
            if (validationResult !== true) {
                log.debug(`DateControl.validate(): validation failed. Reason: ${JSON.stringify(validationResult, null, 2)}.`);
                return validationResult;
            }
        }
        return true;
    }
    /**
     * Directly set the value.
     *
     * @param value - Value, an ISO Date string
     */
    setValue(value) {
        this.state.previousValue = this.state.value;
        this.state.value = value;
        this.state.isValueConfirmed = false;
    }
    /**
     * Clear the state of this control.
     */
    clear() {
        this.state = new DateControlState();
    }
    // tsDoc - see Control
    renderAct(act, input, builder) {
        if (act instanceof InitiativeActs_1.RequestValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.requestValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.requestValue, input));
            const slotElicitation = generateSlotElicitation();
            builder.addElicitSlotDirective(slotElicitation.slotName, slotElicitation.intent);
        }
        else if (act instanceof ContentActs_1.ValueSetAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueSet, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueSet, input));
        }
        else if (act instanceof ContentActs_1.ValueChangedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueChanged, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueChanged, input));
        }
        else if (act instanceof ContentActs_1.InvalidValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.invalidValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.invalidValue, input));
        }
        else if (act instanceof InitiativeActs_1.RequestChangedValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.requestChangedValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.requestChangedValue, input));
        }
        else if (act instanceof InitiativeActs_1.ConfirmValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.confirmValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.confirmValue, input));
        }
        else if (act instanceof ContentActs_1.ValueConfirmedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueAffirmed, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueAffirmed, input));
        }
        else if (act instanceof ContentActs_1.ValueDisconfirmedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueDisaffirmed, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueDisaffirmed, input));
        }
        else {
            this.throwUnhandledActError(act);
        }
    }
    // tsDoc - see Control
    updateInteractionModel(generator, imData) {
        generator.addControlIntent(new GeneralControlIntent_1.GeneralControlIntent(), imData);
        generator.addControlIntent(new SingleValueControlIntent_1.SingleValueControlIntent(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.DATE), imData);
        generator.addYesAndNoIntents();
        if (this.props.interactionModel.targets.includes('date')) {
            generator.addValuesToSlotType(ModelTypes_1.SharedSlotType.TARGET, i18next_1.default.t('DATE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_DATE', { returnObjects: true }));
        }
    }
    // tsDoc - see InteractionModelContributor
    getTargetIds() {
        return this.props.interactionModel.targets;
    }
}
exports.DateControl = DateControl;
/**
 * Creates an elicit-slot directive.
 *
 * - The intent specified is a `AMAZON_DATE_ValueControlIntent`
 * - The slot specified is the `AMAZON.DATE` slot.
 *
 * @param slotType - Slot type
 */
function generateSlotElicitation() {
    const intent = {
        name: SingleValueControlIntent_1.SingleValueControlIntent.intentName(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.DATE),
        slots: {
            "feedback": { name: "feedback", value: '', confirmationStatus: 'NONE' },
            "action": { name: "action", value: '', confirmationStatus: 'NONE' },
            "target": { name: "target", value: '', confirmationStatus: 'NONE' },
            "AMAZON.DATE": { name: "AMAZON.DATE", value: '', confirmationStatus: 'NONE' },
            "head": { name: "head", value: '', confirmationStatus: 'NONE' },
            "tail": { name: "tail", value: '', confirmationStatus: 'NONE' },
            "preposition": { name: "preposition", value: '', confirmationStatus: 'NONE' }
        },
        confirmationStatus: "NONE"
    };
    return {
        intent,
        slotName: AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.DATE
    };
}
//# sourceMappingURL=data:application/json;base64,