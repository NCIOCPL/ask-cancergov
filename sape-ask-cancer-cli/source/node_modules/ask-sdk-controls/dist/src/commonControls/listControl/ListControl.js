"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListControl = exports.ListControlState = exports.ListControlAPLProps = exports.ListControlPromptProps = exports.ListControlInteractionModelProps = void 0;
const tslib_1 = require("tslib");
const ask_sdk_core_1 = require("ask-sdk-core");
const i18next_1 = tslib_1.__importDefault(require("i18next"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const Strings_1 = require("../../constants/Strings");
const Control_1 = require("../../controls/Control");
const AmazonBuiltInSlotType_1 = require("../../intents/AmazonBuiltInSlotType");
const GeneralControlIntent_1 = require("../../intents/GeneralControlIntent");
const OrdinalControlIntent_1 = require("../../intents/OrdinalControlIntent");
const SingleValueControlIntent_1 = require("../../intents/SingleValueControlIntent");
const ModelTypes_1 = require("../../interactionModelGeneration/ModelTypes");
const ListFormat_1 = require("../../intl/ListFormat");
const Logger_1 = require("../../logging/Logger");
const ContentActs_1 = require("../../systemActs/ContentActs");
const InitiativeActs_1 = require("../../systemActs/InitiativeActs");
const InputUtil_1 = require("../../utils/InputUtil");
const Predicates_1 = require("../../utils/Predicates");
const APL_1 = require("./APL");
// TODO: feature: support "what are my choices"
// TODO: feature: voice pagination of choices.
const log = new Logger_1.Logger('AskSdkControls:ListControl');
/**
 * Props associated with the interaction model.
 */
class ListControlInteractionModelProps {
}
exports.ListControlInteractionModelProps = ListControlInteractionModelProps;
/**
 * Props to customize the prompt fragments that will be added by
 * `this.renderAct()`.
 */
class ListControlPromptProps {
}
exports.ListControlPromptProps = ListControlPromptProps;
/**
 * Props associated with the APL produced by ListControl.
 */
class ListControlAPLProps {
}
exports.ListControlAPLProps = ListControlAPLProps;
/**
 * State tracked by a ListControl.
 */
class ListControlState {
    constructor() {
        /**
         * Tracks whether the value has been explicitly confirmed by the user.
         */
        this.isValueConfirmed = false;
    }
}
exports.ListControlState = ListControlState;
/**
 * A Control that obtains a single value from the user by presenting a list of
 * available options using voice and/or APL.
 *
 * The type of value to obtain is defined by `this.slotType`.
 *
 * Capabilities:
 * - Request a value
 * - Change a value
 * - Validate the value
 * - Confirm the value
 * - Speak the first few options
 * - Show all the options on APL enabled devices
 * - Selection of a value using a spoken ordinal, e.g. "The first one".
 * - Selection of a value using touch screen.
 *
 * Intents that can be handled:
 * - `GeneralControlIntent`: E.g. `"yes, update my name"`
 * - `{ValueType}_ValueControlIntent`: E.g. "no change it to Elvis".
 * - `AMAZON_ORDINAL_ValueControlIntent`: E.g. "no change it to Elvis".
 * - `AMAZON.YesIntent`, `AMAZON.NoIntent`
 *
 * APL events that can be handled:
 *  - touch events indicating selection of an item on screen.
 *
 * Limitations:
 * - This control is not compatible with the `AMAZON.SearchQuery` slot type.
 */
class ListControl extends Control_1.Control {
    constructor(props) {
        super(props.id);
        this.state = new ListControlState();
        if (props.slotType === AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.SEARCH_QUERY) {
            throw new Error('AMAZON.SearchQuery cannot be used with ListControl due to the special rules regarding its use. '
                + 'Specifically, utterances that include SearchQuery must have a carrier phrase and not be comprised entirely of slot references. '
                + 'Use a custom intent to manage SearchQuery slots or create a regular slot for use with ListControl.');
        }
        this.rawProps = props;
        this.props = ListControl.mergeWithDefaultProps(props);
    }
    static mergeWithDefaultProps(props) {
        const defaults = {
            id: 'dummy',
            slotType: 'dummy',
            required: true,
            validation: [],
            pageSize: 3,
            listItemIDs: [],
            confirmationRequired: false,
            interactionModel: {
                actions: {
                    set: [Strings_1.Strings.Action.Set, Strings_1.Strings.Action.Select],
                    change: [Strings_1.Strings.Action.Change],
                },
                targets: [Strings_1.Strings.Target.Choice, Strings_1.Strings.Target.It]
            },
            prompts: {
                confirmValue: (act) => i18next_1.default.t('LIST_CONTROL_DEFAULT_PROMPT_CONFIRM_VALUE', { value: act.payload.value }),
                valueConfirmed: i18next_1.default.t('LIST_CONTROL_DEFAULT_PROMPT_VALUE_AFFIRMED'),
                valueDisconfirmed: i18next_1.default.t('LIST_CONTROL_DEFAULT_PROMPT_VALUE_DISAFFIRMED'),
                valueSet: (act) => i18next_1.default.t('LIST_CONTROL_DEFAULT_PROMPT_VALUE_SET', { value: act.payload.value }),
                valueChanged: (act) => i18next_1.default.t('LIST_CONTROL_DEFAULT_PROMPT_VALUE_CHANGED', { value: act.payload.value }),
                invalidValue: (act) => {
                    if (act.payload.renderedReason !== undefined) {
                        return i18next_1.default.t('LIST_CONTROL_DEFAULT_PROMPT_INVALID_VALUE_WITH_REASON', { value: act.payload.value, reason: act.payload.renderedReason });
                    }
                    return i18next_1.default.t('LIST_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_VALUE');
                },
                unusableInputValue: (act) => i18next_1.default.t('LIST_CONTROL_DEFAULT_PROMPT_UNUSABLE_INPUT_VALUE'),
                requestValue: (act) => i18next_1.default.t('LIST_CONTROL_DEFAULT_PROMPT_REQUEST_VALUE', { suggestions: ListFormat_1.ListFormatting.format(act.payload.choicesFromActivePage) }),
                requestChangedValue: (act) => i18next_1.default.t('LIST_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_VALUE', { suggestions: ListFormat_1.ListFormatting.format(act.payload.choicesFromActivePage) }),
            },
            reprompts: {
                confirmValue: (act) => i18next_1.default.t('LIST_CONTROL_DEFAULT_REPROMPT_CONFIRM_VALUE', { value: act.payload.value }),
                valueConfirmed: i18next_1.default.t('LIST_CONTROL_DEFAULT_REPROMPT_VALUE_AFFIRMED'),
                valueDisconfirmed: i18next_1.default.t('LIST_CONTROL_DEFAULT_REPROMPT_VALUE_DISAFFIRMED'),
                valueSet: (act) => i18next_1.default.t('LIST_CONTROL_DEFAULT_REPROMPT_VALUE_SET', { value: act.payload.value }),
                valueChanged: (act) => i18next_1.default.t('LIST_CONTROL_DEFAULT_REPROMPT_VALUE_CHANGED', { value: act.payload.value }),
                invalidValue: (act) => {
                    if (act.payload.renderedReason !== undefined) {
                        return i18next_1.default.t('LIST_CONTROL_DEFAULT_REPROMPT_INVALID_VALUE_WITH_REASON', { value: act.payload.value, reason: act.payload.renderedReason });
                    }
                    return i18next_1.default.t('LIST_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_VALUE');
                },
                unusableInputValue: (act) => i18next_1.default.t('LIST_CONTROL_DEFAULT_REPROMPT_UNUSABLE_INPUT_VALUE'),
                requestValue: (act) => i18next_1.default.t('LIST_CONTROL_DEFAULT_REPROMPT_REQUEST_VALUE', { suggestions: ListFormat_1.ListFormatting.format(act.payload.choicesFromActivePage) }),
                requestChangedValue: (act) => i18next_1.default.t('LIST_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_VALUE', { suggestions: ListFormat_1.ListFormatting.format(act.payload.choicesFromActivePage) }),
            },
            apl: {
                enabled: true,
                requestAPLDocument: APL_1.generateTextListDocumentForListControl()
            }
        };
        return lodash_1.default.merge(defaults, props);
    }
    // tsDoc - see Control
    canHandle(input) {
        return this.isSetWithValue(input)
            || this.isChangeWithValue(input)
            || this.isSetWithoutValue(input)
            || this.isChangeWithoutValue(input)
            || this.isBareValue(input)
            || this.isConfirmationAffirmed(input)
            || this.isConfirmationDisAffirmed(input)
            || this.isOrdinalScreenEvent(input)
            || this.isOrdinalSelection(input);
    }
    // tsDoc - see Control
    async handle(input, resultBuilder) {
        if (this.handleFunc === undefined) {
            log.error('ListControl: handle called but no clause matched.  are canHandle/handle out of sync?');
            const intent = input.request.intent;
            throw new Error(`${intent.name} can not be handled by ${this.constructor.name}.`);
        }
        this.handleFunc(input, resultBuilder);
        if (resultBuilder.hasInitiativeAct() !== true && this.canTakeInitiative(input) === true) {
            await this.takeInitiative(input, resultBuilder);
        }
    }
    isSetWithValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, SingleValueControlIntent_1.SingleValueControlIntent.intentName(this.props.slotType)));
            const { feedback, action, target, valueStr, valueType } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueTypeMatch(valueType, this.props.slotType));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueStrDefined(valueStr));
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatch(action, this.props.interactionModel.actions.set));
            this.handleFunc = this.handleSetWithValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleSetWithValue(input, resultBuilder) {
        const { valueStr, erMatch } = InputUtil_1.InputUtil.getValueResolution(input);
        this.setValue(valueStr, erMatch);
        this.validateAndAddActs(input, resultBuilder, Strings_1.Strings.Action.Set);
        return;
    }
    isSetWithoutValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, GeneralControlIntent_1.GeneralControlIntent.name));
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatch(action, this.props.interactionModel.actions.set));
            this.handleFunc = this.handleSetWithoutValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleSetWithoutValue(input, resultBuilder) {
        this.askElicitationQuestion(input, resultBuilder, Strings_1.Strings.Action.Set);
        return;
    }
    isChangeWithValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, SingleValueControlIntent_1.SingleValueControlIntent.intentName(this.props.slotType)));
            const { feedback, action, target, valueStr, valueType } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueTypeMatch(valueType, this.props.slotType));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueStrDefined(valueStr));
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatch(action, this.props.interactionModel.actions.change));
            this.handleFunc = this.handleChangeWithValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleChangeWithValue(input, resultBuilder) {
        const { valueStr, erMatch } = InputUtil_1.InputUtil.getValueResolution(input);
        this.setValue(valueStr, erMatch);
        this.validateAndAddActs(input, resultBuilder, Strings_1.Strings.Action.Change);
        return;
    }
    isChangeWithoutValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, GeneralControlIntent_1.GeneralControlIntent.name));
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatch(action, this.props.interactionModel.actions.change));
            this.handleFunc = this.handleChangeWithoutValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleChangeWithoutValue(input, resultBuilder) {
        this.askElicitationQuestion(input, resultBuilder, Strings_1.Strings.Action.Change);
        return;
    }
    isBareValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, SingleValueControlIntent_1.SingleValueControlIntent.intentName(this.props.slotType)));
            const { feedback, action, target, valueStr, valueType } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsUndefined(feedback));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsUndefined(action));
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueStrDefined(valueStr));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueTypeMatch(valueType, this.props.slotType));
            this.handleFunc = this.handleBareValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleBareValue(input, resultBuilder) {
        var _a;
        const { valueStr, erMatch } = InputUtil_1.InputUtil.getValueResolution(input);
        this.setValue(valueStr, erMatch);
        this.validateAndAddActs(input, resultBuilder, (_a = this.state.elicitationAction) !== null && _a !== void 0 ? _a : Strings_1.Strings.Action.Set);
        return;
    }
    isConfirmationAffirmed(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isBareYes(input));
            Predicates_1.okIf(this.state.activeInitiativeAct === 'ConfirmValueAct');
            this.handleFunc = this.handleConfirmationAffirmed;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleConfirmationAffirmed(input, resultBuilder) {
        this.state.activeInitiativeAct = undefined;
        this.state.isValueConfirmed = true;
        resultBuilder.addAct(new ContentActs_1.ValueConfirmedAct(this, { value: this.state.value }));
    }
    isConfirmationDisAffirmed(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isBareNo(input));
            Predicates_1.okIf(this.state.activeInitiativeAct === 'ConfirmValueAct');
            this.handleFunc = this.handleConfirmationDisAffirmed;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleConfirmationDisAffirmed(input, resultBuilder) {
        this.state.isValueConfirmed = false;
        this.state.activeInitiativeAct = undefined;
        resultBuilder.addAct(new ContentActs_1.ValueDisconfirmedAct(this, { value: this.state.value }));
        const allChoices = this.getChoicesList(input);
        if (allChoices === null) {
            throw new Error('ListControl.listItemIDs is null');
        }
        const choicesFromActivePage = this.getChoicesFromActivePage(allChoices);
        resultBuilder.addAct(new InitiativeActs_1.RequestValueByListAct(this, { choicesFromActivePage, allChoices }));
    }
    isOrdinalScreenEvent(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isAPLUserEventWithMatchingControlId(input, this.id));
            this.handleFunc = this.handleOrdinalScreenEvent;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleOrdinalScreenEvent(input, resultBuilder) {
        const onScreenChoices = this.getChoicesList(input);
        if (onScreenChoices === null) {
            throw new Predicates_1.StateConsistencyError('OrdinalScreenEvent received but no known list values.');
        }
        const ordinal = input.request.arguments[1];
        if (ordinal < 0 || ordinal > onScreenChoices.length) {
            throw new Predicates_1.StateConsistencyError(`APL Ordinal out of range. ordinal=${ordinal} valueList=${onScreenChoices}`);
        }
        const value = onScreenChoices[ordinal - 1];
        this.setValue(value, true);
        // feedback
        resultBuilder.addAct(new ContentActs_1.ValueSetAct(this, { value }));
        return;
    }
    isOrdinalSelection(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, OrdinalControlIntent_1.OrdinalControlIntent.name));
            const { feedback, action, target, 'AMAZON.Ordinal': value } = OrdinalControlIntent_1.unpackOrdinalControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatchOrUndefined(action, this.props.interactionModel.actions.set));
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueStrDefined(value));
            this.handleFunc = this.handleOrdinalSelection;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleOrdinalSelection(input, resultBuilder) {
        const allChoices = this.getChoicesList(input);
        const spokenChoices = this.getChoicesFromActivePage(allChoices);
        const { 'AMAZON.Ordinal': valueStr } = OrdinalControlIntent_1.unpackOrdinalControlIntent(input.request.intent);
        const value = valueStr !== undefined ? Number.parseInt(valueStr, 10) : undefined;
        if (value !== undefined && value <= spokenChoices.length) {
            this.setValue(spokenChoices[value - 1], true);
            resultBuilder.addAct(new ContentActs_1.ValueSetAct(this, { value: this.state.value }));
            return;
        }
        resultBuilder.addAct(new ContentActs_1.UnusableInputValueAct(this, { value, reasonCode: 'OrdinalOutOfRange', renderedReason: 'I don\'t know which you mean.' }));
        return;
    }
    /**
     * Directly set the value.
     *
     * @param value - Value
     * @param erMatch - Whether the value is an ID defined for `this.slotType`
     * in the interaction model
     */
    setValue(value, erMatch = true) {
        this.state.previousValue = this.state.value;
        this.state.value = value;
        this.state.erMatch = erMatch;
        this.state.isValueConfirmed = false;
    }
    /**
     * Clear the state of this control.
     */
    clear() {
        this.state = new ListControlState();
    }
    // tsDoc - see Control
    canTakeInitiative(input) {
        return this.wantsToConfirmValue(input)
            || this.wantsToFixInvalidValue(input)
            || this.wantsToElicitValue(input);
    }
    // tsDoc - see Control
    async takeInitiative(input, resultBuilder) {
        if (this.initiativeFunc === undefined) {
            const errorMsg = 'ListControl: takeInitiative called but this.initiativeFunc is not set. canTakeInitiative() should be called first to set this.initiativeFunc.';
            log.error(errorMsg);
            throw new Error(errorMsg);
        }
        this.initiativeFunc(input, resultBuilder);
        return;
    }
    wantsToConfirmValue(input) {
        if (this.state.value !== undefined && this.state.isValueConfirmed === false && this.evaluateBooleanProp(this.props.confirmationRequired, input)) {
            this.initiativeFunc = this.confirmValue;
            return true;
        }
        return false;
    }
    confirmValue(input, resultBuilder) {
        this.state.activeInitiativeAct = 'ConfirmValueAct';
        resultBuilder.addAct(new InitiativeActs_1.ConfirmValueAct(this, { value: this.state.value }));
    }
    wantsToFixInvalidValue(input) {
        if (this.state.value !== undefined && this.validate(input) !== true) {
            this.initiativeFunc = this.fixInvalidValue;
            return true;
        }
        return false;
    }
    fixInvalidValue(input, resultBuilder) {
        this.validateAndAddActs(input, resultBuilder, Strings_1.Strings.Action.Change);
    }
    wantsToElicitValue(input) {
        if (this.state.value === undefined && this.evaluateBooleanProp(this.props.required, input)) {
            this.initiativeFunc = this.elicitValue;
            return true;
        }
        return false;
    }
    elicitValue(input, resultBuilder) {
        this.askElicitationQuestion(input, resultBuilder, Strings_1.Strings.Action.Set);
    }
    validateAndAddActs(input, resultBuilder, elicitationAction) {
        this.state.elicitationAction = elicitationAction;
        const validationResult = this.validate(input);
        if (validationResult === true) {
            if (elicitationAction === Strings_1.Strings.Action.Change) {
                // if elicitationAction == 'change', then the previousValue must be defined.
                if (this.state.previousValue !== undefined) {
                    resultBuilder.addAct(new ContentActs_1.ValueChangedAct(this, { previousValue: this.state.previousValue, value: this.state.value }));
                }
                else {
                    throw new Error('ValueChangedAct should only be used if there is an actual previous value');
                }
            }
            else {
                resultBuilder.addAct(new ContentActs_1.ValueSetAct(this, { value: this.state.value }));
            }
        }
        else {
            // feedback
            resultBuilder.addAct(new ContentActs_1.InvalidValueAct(this, {
                value: this.state.value,
                reasonCode: validationResult.reasonCode,
                renderedReason: validationResult.renderedReason
            }));
            this.askElicitationQuestion(input, resultBuilder, elicitationAction);
        }
        return;
    }
    validate(input) {
        const listOfValidationFunc = typeof (this.props.validation) === 'function' ? [this.props.validation] : this.props.validation;
        for (const validationFunction of listOfValidationFunc) {
            const validationResult = validationFunction(this.state, input);
            if (validationResult !== true) {
                log.debug(`ListControl.validate(): validation failed. Reason: ${JSON.stringify(validationResult, null, 2)}.`);
                return validationResult;
            }
        }
        return true;
    }
    askElicitationQuestion(input, resultBuilder, elicitationAction) {
        this.state.elicitationAction = elicitationAction;
        const allChoices = this.getChoicesList(input);
        if (allChoices === null) {
            throw new Error('ListControl.listItemIDs is null');
        }
        const choicesFromActivePage = this.getChoicesFromActivePage(allChoices);
        switch (elicitationAction) {
            case Strings_1.Strings.Action.Set:
                resultBuilder.addAct(new InitiativeActs_1.RequestValueByListAct(this, { choicesFromActivePage, allChoices }));
                return;
            case Strings_1.Strings.Action.Change:
                resultBuilder.addAct(new InitiativeActs_1.RequestChangedValueByListAct(this, { currentValue: this.state.value, choicesFromActivePage, allChoices }));
                return;
            default:
                throw new Error(`Unhandled. Unknown elicitationAction: ${elicitationAction}`);
        }
    }
    // tsDoc - see ControlStateDiagramming
    stringifyStateForDiagram() {
        var _a;
        let text = (_a = this.state.value) !== null && _a !== void 0 ? _a : '<none>';
        if (this.state.elicitationAction !== undefined) {
            text += `[eliciting, ${this.state.elicitationAction}]`;
        }
        return text;
    }
    getChoicesList(input) {
        const slotIds = (typeof this.props.listItemIDs === 'function')
            ? this.props.listItemIDs.call(this, input)
            : this.props.listItemIDs;
        return slotIds;
    }
    getChoicesFromActivePage(allChoices) {
        const start = this.getPageIndex();
        const end = start + this.props.pageSize;
        return allChoices.slice(start, end);
    }
    getPageIndex() {
        if (this.state.spokenItemsPageIndex === undefined) {
            this.state.spokenItemsPageIndex = 0;
        }
        return this.state.spokenItemsPageIndex;
    }
    // tsDoc - see Control
    renderAct(act, input, builder) {
        if (act instanceof InitiativeActs_1.RequestValueByListAct || act instanceof InitiativeActs_1.RequestChangedValueByListAct) {
            const prompt = act instanceof InitiativeActs_1.RequestValueByListAct
                ? this.evaluatePromptProp(act, this.props.prompts.requestValue, input)
                : this.evaluatePromptProp(act, this.props.prompts.requestChangedValue, input);
            const reprompt = act instanceof InitiativeActs_1.RequestValueByListAct
                ? this.evaluatePromptProp(act, this.props.reprompts.requestValue, input)
                : this.evaluatePromptProp(act, this.props.reprompts.requestChangedValue, input);
            builder.addPromptFragment(this.evaluatePromptProp(act, prompt, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, reprompt, input));
            if (this.evaluateBooleanProp(this.props.apl.enabled, input)) {
                const itemsArray = [];
                for (const choice of act.payload.allChoices) {
                    itemsArray.push({
                        primaryText: choice
                    });
                }
                // If APL is defined in act & users' device support APL
                if (ask_sdk_core_1.getSupportedInterfaces(input.handlerInput.requestEnvelope)['Alexa.Presentation.APL']) {
                    const aplDataSource = {
                        textListData: {
                            controlId: this.id,
                            headerTitle: i18next_1.default.t('LIST_CONTROL_DEFAULT_APL_HEADER_TITLE'),
                            items: itemsArray,
                        }
                    };
                    // TODO: apl merging / combination strategy
                    builder.addAPLRenderDocumentDirective('Token', this.props.apl.requestAPLDocument, aplDataSource);
                }
            }
        }
        else if (act instanceof ContentActs_1.UnusableInputValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.unusableInputValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.unusableInputValue, input));
        }
        else if (act instanceof ContentActs_1.InvalidValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.invalidValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.invalidValue, input));
        }
        else if (act instanceof ContentActs_1.ValueSetAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueSet, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueSet, input));
        }
        else if (act instanceof ContentActs_1.ValueChangedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueChanged, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueChanged, input));
        }
        else if (act instanceof InitiativeActs_1.ConfirmValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.confirmValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.confirmValue, input));
        }
        else if (act instanceof ContentActs_1.ValueConfirmedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueConfirmed, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueConfirmed, input));
        }
        else if (act instanceof ContentActs_1.ValueDisconfirmedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueDisconfirmed, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueDisconfirmed, input));
        }
        else {
            this.throwUnhandledActError(act);
        }
    }
    // tsDoc - see Control
    updateInteractionModel(generator, imData) {
        generator.addControlIntent(new GeneralControlIntent_1.GeneralControlIntent(), imData);
        generator.addControlIntent(new SingleValueControlIntent_1.SingleValueControlIntent(this.props.slotType), imData);
        generator.addControlIntent(new OrdinalControlIntent_1.OrdinalControlIntent(), imData);
        generator.addYesAndNoIntents();
        if (this.props.interactionModel.targets.includes(Strings_1.Strings.Target.Choice)) {
            generator.addValuesToSlotType(ModelTypes_1.SharedSlotType.TARGET, i18next_1.default.t('LIST_CONTROL_DEFAULT_SLOT_VALUES_TARGET_CHOICE', { returnObjects: true }));
        }
        if (this.props.interactionModel.actions.set.includes(Strings_1.Strings.Action.Select)) {
            generator.addValuesToSlotType(ModelTypes_1.SharedSlotType.ACTION, i18next_1.default.t('LIST_CONTROL_DEFAULT_SLOT_VALUES_ACTION_SELECT', { returnObjects: true }));
        }
    }
    // tsDoc - see InteractionModelContributor
    getTargetIds() {
        return this.props.interactionModel.targets;
    }
}
exports.ListControl = ListControl;
//# sourceMappingURL=data:application/json;base64,