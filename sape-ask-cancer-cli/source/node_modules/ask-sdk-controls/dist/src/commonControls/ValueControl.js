"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueControl = exports.ValueControlState = exports.ValueControlPromptProps = exports.ValueControlInteractionModelProps = void 0;
const tslib_1 = require("tslib");
const i18next_1 = tslib_1.__importDefault(require("i18next"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const Strings_1 = require("../constants/Strings");
const Control_1 = require("../controls/Control");
const AmazonBuiltInSlotType_1 = require("../intents/AmazonBuiltInSlotType");
const GeneralControlIntent_1 = require("../intents/GeneralControlIntent");
const SingleValueControlIntent_1 = require("../intents/SingleValueControlIntent");
const Logger_1 = require("../logging/Logger");
const ContentActs_1 = require("../systemActs/ContentActs");
const InitiativeActs_1 = require("../systemActs/InitiativeActs");
const InputUtil_1 = require("../utils/InputUtil");
const Predicates_1 = require("../utils/Predicates");
const log = new Logger_1.Logger('AskSdkControls:ValueControl');
/**
 * Props associated with the interaction model.
 */
class ValueControlInteractionModelProps {
}
exports.ValueControlInteractionModelProps = ValueControlInteractionModelProps;
/**
 * Props to customize the prompt fragments that will be added by
 * `this.renderAct()`.
 */
class ValueControlPromptProps {
}
exports.ValueControlPromptProps = ValueControlPromptProps;
/**
 * State tracked by a ValueControl.
 */
class ValueControlState {
    constructor() {
        /**
         * Tracks whether the value has been explicitly confirmed by the user.
         */
        this.isValueConfirmed = false;
    }
}
exports.ValueControlState = ValueControlState;
/**
 * A Control that obtains a single value from the user.
 *
 * The type of value to obtain is defined by `this.slotType`.
 *
 * Capabilities:
 * - Request a value
 * - Change a value
 * - Validate the value
 * - Confirm the value
 *
 * Intents that can be handled:
 * - `GeneralControlIntent`: E.g. `"yes, update my name"`
 * - `{ValueType}_ValueControlIntent`: E.g. "no change it to Elvis".
 * - `AMAZON.YesIntent`, `AMAZON.NoIntent`
 */
class ValueControl extends Control_1.Control {
    constructor(props) {
        super(props.id);
        this.state = new ValueControlState();
        if (props.slotType === AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.SEARCH_QUERY) {
            throw new Error('AMAZON.SearchQuery cannot be used with ValueControl due to the special rules regarding its use. '
                + 'Specifically, utterances that include SearchQuery must have a carrier phrase and not be comprised entirely of slot references. '
                + 'Use a custom intent to manage SearchQuery slots or create a regular slot for use with ValueControl.');
        }
        this.rawProps = props;
        this.props = ValueControl.mergeWithDefaultProps(props);
    }
    static mergeWithDefaultProps(props) {
        const defaults = {
            id: 'dummy',
            slotType: 'dummy',
            required: true,
            validation: [],
            confirmationRequired: false,
            interactionModel: {
                actions: {
                    set: [Strings_1.Strings.Action.Set],
                    change: [Strings_1.Strings.Action.Change],
                },
                targets: [Strings_1.Strings.Target.It]
            },
            prompts: {
                confirmValue: (act) => i18next_1.default.t('VALUE_CONTROL_DEFAULT_PROMPT_CONFIRM_VALUE', { value: act.payload.value }),
                valueConfirmed: i18next_1.default.t('VALUE_CONTROL_DEFAULT_PROMPT_VALUE_AFFIRMED'),
                valueDisconfirmed: i18next_1.default.t('VALUE_CONTROL_DEFAULT_PROMPT_VALUE_DISAFFIRMED'),
                valueSet: (act) => i18next_1.default.t('VALUE_CONTROL_DEFAULT_PROMPT_VALUE_SET', { value: act.payload.value }),
                valueChanged: (act) => i18next_1.default.t('VALUE_CONTROL_DEFAULT_PROMPT_VALUE_CHANGED', { value: act.payload.value }),
                invalidValue: (act) => {
                    if (act.payload.renderedReason !== undefined) {
                        return i18next_1.default.t('VALUE_CONTROL_DEFAULT_PROMPT_INVALID_VALUE_WITH_REASON', { value: act.payload.value, reason: act.payload.renderedReason });
                    }
                    return i18next_1.default.t('VALUE_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_VALUE', { value: act.payload.value });
                },
                requestValue: () => i18next_1.default.t('VALUE_CONTROL_DEFAULT_PROMPT_REQUEST_VALUE'),
                requestChangedValue: () => i18next_1.default.t('VALUE_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_VALUE'),
            },
            reprompts: {
                confirmValue: (act) => i18next_1.default.t('VALUE_CONTROL_DEFAULT_REPROMPT_CONFIRM_VALUE', { value: act.payload.value }),
                valueConfirmed: i18next_1.default.t('VALUE_CONTROL_DEFAULT_REPROMPT_VALUE_AFFIRMED'),
                valueDisconfirmed: i18next_1.default.t('VALUE_CONTROL_DEFAULT_REPROMPT_VALUE_DISAFFIRMED'),
                valueSet: (act) => i18next_1.default.t('VALUE_CONTROL_DEFAULT_REPROMPT_VALUE_SET', { value: act.payload.value }),
                valueChanged: (act) => i18next_1.default.t('VALUE_CONTROL_DEFAULT_REPROMPT_VALUE_CHANGED', { value: act.payload.value }),
                invalidValue: (act) => {
                    if (act.payload.renderedReason !== undefined) {
                        return i18next_1.default.t('VALUE_CONTROL_DEFAULT_REPROMPT_INVALID_VALUE_WITH_REASON', { value: act.payload.value, reason: act.payload.renderedReason });
                    }
                    return i18next_1.default.t('VALUE_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_VALUE', { value: act.payload.value });
                },
                requestValue: () => i18next_1.default.t('VALUE_CONTROL_DEFAULT_REPROMPT_REQUEST_VALUE'),
                requestChangedValue: () => i18next_1.default.t('VALUE_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_VALUE'),
            }
        };
        return lodash_1.default.merge(defaults, props);
    }
    // tsDoc - see Control
    canHandle(input) {
        return this.isSetWithValue(input)
            || this.isChangeWithValue(input)
            || this.isSetWithoutValue(input)
            || this.isChangeWithoutValue(input)
            || this.isBareValue(input)
            || this.isConfirmationAffirmed(input)
            || this.isConfirmationDisaffirmed(input);
    }
    // tsDoc - see Control
    async handle(input, resultBuilder) {
        if (this.handleFunc === undefined) {
            log.error('ValueControl: handle called but this.handleFunc is not set. canHandle() should be called first to set this.handleFunc.');
            const intent = input.request.intent;
            throw new Error(`${intent.name} can not be handled by ${this.constructor.name}.`);
        }
        this.handleFunc(input, resultBuilder);
        if (resultBuilder.hasInitiativeAct() !== true && this.canTakeInitiative(input) === true) {
            await this.takeInitiative(input, resultBuilder);
        }
    }
    /**
     * Determine if the input is an implicit or explicit "set" with a value provided.
     *
     * Example utterance: "Set my name to Bob"
     *
     * @param input - Input
     */
    isSetWithValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, SingleValueControlIntent_1.SingleValueControlIntent.intentName(this.props.slotType)));
            const { feedback, action, target, valueStr, valueType } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueTypeMatch(valueType, this.props.slotType));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueStrDefined(valueStr));
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatch(action, this.props.interactionModel.actions.set));
            this.handleFunc = this.handleSetWithValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    /**
     * Handle an implicit or explicit "set" with a value provided.
     *
     * @param input - Input
     * @param resultBuilder - ResultBuilder
     */
    handleSetWithValue(input, resultBuilder) {
        const { valueStr, erMatch } = InputUtil_1.InputUtil.getValueResolution(input);
        this.setValue(valueStr, erMatch);
        this.validateAndAddActs(input, resultBuilder, Strings_1.Strings.Action.Set);
        return;
    }
    /**
     * Determine if the input is an implicit or explicit "set" without a value.
     *
     * Example utterance: "Set my name"
     *
     * @param input - Input
     */
    isSetWithoutValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, GeneralControlIntent_1.GeneralControlIntent.name));
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatch(action, this.props.interactionModel.actions.set));
            this.handleFunc = this.handleSetWithoutValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    /**
     * Handle an implicit or explicit "set" without a value.
     *
     * @param input - Input
     * @param resultBuilder - Result builder
     */
    handleSetWithoutValue(input, resultBuilder) {
        this.askElicitationQuestion(input, resultBuilder, Strings_1.Strings.Action.Set);
        return;
    }
    /**
     * Determine if the input is "change" with a value provided.
     *
     * Example utterance: "Change my name to bob"
     *
     * @param input - Input
     */
    isChangeWithValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, SingleValueControlIntent_1.SingleValueControlIntent.intentName(this.props.slotType)));
            const { feedback, action, target, valueStr, valueType } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueTypeMatch(valueType, this.props.slotType));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueStrDefined(valueStr));
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatch(action, this.props.interactionModel.actions.change));
            this.handleFunc = this.handleChangeWithValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    /**
     * Handle an implicit or explicit "change" with a value.
     *
     * @param input - Input
     * @param resultBuilder - Result builder
     */
    handleChangeWithValue(input, resultBuilder) {
        const { valueStr, erMatch } = InputUtil_1.InputUtil.getValueResolution(input);
        this.setValue(valueStr, erMatch);
        this.validateAndAddActs(input, resultBuilder, Strings_1.Strings.Action.Change);
        return;
    }
    /**
     * Determine if the input is "change" without a value.
     *
     * Example utterance: "Change my name"
     *
     * @param input - Input
     */
    isChangeWithoutValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, GeneralControlIntent_1.GeneralControlIntent.name));
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsMatchOrUndefined(feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsMatch(action, this.props.interactionModel.actions.change));
            this.handleFunc = this.handleChangeWithoutValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    /**
     * Handle an implicit or explicit "change" without a value.
     *
     * @param input - Input
     * @param resultBuilder - Result builder
     */
    handleChangeWithoutValue(input, resultBuilder) {
        this.askElicitationQuestion(input, resultBuilder, Strings_1.Strings.Action.Change);
        return;
    }
    /**
     * Determine if the input is a value without any further information.
     *
     * Example utterance: 'Bob'
     *
     * Behavior:
     *  - If the control isn't actively asking a question, it assumes the user
     *    meant "set \{value\}".
     * @param input - Input
     */
    isBareValue(input) {
        try {
            Predicates_1.okIf(InputUtil_1.InputUtil.isIntent(input, SingleValueControlIntent_1.SingleValueControlIntent.intentName(this.props.slotType)));
            const { feedback, action, target, valueStr, valueType } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
            Predicates_1.okIf(InputUtil_1.InputUtil.feedbackIsUndefined(feedback));
            Predicates_1.okIf(InputUtil_1.InputUtil.actionIsUndefined(action));
            Predicates_1.okIf(InputUtil_1.InputUtil.targetIsUndefined(target));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueStrDefined(valueStr));
            Predicates_1.okIf(InputUtil_1.InputUtil.valueTypeMatch(valueType, this.props.slotType));
            this.handleFunc = this.handleBareValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    /**
     * Handle a bare value.
     *
     * @param input - Input
     * @param resultBuilder - Result builder
     */
    handleBareValue(input, resultBuilder) {
        var _a;
        const { valueStr, erMatch } = InputUtil_1.InputUtil.getValueResolution(input);
        this.setValue(valueStr, erMatch);
        this.validateAndAddActs(input, resultBuilder, (_a = this.state.elicitationAction) !== null && _a !== void 0 ? _a : Strings_1.Strings.Action.Set);
        return;
    }
    /**
     * Determine if the input is an affirmation to an explicit confirmation question.
     *
     * Example dialog:
     * - 'A: Did you say Bob?'
     * - 'U: Yes.'
     *
     * @param input - Input
     */
    isConfirmationAffirmed(input) {
        try {
            /* TODO: feature: also handle "yes, {value}" for both expected and
             * unexpected values
             */
            Predicates_1.okIf(InputUtil_1.InputUtil.isBareYes(input));
            Predicates_1.okIf(this.state.activeInitiativeAct === 'ConfirmValueAct');
            this.handleFunc = this.handleConfirmationAffirmed;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    /**
     * Handle an affirmation to an explicit confirmation question.
     *
     * @param input - Input
     * @param resultBuilder - Result builder
     */
    handleConfirmationAffirmed(input, resultBuilder) {
        this.state.activeInitiativeAct = undefined;
        this.state.isValueConfirmed = true;
        this.state.activeInitiativeAct = undefined;
        resultBuilder.addAct(new ContentActs_1.ValueConfirmedAct(this, { value: this.state.value }));
    }
    /**
     * Determine if the input is an affirmation to an explicit confirmation question.
     *
     * Example dialog:
     * - 'A: Did you say Bob?'
     * - 'U: No.'
     *
     * @param input - Input
     */
    isConfirmationDisaffirmed(input) {
        try {
            /* TODO: feature: also handle "no, {value}" for both expected and
             * unexpected values
             */
            Predicates_1.okIf(InputUtil_1.InputUtil.isBareNo(input));
            Predicates_1.okIf(this.state.activeInitiativeAct === 'ConfirmValueAct');
            this.handleFunc = this.handleConfirmationDisaffirmed;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    /**
     * Handle a disaffirmation to an explicit confirmation question.
     *
     * @param input - Input
     * @param resultBuilder - Result builder
     */
    handleConfirmationDisaffirmed(input, resultBuilder) {
        this.state.isValueConfirmed = false;
        this.state.activeInitiativeAct = undefined;
        resultBuilder.addAct(new ContentActs_1.ValueDisconfirmedAct(this, { value: this.state.value }));
        resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
    }
    /**
     * Directly set the value.
     *
     * @param value - Value
     * @param erMatch - Whether the value is an ID defined for `this.slotType`
     * in the interaction model
     */
    setValue(value, erMatch = true) {
        this.state.previousValue = this.state.value;
        this.state.value = value;
        this.state.erMatch = erMatch;
        this.state.isValueConfirmed = false;
    }
    // TODO: naming: 'reset'?
    /**
     * Clear the state of this control.
     */
    clear() {
        this.state = new ValueControlState();
    }
    // tsDoc - see Control
    canTakeInitiative(input) {
        return this.wantsToConfirmValue(input)
            || this.wantsToFixInvalidValue(input)
            || this.wantsToElicitValue(input);
    }
    // tsDoc - see Control
    async takeInitiative(input, resultBuilder) {
        if (this.initiativeFunc === undefined) {
            const errorMsg = 'ValueControl: takeInitiative called but this.initiativeFunc is not set. canTakeInitiative() should be called first to set this.initiativeFunc.';
            log.error(errorMsg);
            throw new Error(errorMsg);
        }
        this.initiativeFunc(input, resultBuilder);
        return;
    }
    /**
     * Perform validation checks and add appropriate acts to the result.
     *
     * @param input - Input
     * @param resultBuilder - Result builder
     * @param elicitationAction - The type of elicitation question that has been
     * asked.
     */
    validateAndAddActs(input, resultBuilder, elicitationAction) {
        this.state.elicitationAction = elicitationAction;
        const validationResult = this.validate(input);
        if (typeof validationResult === 'boolean') {
            if (elicitationAction === Strings_1.Strings.Action.Change) {
                // if elicitationAction == 'change', then the previousValue must be defined.
                if (this.state.previousValue !== undefined) {
                    resultBuilder.addAct(new ContentActs_1.ValueChangedAct(this, { previousValue: this.state.previousValue, value: this.state.value }));
                }
                else {
                    throw new Error('ValueChangedAct should only be used if there is an actual previous value');
                }
            }
            else {
                resultBuilder.addAct(new ContentActs_1.ValueSetAct(this, { value: this.state.value }));
            }
        }
        else {
            // feedback
            resultBuilder.addAct(new ContentActs_1.InvalidValueAct(this, { value: this.state.value, reasonCode: validationResult.reasonCode, renderedReason: validationResult.renderedReason }));
            this.askElicitationQuestion(input, resultBuilder, elicitationAction);
        }
        return;
    }
    /**
     * Determine if the value is valid.
     *
     * @param input - Input.
     */
    validate(input) {
        const listOfValidationFunc = typeof (this.props.validation) === 'function' ? [this.props.validation] : this.props.validation;
        for (const validationFunction of listOfValidationFunc) {
            const validationResult = validationFunction(this.state, input);
            if (validationResult !== true) {
                log.debug(`ValueControl.validate(): validation failed. Reason: ${JSON.stringify(validationResult, null, 2)}.`);
                return validationResult;
            }
        }
        return true;
    }
    /**
     * Determine if the value needs to be explicitly confirmed
     *
     * @param input - Input
     */
    wantsToConfirmValue(input) {
        if (this.state.value !== undefined && this.state.isValueConfirmed === false && this.evaluateBooleanProp(this.props.confirmationRequired, input)) {
            this.initiativeFunc = this.confirmValue;
            return true;
        }
        return false;
    }
    /**
     * Ask the user to confirm the value.
     *
     * @param input - Input
     * @param resultBuilder - Result builder
     */
    confirmValue(input, resultBuilder) {
        this.state.activeInitiativeAct = 'ConfirmValueAct';
        resultBuilder.addAct(new InitiativeActs_1.ConfirmValueAct(this, { value: this.state.value }));
    }
    /**
     * Determine if the value needs to obtain a new value because the current
     * one is invalid.
     *
     * @param input - Input
     */
    wantsToFixInvalidValue(input) {
        if (this.state.value !== undefined && this.validate(input) !== true) {
            this.initiativeFunc = this.fixInvalidValue;
            return true;
        }
        return false;
    }
    /**
     * Ask the user to provide a new value because the current one is invalid.
     *
     * @param input - Input
     * @param resultBuilder - Result builder
     */
    fixInvalidValue(input, resultBuilder) {
        this.validateAndAddActs(input, resultBuilder, Strings_1.Strings.Action.Change);
    }
    /**
     * Determine if the value should be elicited.
     *
     * @param input - Input
     */
    wantsToElicitValue(input) {
        if (this.state.value === undefined && this.evaluateBooleanProp(this.props.required, input)) {
            this.initiativeFunc = this.elicitValue;
            return true;
        }
        return false;
    }
    /**
     * Ask the user to provide a value.
     *
     * @param input - Input
     * @param resultBuilder - Result builder
     */
    elicitValue(input, resultBuilder) {
        this.askElicitationQuestion(input, resultBuilder, Strings_1.Strings.Action.Set);
    }
    /**
     * Add an elicitation act to the result.
     *
     * @param input - Input
     * @param resultBuilder - Result builder
     * @param elicitationAction - The style of elicitation to use.
     */
    askElicitationQuestion(input, resultBuilder, elicitationAction) {
        this.state.elicitationAction = elicitationAction;
        switch (elicitationAction) {
            case Strings_1.Strings.Action.Set:
                resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
                return;
            case Strings_1.Strings.Action.Change:
                resultBuilder.addAct(new InitiativeActs_1.RequestChangedValueAct(this, { currentValue: this.state.value }));
                return;
            default:
                throw new Error(`Unhandled. Unknown elicitationAction: ${this.state.elicitationAction}`);
        }
    }
    // tsDoc - see ControlStateDiagramming
    stringifyStateForDiagram() {
        var _a;
        let text = (_a = this.state.value) !== null && _a !== void 0 ? _a : '<none>';
        if (this.state.elicitationAction !== undefined) {
            text += `[eliciting, ${this.state.elicitationAction}]`;
        }
        return text;
    }
    // tsDoc - see Control
    renderAct(act, input, builder) {
        if (act instanceof ContentActs_1.InvalidValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.invalidValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.invalidValue, input));
        }
        else if (act instanceof ContentActs_1.ValueSetAct) {
            // We must choose how to say the value.  The default is to assume that the Slot-type IDs are speakable.
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueSet, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueSet, input));
        }
        else if (act instanceof ContentActs_1.ValueChangedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueChanged, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueChanged, input));
        }
        else if (act instanceof InitiativeActs_1.RequestValueAct || act instanceof InitiativeActs_1.RequestChangedValueAct) {
            const prompt = act instanceof InitiativeActs_1.RequestValueAct ? this.props.prompts.requestValue : this.props.prompts.requestChangedValue;
            const reprompt = act instanceof InitiativeActs_1.RequestChangedValueAct ? this.props.reprompts.requestValue : this.props.reprompts.requestChangedValue;
            builder.addPromptFragment(this.evaluatePromptProp(act, prompt, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, reprompt, input));
            const slotElicitation = generateSlotElicitation(this.props.slotType);
            builder.addElicitSlotDirective(slotElicitation.slotName, slotElicitation.intent);
        }
        else if (act instanceof InitiativeActs_1.ConfirmValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.confirmValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.confirmValue, input));
        }
        else if (act instanceof ContentActs_1.ValueConfirmedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueConfirmed, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueConfirmed, input));
        }
        else if (act instanceof ContentActs_1.ValueDisconfirmedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueDisconfirmed, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueDisconfirmed, input));
        }
        else {
            this.throwUnhandledActError(act);
        }
    }
    // tsDoc - see Control
    updateInteractionModel(generator, imData) {
        generator.addControlIntent(new SingleValueControlIntent_1.SingleValueControlIntent(this.props.slotType), imData);
        generator.addControlIntent(new GeneralControlIntent_1.GeneralControlIntent(), imData);
        generator.addYesAndNoIntents();
    }
    // tsDoc - see InteractionModelContributor
    getTargetIds() {
        return this.props.interactionModel.targets;
    }
}
exports.ValueControl = ValueControl;
/**
 * Creates an elicit-slot directive for the provided slotType.
 *
 * - The intent specified is a `{slotType}_ValueControlIntent`
 * - The slot specified is the `slotType` slot.
 *
 * @param slotType - Slot type
 */
function generateSlotElicitation(slotType) {
    const intent = {
        // TODO: refactor: use SingleValueControlIntent.intentName
        name: `${slotType}_ValueControlIntent`.replace('.', '_'),
        slots: {
            slotType: { name: slotType, value: '', confirmationStatus: 'NONE' },
            feedback: { name: "feedback", value: '', confirmationStatus: 'NONE' },
            action: { name: "action", value: '', confirmationStatus: 'NONE' },
            target: { name: "target", value: '', confirmationStatus: 'NONE' },
            head: { name: "head", value: '', confirmationStatus: 'NONE' },
            tail: { name: "tail", value: '', confirmationStatus: 'NONE' },
            assign: { name: "assign", value: '', confirmationStatus: 'NONE' },
        },
        confirmationStatus: "NONE"
    };
    return {
        intent,
        slotName: slotType
    };
}
//# sourceMappingURL=data:application/json;base64,