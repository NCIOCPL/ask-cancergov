"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlResponseBuilder = void 0;
/**
 * A specialized ResponseBuilder for use with Controls framework
 *
 * This differs from the the regular @see ResponseBuilder in a couple of ways:
 * 1. The prompt and reprompt can be built up incrementally via
 *    `addPromptFragment()` and `addRepromptFragment()`
 * 2. `.withShouldEndSession()` is disabled as the information should be
 *    provided via see `ControlResultBuilder` during `Control.handle()` and
 *    `Control.takeInitiative()`
 */
class ControlResponseBuilder {
    constructor(responseBuilder) {
        this.promptFragments = [];
        this.repromptFragments = [];
        this.coreBuilder = responseBuilder;
    }
    /**
     * Determines if a 'display or APL' directive has been added to the response.
     */
    isDisplayUsed() {
        return this.displayUsed;
    }
    /**
     * Sets the displayUsed flag to indicate if the Response includes content
     * for the device display.
     *
     * Note: calling `.withSimpleCard()`, `.withStandardCard()`,
     * `.addAPLRenderDocumentDirective()` or
     * `.addDirective(type=Alexa.Presentation)` sets this to `true`
     * automatically.
     *
     * Usage:
     *  * If you wish to keep existing APL active on device without resending,
     *    call this to communicate that the screen remains 'in use'.
     *  * Use this if the auto-detection does not work for some directive.
     */
    setDisplayUsed(used = true) {
        this.displayUsed = used;
    }
    /**
     * Build the response.
     */
    build() {
        const prompt = this.getPrompt();
        const reprompt = this.getReprompt();
        this.coreBuilder
            .speak(prompt, this.promptPlayBehavior)
            .reprompt(reprompt, this.repromptPlayBehavior);
        return this.coreBuilder.getResponse();
    }
    /**
     * Get the complete prompt.
     *
     * Concatenates the fragments with a single space between each.
     */
    getPrompt() {
        return this.promptFragments.join(' ');
    }
    /**
     * Get the complete reprompt.
     *
     * Concatenates the fragments with a single space between each.
     */
    getReprompt() {
        return this.repromptFragments.join(' ');
    }
    /**
     * Add a fragment to the prompt.
     * @param promptFragment - Prompt fragment
     */
    addPromptFragment(promptFragment) {
        this.promptFragments.push(promptFragment);
        return this;
    }
    /**
     * Add a fragment to the reprompt.
     * @param repromptFragment - Reprompt fragment
     */
    addRepromptFragment(repromptFragment) {
        this.repromptFragments.push(repromptFragment);
        return this;
    }
    /**
     * Set the prompt play behavior to associate with the complete prompt.
     */
    withPromptPlayBehavior(playBehavior) {
        if (this.promptPlayBehavior !== undefined) {
            throw new Error("Play behavior is already set");
        }
        this.promptPlayBehavior = playBehavior;
        return this;
    }
    /**
     * Set the reprompt play behavior to associate with the complete prompt.
     */
    withRepromptPlayBehavior(playBehavior) {
        if (this.repromptPlayBehavior !== undefined) {
            throw new Error("Play behavior is already set");
        }
        this.repromptPlayBehavior = playBehavior;
        return this;
    }
    // --------------------------------------
    // pass through methods
    /**
     * Disabled.  Use addPromptFragment and withPromptPlayBehavior.
     */
    speak(speechOutput, playBehavior) {
        throw new Error("Use addPromptFragment and withPromptPlayBehavior instead.");
    }
    /**
     * Disabled.  Use addRepromptFragment and withRepromptPlayBehavior.
     */
    reprompt(repromptSpeechOutput, playBehavior) {
        throw new Error("Use addRepromptFragment and withRepromptPlayBehavior instead.");
    }
    withSimpleCard(cardTitle, cardContent) {
        this.coreBuilder.withSimpleCard(cardTitle, cardContent);
        this.displayUsed = true;
        return this;
    }
    withStandardCard(cardTitle, cardContent, smallImageUrl, largeImageUrl) {
        this.coreBuilder.withStandardCard(cardTitle, cardContent, smallImageUrl, largeImageUrl);
        this.displayUsed = true;
        return this;
    }
    withLinkAccountCard() {
        this.coreBuilder.withLinkAccountCard();
        return this;
    }
    withAskForPermissionsConsentCard(permissionArray) {
        this.coreBuilder.withAskForPermissionsConsentCard(permissionArray);
        return this;
    }
    addDelegateDirective(updatedIntent) {
        this.coreBuilder.addDelegateDirective(updatedIntent);
        return this;
    }
    addElicitSlotDirective(slotToElicit, updatedIntent) {
        this.coreBuilder.addElicitSlotDirective(slotToElicit, updatedIntent);
        return this;
    }
    addConfirmSlotDirective(slotToConfirm, updatedIntent) {
        this.coreBuilder.addConfirmSlotDirective(slotToConfirm, updatedIntent);
        return this;
    }
    addConfirmIntentDirective(updatedIntent) {
        this.coreBuilder.addConfirmIntentDirective(updatedIntent);
        return this;
    }
    addAudioPlayerPlayDirective(playBehavior, url, token, offsetInMilliseconds, expectedPreviousToken, audioItemMetadata) {
        this.coreBuilder.addAudioPlayerPlayDirective(playBehavior, url, token, offsetInMilliseconds, expectedPreviousToken);
        return this;
    }
    addAudioPlayerStopDirective() {
        this.coreBuilder.addAudioPlayerStopDirective();
        return this;
    }
    addAudioPlayerClearQueueDirective(clearBehavior) {
        this.coreBuilder.addAudioPlayerClearQueueDirective(clearBehavior);
        return this;
    }
    addRenderTemplateDirective(template) {
        this.coreBuilder.addRenderTemplateDirective(template);
        this.displayUsed = true;
        return this;
    }
    addHintDirective(text) {
        this.coreBuilder.addHintDirective(text);
        return this;
    }
    addVideoAppLaunchDirective(source, title, subtitle) {
        this.coreBuilder.addVideoAppLaunchDirective(source, title, subtitle);
        return this;
    }
    withCanFulfillIntent(canFulfillIntent) {
        this.coreBuilder.withCanFulfillIntent(canFulfillIntent);
        return this;
    }
    withShouldEndSession(val) {
        throw new Error('Do not set this here.. use methods on ControlResultBuilder instead.');
    }
    addDirective(directive) {
        if (directive.type.startsWith('Alexa.Presentation')) {
            this.displayUsed = true;
        }
        this.coreBuilder.addDirective(directive);
        return this;
    }
    // helpers for common directives (incomplete)
    addDynamicEntitiesDirective(dynamicEntitiesDirective) {
        this.coreBuilder.addDirective(dynamicEntitiesDirective);
    }
    addAPLRenderDocumentDirective(token, document, datasources, packages) {
        this.coreBuilder.addDirective({
            type: 'Alexa.Presentation.APL.RenderDocument',
            token,
            document,
            datasources,
            packages
        });
        this.displayUsed = true;
    }
    /**
     * Builds and returns the complete response.
     */
    getResponse() {
        return this.build();
    }
}
exports.ControlResponseBuilder = ControlResponseBuilder;
//# sourceMappingURL=data:application/json;base64,