"use strict";
// /*
//  * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//  * Licensed under the Apache License, Version 2.0 (the "License").
//  * You may not use this file except in compliance with the License.
//  * A copy of the License is located at
//  *      http://www.apache.org/licenses/LICENSE-2.0
//  *
//  * or in the "license" file accompanying this file. This file is distributed
//  * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
//  * express or implied. See the License for the specific language governing
//  * permissions and limitations under the License.
//  */
// import { RawControlInput } from './RawControlInput';
// import { RawControlResultBuilder } from './RawControlResultBuilder';
// /**
//  * Defines a Control object that manages state and dialog behavior.
//  *
//  * Each Control is responsible only for the its own personal state and associated decisions.
//  * In the case of a @see RawContainerControl this responsibility also extends to the children.
//  *
//  */
// export interface RawControl {
//     id: string;
//     /**
//      * Determines if the Control or one of its children can consume the request described by the input object
//      *
//      * Usage:
//      * * The handling of a request can and should be contextual. That is, a control should only return
//      * `canHandle = true` if the request makes sense for the current state of the control.
//      *
//      * * A @see ContainerControl should return true if one or more of its children returns `canHandle = true`. Thus
//      * the root of a Control tree should return `canHandle = true` unless the request cannot be meaningfully consumed
//      * by any Control in the tree.
//      *
//      * * The implementation should be deterministic and effectively memoryless. i.e. no state changes should be made that would
//      * be exposed by `getSerializableState()`.
//      *
//      * @param input Input object. `input.request` contains the request to be handled.
//      * @returns `true` if the Control or one of its children can consume the entire request, false otherwise.
//      */
//     canHandle(input: RawControlInput): boolean | Promise<boolean>;
//     /**
//      * Handles the request described by the input object.
//      *
//      * Handling a request involves orchestrating state changes to the Control (and its children) and adding response
//      * items to the ControlResultBuilder.
//      *
//      * @param input Input object. `input.request` contains the request to be handled.
//      */
//     handle(input: RawControlInput, resultBuilder: RawControlResultBuilder): void | Promise<void>;
//     /**
//      * Determines if the Control can take the initiative.
//      *
//      * Taking initiative can and should be contextual, i.e. A control should only return
//      * `canTakeInitiative = true` if the control, in its current state, has something important to ask of the user.
//      *
//      * Framework behavior:
//      * * The initiative phase runs if the handling phase did not produce a responseItem that has `.takesInitiative = true`.
//      *
//      * Usage:
//      * * A @see ContainerControl should return true if one or more of its children returns `canTakeInitiative = true`. Thus
//      *   the root of a Control tree should return `canTakeInitiative = true` unless there is no control in the entire tree
//      *   that can take the initiative.
//      *
//      * * The implementation should be deterministic and effectively memoryless. i.e. no state changes should be made that would
//      * be exposed by `getSerializableState()`.
//      *
//      * @param input Input object.
//      * @returns `true` if the Control or one of its children can take the initiative, false otherwise.
//      */
//     canTakeInitiative(input: RawControlInput): boolean | Promise<boolean>;
//     /**
//      * Takes initiative by add an initiative ResponseItem to resultBuilder
//      *
//      * An initiative ResponseItem has  `item.takesInitiative = true`
//      *
//      * Framework behavior:
//      * * The initiative phase runs if the handling phase did not produce a responseItem that has `.takesInitiative = true`.
//      *
//      * @param input Input object.
//      */
//     takeInitiative(input: RawControlInput, resultBuilder: RawControlResultBuilder): void | Promise<void>;
//     /**
//      * Gets the Control's state as an object that is serializable.
//      *
//      * Only durable state should be included and the object should be serializable with a
//      * straightforward application of `JSON.stringify(object)`.
//      *
//      * Usage:
//      *  * A typical implementation is {return this.state;}
//      *  * It is safe to pass the actual state object as the framework guarantees to not mutate it.
//      *  * The state must not contain functions as these will not survive the round trip.
//      *    (Functions that operate on the Control's state should be defined on the Control itself)
//      * @returns Serializable object defining the state of the Control
//      */
//     getSerializableState(): any;
//     /**
//      * Sets the state from a serialized state object
//      *
//      * Usage:
//      *  * A typical implementation is {this.state = serializedState;}
//      *  * It is safe to use serializedState without copying as the framework guarantees to not mutate it.
//      *
//      * @param serializedState Serializable object defining the state of the Control
//      */
//     setSerializableState(serializedState: any): void;
// }
//# sourceMappingURL=data:application/json;base64,