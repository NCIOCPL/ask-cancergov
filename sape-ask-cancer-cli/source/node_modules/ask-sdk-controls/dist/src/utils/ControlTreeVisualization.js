"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateControlTreeTextDiagram = void 0;
const ControlStateDiagramming_1 = require("../controls/mixins/ControlStateDiagramming");
const IContainerControl_1 = require("../controls/interfaces/IContainerControl");
/**
 * Creates a text diagram of the Control tree
 *
 * Notes:
 *  1. The controls in the handling chain are highlighted with `= H =`
 *  2. The controls in the initiative chain are highlighted with `= I =`
 *  3. Controls that are in both chains are highlighted with `= B =`
 * @param control - Control
 * @param turnNumber - Turn number
 * @param indent - Indent
 */
function generateControlTreeTextDiagram(control, turnNumber, indent) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    indent = indent !== null && indent !== void 0 ? indent : 0;
    let text = control.id;
    let stateStr = control.constructor.name;
    if (ControlStateDiagramming_1.implementsControlStateDiagramming(control)) {
        stateStr = control.stringifyStateForDiagram();
    }
    text += ` (${stateStr})`;
    const coloredText = text;
    let str = `${coloredText}\n`;
    if (IContainerControl_1.isContainerControl(control)) {
        for (const child of control.children) {
            const childHandledThisTurn = (child.id === ((_b = (_a = control.state) === null || _a === void 0 ? void 0 : _a.lastHandlingControl) === null || _b === void 0 ? void 0 : _b.controlId) && ((_d = (_c = control.state) === null || _c === void 0 ? void 0 : _c.lastHandlingControl) === null || _d === void 0 ? void 0 : _d.turnNumber) === turnNumber);
            const childTookInitiativeThisTurn = (child.id === ((_f = (_e = control.state) === null || _e === void 0 ? void 0 : _e.lastInitiativeChild) === null || _f === void 0 ? void 0 : _f.controlId) && ((_h = (_g = control.state) === null || _g === void 0 ? void 0 : _g.lastInitiativeChild) === null || _h === void 0 ? void 0 : _h.turnNumber) === turnNumber);
            // const text = `|${(childHandledThisTurn || childTookInitiativeThisTurn) ? "== " : "-- "}`;
            const text = `|${childHandledThisTurn && childTookInitiativeThisTurn
                ? '= B = '
                : childHandledThisTurn
                    ? '= H = '
                    : childTookInitiativeThisTurn
                        ? '= I = '
                        : '----- '}`;
            str += "| ".repeat(indent) + text + generateControlTreeTextDiagram(child, turnNumber, indent + 1);
        }
    }
    return str;
}
exports.generateControlTreeTextDiagram = generateControlTreeTextDiagram;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJvbFRyZWVWaXN1YWxpemF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL0NvbnRyb2xUcmVlVmlzdWFsaXphdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7OztBQUVILHdGQUErRjtBQUUvRixnRkFBOEU7QUFFOUU7Ozs7Ozs7Ozs7R0FVRztBQUNILFNBQWdCLDhCQUE4QixDQUFDLE9BQWlCLEVBQUUsVUFBa0IsRUFBRSxNQUFlOztJQUNqRyxNQUFNLEdBQUcsTUFBTSxhQUFOLE1BQU0sY0FBTixNQUFNLEdBQUksQ0FBQyxDQUFDO0lBQ3JCLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDdEIsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7SUFDeEMsSUFBSSwyREFBaUMsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUM1QyxRQUFRLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixFQUFFLENBQUM7S0FDakQ7SUFDRCxJQUFJLElBQUksS0FBSyxRQUFRLEdBQUcsQ0FBQztJQUV6QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDekIsSUFBSSxHQUFHLEdBQUcsR0FBRyxXQUFXLElBQUksQ0FBQztJQUU3QixJQUFJLHNDQUFrQixDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzdCLEtBQUssTUFBTSxLQUFLLElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtZQUNsQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsa0JBQU0sT0FBZSxDQUFDLEtBQUssMENBQUUsbUJBQW1CLDBDQUFFLFNBQVMsQ0FBQSxJQUFJLGFBQUMsT0FBZSxDQUFDLEtBQUssMENBQUUsbUJBQW1CLDBDQUFFLFVBQVUsTUFBSyxVQUFVLENBQUMsQ0FBQztZQUM3SyxNQUFNLDJCQUEyQixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsa0JBQU0sT0FBZSxDQUFDLEtBQUssMENBQUUsbUJBQW1CLDBDQUFFLFNBQVMsQ0FBQSxJQUFJLGFBQUMsT0FBZSxDQUFDLEtBQUssMENBQUUsbUJBQW1CLDBDQUFFLFVBQVUsTUFBSyxVQUFVLENBQUMsQ0FBQztZQUNwTCw0RkFBNEY7WUFFNUYsTUFBTSxJQUFJLEdBQUcsSUFBSyxvQkFBb0IsSUFBSSwyQkFBMkI7Z0JBQ2pFLENBQUMsQ0FBQyxRQUFRO2dCQUNWLENBQUMsQ0FBQyxvQkFBb0I7b0JBQ2xCLENBQUMsQ0FBQyxRQUFRO29CQUNWLENBQUMsQ0FBQywyQkFBMkI7d0JBQ3pCLENBQUMsQ0FBQyxRQUFRO3dCQUNWLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUV6QixHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLEdBQUcsOEJBQThCLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDckc7S0FDSjtJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQS9CRCx3RUErQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBvciBpbiB0aGUgXCJsaWNlbnNlXCIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWRcbiAqIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBpbXBsZW1lbnRzQ29udHJvbFN0YXRlRGlhZ3JhbW1pbmcgfSBmcm9tICcuLi9jb250cm9scy9taXhpbnMvQ29udHJvbFN0YXRlRGlhZ3JhbW1pbmcnO1xuaW1wb3J0IHsgSUNvbnRyb2wgfSBmcm9tICcuLi9jb250cm9scy9pbnRlcmZhY2VzL0lDb250cm9sJztcbmltcG9ydCB7IGlzQ29udGFpbmVyQ29udHJvbCB9IGZyb20gJy4uL2NvbnRyb2xzL2ludGVyZmFjZXMvSUNvbnRhaW5lckNvbnRyb2wnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0ZXh0IGRpYWdyYW0gb2YgdGhlIENvbnRyb2wgdHJlZVxuICpcbiAqIE5vdGVzOlxuICogIDEuIFRoZSBjb250cm9scyBpbiB0aGUgaGFuZGxpbmcgY2hhaW4gYXJlIGhpZ2hsaWdodGVkIHdpdGggYD0gSCA9YFxuICogIDIuIFRoZSBjb250cm9scyBpbiB0aGUgaW5pdGlhdGl2ZSBjaGFpbiBhcmUgaGlnaGxpZ2h0ZWQgd2l0aCBgPSBJID1gXG4gKiAgMy4gQ29udHJvbHMgdGhhdCBhcmUgaW4gYm90aCBjaGFpbnMgYXJlIGhpZ2hsaWdodGVkIHdpdGggYD0gQiA9YFxuICogQHBhcmFtIGNvbnRyb2wgLSBDb250cm9sXG4gKiBAcGFyYW0gdHVybk51bWJlciAtIFR1cm4gbnVtYmVyXG4gKiBAcGFyYW0gaW5kZW50IC0gSW5kZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUNvbnRyb2xUcmVlVGV4dERpYWdyYW0oY29udHJvbDogSUNvbnRyb2wsIHR1cm5OdW1iZXI6IG51bWJlciwgaW5kZW50PzogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpbmRlbnQgPSBpbmRlbnQgPz8gMDtcbiAgICBsZXQgdGV4dCA9IGNvbnRyb2wuaWQ7XG4gICAgbGV0IHN0YXRlU3RyID0gY29udHJvbC5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFN0YXRlRGlhZ3JhbW1pbmcoY29udHJvbCkpIHtcbiAgICAgICAgc3RhdGVTdHIgPSBjb250cm9sLnN0cmluZ2lmeVN0YXRlRm9yRGlhZ3JhbSgpO1xuICAgIH1cbiAgICB0ZXh0ICs9IGAgKCR7c3RhdGVTdHJ9KWA7XG5cbiAgICBjb25zdCBjb2xvcmVkVGV4dCA9IHRleHQ7XG4gICAgbGV0IHN0ciA9IGAke2NvbG9yZWRUZXh0fVxcbmA7XG5cbiAgICBpZiAoaXNDb250YWluZXJDb250cm9sKGNvbnRyb2wpKSB7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY29udHJvbC5jaGlsZHJlbikge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRIYW5kbGVkVGhpc1R1cm4gPSAoY2hpbGQuaWQgPT09IChjb250cm9sIGFzIGFueSkuc3RhdGU/Lmxhc3RIYW5kbGluZ0NvbnRyb2w/LmNvbnRyb2xJZCAmJiAoY29udHJvbCBhcyBhbnkpLnN0YXRlPy5sYXN0SGFuZGxpbmdDb250cm9sPy50dXJuTnVtYmVyID09PSB0dXJuTnVtYmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkVG9va0luaXRpYXRpdmVUaGlzVHVybiA9IChjaGlsZC5pZCA9PT0gKGNvbnRyb2wgYXMgYW55KS5zdGF0ZT8ubGFzdEluaXRpYXRpdmVDaGlsZD8uY29udHJvbElkICYmIChjb250cm9sIGFzIGFueSkuc3RhdGU/Lmxhc3RJbml0aWF0aXZlQ2hpbGQ/LnR1cm5OdW1iZXIgPT09IHR1cm5OdW1iZXIpO1xuICAgICAgICAgICAgLy8gY29uc3QgdGV4dCA9IGB8JHsoY2hpbGRIYW5kbGVkVGhpc1R1cm4gfHwgY2hpbGRUb29rSW5pdGlhdGl2ZVRoaXNUdXJuKSA/IFwiPT0gXCIgOiBcIi0tIFwifWA7XG5cbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBgfCR7IGNoaWxkSGFuZGxlZFRoaXNUdXJuICYmIGNoaWxkVG9va0luaXRpYXRpdmVUaGlzVHVyblxuICAgICAgICAgICAgICAgID8gJz0gQiA9ICdcbiAgICAgICAgICAgICAgICA6IGNoaWxkSGFuZGxlZFRoaXNUdXJuXG4gICAgICAgICAgICAgICAgICAgID8gJz0gSCA9ICdcbiAgICAgICAgICAgICAgICAgICAgOiBjaGlsZFRvb2tJbml0aWF0aXZlVGhpc1R1cm5cbiAgICAgICAgICAgICAgICAgICAgICAgID8gJz0gSSA9ICdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJy0tLS0tICd9YDtcblxuICAgICAgICAgICAgc3RyICs9IFwifCBcIi5yZXBlYXQoaW5kZW50KSArIHRleHQgKyBnZW5lcmF0ZUNvbnRyb2xUcmVlVGV4dERpYWdyYW0oY2hpbGQsIHR1cm5OdW1iZXIsIGluZGVudCArIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbn0iXX0=