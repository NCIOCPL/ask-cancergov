"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.matchIfDefined = exports.mismatch = exports.moveArrayItem = exports.randomlyPick = void 0;
/**
 * Randomly selects one item from an array with uniform probability.
 */
function randomlyPick(input) {
    return input[Math.floor(Math.random() * input.length)];
}
exports.randomlyPick = randomlyPick;
/**
 * Moves one item of an array in place and returns the mutated array.
 * @param arr - Array
 * @param from - Index of item to move
 * @param to - Index to move it to
 */
function moveArrayItem(arr, from, to) {
    arr.splice(to, 0, arr.splice(from, 1)[0]);
    return arr;
}
exports.moveArrayItem = moveArrayItem;
// TODO: API: remove
/**
 * Returns `true` if the value is defined and does not appear in the array.
 * @param value - Value
 * @param array - Array
 */
function mismatch(value, array) {
    return (value !== undefined && !array.includes(value));
}
exports.mismatch = mismatch;
// TODO: API: remove
/**
 * Returns `true` if the value is undefined or appears in the array.
 * @param value - Value
 * @param array - Array
 */
function matchIfDefined(value, array) {
    return (value === undefined || array.includes(value));
}
exports.matchIfDefined = matchIfDefined;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJyYXlVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9BcnJheVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7O0FBRUg7O0dBRUc7QUFDSCxTQUFnQixZQUFZLENBQUksS0FBVTtJQUN0QyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRkQsb0NBRUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLGFBQWEsQ0FBQyxHQUFVLEVBQUUsSUFBWSxFQUFFLEVBQVU7SUFDOUQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUMsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDO0FBSEQsc0NBR0M7QUFFRCxvQkFBb0I7QUFDcEI7Ozs7R0FJRztBQUNILFNBQWdCLFFBQVEsQ0FBQyxLQUFVLEVBQUUsS0FBWTtJQUM3QyxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRkQsNEJBRUM7QUFFRCxvQkFBb0I7QUFDcEI7Ozs7R0FJRztBQUNILFNBQWdCLGNBQWMsQ0FBQyxLQUFVLEVBQUUsS0FBWTtJQUNuRCxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUZELHdDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBSYW5kb21seSBzZWxlY3RzIG9uZSBpdGVtIGZyb20gYW4gYXJyYXkgd2l0aCB1bmlmb3JtIHByb2JhYmlsaXR5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tbHlQaWNrPFQ+KGlucHV0OiBUW10pOiBUIHtcbiAgICByZXR1cm4gaW5wdXRbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaW5wdXQubGVuZ3RoKV07XG59XG5cbi8qKlxuICogTW92ZXMgb25lIGl0ZW0gb2YgYW4gYXJyYXkgaW4gcGxhY2UgYW5kIHJldHVybnMgdGhlIG11dGF0ZWQgYXJyYXkuXG4gKiBAcGFyYW0gYXJyIC0gQXJyYXlcbiAqIEBwYXJhbSBmcm9tIC0gSW5kZXggb2YgaXRlbSB0byBtb3ZlXG4gKiBAcGFyYW0gdG8gLSBJbmRleCB0byBtb3ZlIGl0IHRvXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlQXJyYXlJdGVtKGFycjogYW55W10sIGZyb206IG51bWJlciwgdG86IG51bWJlcik6IGFueVtdIHtcbiAgICBhcnIuc3BsaWNlKHRvLCAwLCBhcnIuc3BsaWNlKGZyb20sIDEpWzBdKTtcbiAgICByZXR1cm4gYXJyO1xufVxuXG4vLyBUT0RPOiBBUEk6IHJlbW92ZVxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgZGVmaW5lZCBhbmQgZG9lcyBub3QgYXBwZWFyIGluIHRoZSBhcnJheS5cbiAqIEBwYXJhbSB2YWx1ZSAtIFZhbHVlXG4gKiBAcGFyYW0gYXJyYXkgLSBBcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWlzbWF0Y2godmFsdWU6IGFueSwgYXJyYXk6IGFueVtdKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFhcnJheS5pbmNsdWRlcyh2YWx1ZSkpO1xufVxuXG4vLyBUT0RPOiBBUEk6IHJlbW92ZVxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkIG9yIGFwcGVhcnMgaW4gdGhlIGFycmF5LlxuICogQHBhcmFtIHZhbHVlIC0gVmFsdWVcbiAqIEBwYXJhbSBhcnJheSAtIEFycmF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaElmRGVmaW5lZCh2YWx1ZTogYW55LCBhcnJheTogYW55W10pIHtcbiAgICByZXR1cm4gKHZhbHVlID09PSB1bmRlZmluZWQgfHwgYXJyYXkuaW5jbHVkZXModmFsdWUpKTtcbn1cbiJdfQ==