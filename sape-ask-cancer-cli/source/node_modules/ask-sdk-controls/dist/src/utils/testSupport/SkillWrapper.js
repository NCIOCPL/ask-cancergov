"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapRequestHandlerAsSkill = void 0;
const ask_sdk_core_1 = require("ask-sdk-core");
const Logger_1 = require("../../logging/Logger");
const log = new Logger_1.Logger('AskSdkControls:SkillWrapper');
/**
 * Wraps a single RequestHandler as a Skill for testing.
 *
 * The resulting Skill has a single requestHandler (the one provided) and a
 * default error handler that logs any internal error that may occur.
 *
 * @param requestHandler - Request handler
 */
function wrapRequestHandlerAsSkill(requestHandler) {
    const errorHandler = {
        canHandle() {
            return true;
        },
        handle(handlerInput, error) {
            log.error(`~~~~ Error handled: ${error.stack}`);
            const speakOutput = `Sorry, I had trouble doing what you asked. Please try again.`;
            return handlerInput.responseBuilder
                .speak(speakOutput)
                .reprompt(speakOutput)
                .getResponse();
        }
    };
    /*
     * The SkillBuilder acts as the entry point for your skill, routing all request and response
     * payloads to the handlers above. Make sure any new handlers or interceptors you've
     * defined are included below. The order matters - they're processed top to bottom.
     */
    const _handler = ask_sdk_core_1.SkillBuilders.custom()
        .addRequestHandlers(requestHandler)
        .addErrorHandlers(errorHandler);
    const skill = _handler.create();
    return skill;
}
exports.wrapRequestHandlerAsSkill = wrapRequestHandlerAsSkill;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2tpbGxXcmFwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3V0aWxzL3Rlc3RTdXBwb3J0L1NraWxsV3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7OztBQUVILCtDQUFnRztBQUNoRyxpREFBOEM7QUFFOUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxlQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUV0RDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IseUJBQXlCLENBQUMsY0FBOEI7SUFDcEUsTUFBTSxZQUFZLEdBQWlCO1FBQy9CLFNBQVM7WUFDTCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQ0QsTUFBTSxDQUFDLFlBQTBCLEVBQUUsS0FBWTtZQUMzQyxHQUFHLENBQUMsS0FBSyxDQUFDLHVCQUF1QixLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUNoRCxNQUFNLFdBQVcsR0FBRyw4REFBOEQsQ0FBQztZQUVuRixPQUFPLFlBQVksQ0FBQyxlQUFlO2lCQUM5QixLQUFLLENBQUMsV0FBVyxDQUFDO2lCQUNsQixRQUFRLENBQUMsV0FBVyxDQUFDO2lCQUNyQixXQUFXLEVBQUUsQ0FBQztRQUN2QixDQUFDO0tBQ0osQ0FBQztJQUVGOzs7O09BSUc7SUFFSCxNQUFNLFFBQVEsR0FDViw0QkFBYSxDQUFDLE1BQU0sRUFBRTtTQUNqQixrQkFBa0IsQ0FBQyxjQUFjLENBQUM7U0FDbEMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hDLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUE1QkQsOERBNEJDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRXJyb3JIYW5kbGVyLCBIYW5kbGVySW5wdXQsIFJlcXVlc3RIYW5kbGVyLCBTa2lsbCwgU2tpbGxCdWlsZGVycyB9IGZyb20gXCJhc2stc2RrLWNvcmVcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uLy4uL2xvZ2dpbmcvTG9nZ2VyJztcblxuY29uc3QgbG9nID0gbmV3IExvZ2dlcignQXNrU2RrQ29udHJvbHM6U2tpbGxXcmFwcGVyJyk7XG5cbi8qKlxuICogV3JhcHMgYSBzaW5nbGUgUmVxdWVzdEhhbmRsZXIgYXMgYSBTa2lsbCBmb3IgdGVzdGluZy5cbiAqXG4gKiBUaGUgcmVzdWx0aW5nIFNraWxsIGhhcyBhIHNpbmdsZSByZXF1ZXN0SGFuZGxlciAodGhlIG9uZSBwcm92aWRlZCkgYW5kIGFcbiAqIGRlZmF1bHQgZXJyb3IgaGFuZGxlciB0aGF0IGxvZ3MgYW55IGludGVybmFsIGVycm9yIHRoYXQgbWF5IG9jY3VyLlxuICpcbiAqIEBwYXJhbSByZXF1ZXN0SGFuZGxlciAtIFJlcXVlc3QgaGFuZGxlclxuICovXG5leHBvcnQgZnVuY3Rpb24gd3JhcFJlcXVlc3RIYW5kbGVyQXNTa2lsbChyZXF1ZXN0SGFuZGxlcjogUmVxdWVzdEhhbmRsZXIpOiBTa2lsbCB7XG4gICAgY29uc3QgZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXIgPSB7XG4gICAgICAgIGNhbkhhbmRsZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBoYW5kbGUoaGFuZGxlcklucHV0OiBIYW5kbGVySW5wdXQsIGVycm9yOiBFcnJvcikge1xuICAgICAgICAgICAgbG9nLmVycm9yKGB+fn5+IEVycm9yIGhhbmRsZWQ6ICR7ZXJyb3Iuc3RhY2t9YCk7XG4gICAgICAgICAgICBjb25zdCBzcGVha091dHB1dCA9IGBTb3JyeSwgSSBoYWQgdHJvdWJsZSBkb2luZyB3aGF0IHlvdSBhc2tlZC4gUGxlYXNlIHRyeSBhZ2Fpbi5gO1xuXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlcklucHV0LnJlc3BvbnNlQnVpbGRlclxuICAgICAgICAgICAgICAgIC5zcGVhayhzcGVha091dHB1dClcbiAgICAgICAgICAgICAgICAucmVwcm9tcHQoc3BlYWtPdXRwdXQpXG4gICAgICAgICAgICAgICAgLmdldFJlc3BvbnNlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBUaGUgU2tpbGxCdWlsZGVyIGFjdHMgYXMgdGhlIGVudHJ5IHBvaW50IGZvciB5b3VyIHNraWxsLCByb3V0aW5nIGFsbCByZXF1ZXN0IGFuZCByZXNwb25zZVxuICAgICAqIHBheWxvYWRzIHRvIHRoZSBoYW5kbGVycyBhYm92ZS4gTWFrZSBzdXJlIGFueSBuZXcgaGFuZGxlcnMgb3IgaW50ZXJjZXB0b3JzIHlvdSd2ZVxuICAgICAqIGRlZmluZWQgYXJlIGluY2x1ZGVkIGJlbG93LiBUaGUgb3JkZXIgbWF0dGVycyAtIHRoZXkncmUgcHJvY2Vzc2VkIHRvcCB0byBib3R0b20uXG4gICAgICovXG5cbiAgICBjb25zdCBfaGFuZGxlciA9XG4gICAgICAgIFNraWxsQnVpbGRlcnMuY3VzdG9tKClcbiAgICAgICAgICAgIC5hZGRSZXF1ZXN0SGFuZGxlcnMocmVxdWVzdEhhbmRsZXIpXG4gICAgICAgICAgICAuYWRkRXJyb3JIYW5kbGVycyhlcnJvckhhbmRsZXIpO1xuICAgIGNvbnN0IHNraWxsID0gX2hhbmRsZXIuY3JlYXRlKCk7XG4gICAgcmV0dXJuIHNraWxsO1xufVxuIl19