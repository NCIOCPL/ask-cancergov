"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkillTester = exports.TestInput = exports.testTurn = exports.testE2E = exports.simpleInvoke = exports.findControlByProperty = exports.findControlById = exports.waitForDebugger = void 0;
const tslib_1 = require("tslib");
const ask_sdk_core_1 = require("ask-sdk-core");
const chai_1 = require("chai");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const Logger_1 = require("../../logging/Logger");
const ControlHandler_1 = require("../../runtime/ControlHandler");
const IntentUtils_1 = require("../IntentUtils");
const SkillInvoker_1 = require("./SkillInvoker");
const SkillWrapper_1 = require("./SkillWrapper");
const ControlResult_1 = require("../../controls/ControlResult");
const log = new Logger_1.Logger('AskSdkControls:TestingUtils');
/**
 * Utility to sleep a short duration to give the debugger some time to get
 * ready. (otherwise a test will often run without hitting breakpoints)
 *
 * This is not necessary for vscode version 1.41.1 and above.
 */
let waitHasBeenDone = false;
function waitForDebugger() {
    if (!waitHasBeenDone) {
        Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, 500);
        waitHasBeenDone = true;
    }
}
exports.waitForDebugger = waitForDebugger;
/**
 * Find the control with the specified id in the control tree
 * @param rootControl - Root control
 * @param id - Control id to search for
 */
function findControlById(rootControl, id) {
    return find(rootControl, 'id', id);
}
exports.findControlById = findControlById;
/**
 * Find the control with the specified property name and value in the control tree
 * @param rootControl - Root control
 * @param property - Property name
 * @param value - Property value
 */
function findControlByProperty(rootControl, property, value) {
    return find(rootControl, property, value);
}
exports.findControlByProperty = findControlByProperty;
/**
 * find the first sub-object in an object that has key = value.
 * e.g. to locating something by id:  find(myobj, "key", "theKey")
 * `{a:[{b:{key: "theKey", "value": "1"}}]}` returns `{key: "theKey", "value": "1"}`
 * @param object - Object
 * @param key - Key
 * @param value - Value
 */
function find(object, key, value) {
    if (typeof (object) !== "object") {
        return undefined;
    }
    if (object === null) {
        return undefined;
    }
    const theValue = object[key];
    if (theValue !== undefined && lodash_1.default.isEqual(theValue, value)) {
        return object;
    }
    // eslint-disable-next-line no-prototype-builtins
    const kidKeys = Object.keys(object).filter(key => object.hasOwnProperty(key));
    for (const kidKey of kidKeys) {
        const childObj = object[kidKey];
        if (typeof (childObj) === "object") {
            const result = find(childObj, key, value);
            if (result !== undefined) {
                return result;
            }
        }
    }
    return undefined;
}
/**
 * Invokes the core handling method of ControlHandler
 *
 * Purpose:
 * - for unit-testing the handling functionality (without rendering).
 *
 * @param rootControl - Root control
 * @param input - Input
 */
async function simpleInvoke(rootControl, input) {
    const resultBuilder = new ControlResult_1.ControlResultBuilder();
    await ControlHandler_1.ControlHandler.handleCore(rootControl, input, resultBuilder);
    return resultBuilder.build();
}
exports.simpleInvoke = simpleInvoke;
/**
 * Tests a multi-turn script, verifying that the correct prompts are produced on
 * each turn.
 *
 * For finer-grained control, for assertions and breakpoints, use a sequence
 * of calls to `testTurn`.
 *
 * Each user turn comprises three entries:
 * 1. The user utterance. This is not a functional parameter is for
 *    documentation / readability.
 * 2. The input object for the turn. This should be synchronized with the user-utterance.
 * 3. The expected response for the turn: prompt, set of allowed prompts or
 *    TestResponse object.
 *
 * The user utterance and expected prompt can start with 'U: ' and 'A: ' to aid readability.
 * @param turns - Array of 3 entries per logical turn.  [utterance, Intent]
 */
async function testE2E(handler, turns) {
    const invoker = new SkillInvoker_1.SkillInvoker(SkillWrapper_1.wrapRequestHandlerAsSkill(handler));
    for (let counter = 0; counter < turns.length; counter += 3) {
        const userUtterance = turns[counter];
        const input = turns[counter + 1];
        const expectedResponse = turns[counter + 2];
        if (typeof userUtterance !== 'string') {
            throw new Error('user utterance not found');
        }
        if (typeof input !== 'object') {
            throw new Error('nlu object not found');
        }
        if (userUtterance.toLowerCase().startsWith('a:')) {
            throw new Error(`user utterance starts with A: -->${userUtterance}`);
        }
        await testTurn(invoker, userUtterance, input, expectedResponse);
    }
}
exports.testE2E = testE2E;
/**
 * Test a single turn through the complete runtime flow
 *
 * @param invoker - SkillInvoker
 * @param utterance - Utterance. This is only for documentation / readability.
 * @param input - Input object
 * @param expectedResponse - The expected response: prompt, set of allowed
 *    prompts or TestResponse object.
 */
async function testTurn(invoker, utterance, input, expectedResponse) {
    const testResponse = await invoker.invoke(input);
    if (Array.isArray(expectedResponse)) {
        chai_1.expect(lodash_1.default.includes(expectedResponse, testResponse.prompt)).equals(true);
    }
    else {
        const expectedPrompt = typeof expectedResponse === 'string' ? expectedResponse : expectedResponse.prompt;
        if (!expectedPrompt.toLowerCase().startsWith('a:')) {
            throw new Error(`test configuration error: Alexa prompt should start with A: -->${expectedResponse}`);
        }
        if (testResponse.prompt !== expectedPrompt &&
            testResponse.prompt !== expectedPrompt.substr(2).trimLeft()) {
            chai_1.expect(testResponse.prompt).equals(expectedPrompt);
        }
        if (expectedResponse.directive) {
            if (!lodash_1.default.isEqual(testResponse.directive, expectedResponse.directive)) {
                chai_1.expect(testResponse.directive).deep.equals(expectedResponse.directive);
            }
        }
    }
    return testResponse;
}
exports.testTurn = testTurn;
/**
 * Utility to create Input objects for use in tests.
 */
class TestInput {
    /**
     * Reset the turn counter.
     */
    static reset() {
        this.turnNumber = 1;
    }
    /**
     * Creates a ControlInput for a given Intent-name or complete Intent object.
     */
    static of(nameOrIntent) {
        const input = TestInput.intent(nameOrIntent);
        this.turnNumber++;
        return input;
    }
    /**
     * Creates a ControlInput for a given Intent-name and slots, or complete Intent object.
     */
    static intent(nameOrIntent, slotValues) {
        const request = wrapIntentAsIntentRequest(nameOrIntent, slotValues);
        return dummyControlInput(request);
    }
    // public static intentWithMultiValueSlots(nameOrIntent: string | Intent, slotValues?: { [k: string]: any }): ControlInput {
    //     const request = wrapIntentAsIntentRequest(nameOrIntent, slotValues);
    //     return dummyControlInput(request);
    // }
    /**
     * Creates a ControlInput representing a LaunchRequest.
     */
    static launchRequest() {
        const launchRequest = {
            type: 'LaunchRequest',
            requestId: 'amzn1.echo-api.request.69ba9cb0-bdac-476c-9e35-b7c4382ef039',
            timestamp: '2019-09-04T00:08:32Z',
            locale: 'en-US',
        };
        return dummyControlInput(launchRequest);
    }
    /**
     * Creates a ControlInput for an APL User Event.
     */
    static userEvent(userEvent) {
        return dummyControlInput(userEvent);
    }
}
exports.TestInput = TestInput;
TestInput.turnNumber = 1;
// TODO: API: unify with SkillInvoker
/**
 * Utility to run tests on a Skill or RequestHandler.
 */
class SkillTester {
    constructor(skillOrRequestHandler) {
        this.invoker = new SkillInvoker_1.SkillInvoker(skillOrRequestHandler);
    }
    async testTurn(utterance, input, expectedPrompt) {
        return testTurn(this.invoker, utterance, input, expectedPrompt);
    }
}
exports.SkillTester = SkillTester;
function makeRequestId() {
    // example from live skill:'amzn1.echo-api.request.69ba9cb0-bdac-476c-9e35-b7c4382ef039'
    const id = `amzn1.echo-api.request.${Math.round(Math.random() * 1000000000).toString()}`;
    return id;
}
function wrapIntentAsIntentRequest(nameOrIntent, slotValues) {
    const intent = typeof nameOrIntent === 'string' ? IntentUtils_1.IntentBuilder.of(nameOrIntent, slotValues) : nameOrIntent;
    const intentRequest = {
        type: 'IntentRequest',
        requestId: makeRequestId(),
        timestamp: '2019-09-04T00:08:32Z',
        locale: 'en-US',
        dialogState: 'STARTED',
        intent
    };
    return intentRequest;
}
function dummyRequestEnvelope(request) {
    if (request === undefined) {
        request = {
            type: 'IntentRequest',
            requestId: makeRequestId(),
            timestamp: '',
            dialogState: 'IN_PROGRESS',
            intent: {
                name: '',
                confirmationStatus: 'NONE'
            }
        };
    }
    return {
        version: '',
        session: {
            new: true,
            application: {
                applicationId: '',
            },
            sessionId: '',
            user: {
                userId: ''
            },
        },
        context: {
            System: {
                application: {
                    applicationId: ''
                },
                user: {
                    userId: '',
                },
                apiEndpoint: '',
                device: {
                    deviceId: '',
                    supportedInterfaces: {
                        'Display': {
                            templateVersion: "1.0",
                            markupVersion: "1.0"
                        },
                        "Alexa.Presentation.APL": {
                            runtime: {
                                maxVersion: "1.3"
                            }
                        }
                    }
                }
            },
        },
        request
    };
}
function dummyControlInput(request) {
    const handlerInput = {
        requestEnvelope: dummyRequestEnvelope(request),
        context: {},
        attributesManager: dummyAttributesManager,
        responseBuilder: dummyResponseBuilder,
        serviceClientFactory: undefined
    };
    return {
        handlerInput,
        request: handlerInput.requestEnvelope.request,
        turnNumber: TestInput.turnNumber,
        controls: {}
    };
}
const dummyAttributesManager = ask_sdk_core_1.AttributesManagerFactory.init({ requestEnvelope: dummyRequestEnvelope() });
const dummyResponseBuilder = ask_sdk_core_1.ResponseFactory.init();
//# sourceMappingURL=data:application/json;base64,