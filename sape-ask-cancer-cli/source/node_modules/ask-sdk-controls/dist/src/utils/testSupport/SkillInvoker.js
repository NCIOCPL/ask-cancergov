"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License').
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the 'license' file accompanying this file. This file is distributed
 * on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkillInvoker = void 0;
const SkillWrapper_1 = require("./SkillWrapper");
/**
 * Utility to invoke a Skill or RequestHandler for testing.
 *
 * This wrapper mimics the lifecycle of an ASK Skill using AWS Lambda
 * that is repeatedly invoked as a 'stateless' function which receives actual state
 * in the session attributes of the Request object.
 *
 */
class SkillInvoker {
    constructor(skillOrRequestHandler) {
        this.skill = ((skillOrRequestHandler.handle !== undefined) ? SkillWrapper_1.wrapRequestHandlerAsSkill(skillOrRequestHandler) : skillOrRequestHandler);
    }
    /**
     * Invoke the skill with a control-input object.
     * The control input is first converted to a RequestEnvelope(IntentRequest)
     *
     * @param input - Input
     * @returns [prompt ssml inner-text, reprompt ssml inner-text]
     */
    async invoke(input) {
        const envelope = input.handlerInput.requestEnvelope;
        envelope.session.attributes = this.sessionAttributes; // populate saved state
        // ********** INVOKE SKILL ****************
        const responseEnvelope = await this.skill.invoke(envelope, undefined);
        this.sessionAttributes = responseEnvelope.sessionAttributes; // save updated state
        const promptSSML = responseEnvelope.response.outputSpeech.ssml;
        const prompt = promptSSML.replace('<speak>', '').replace('</speak>', '');
        const repromptSSML = responseEnvelope.response.reprompt.outputSpeech.ssml;
        const reprompt = repromptSSML.replace('<speak>', '').replace('</speak>', '');
        const directive = responseEnvelope.response.directives;
        // const cardContent = (responseEnv.response.card as ui.SimpleCard).content;
        return {
            responseEnvelope,
            response: responseEnvelope.response,
            prompt,
            reprompt,
            directive
        };
    }
}
exports.SkillInvoker = SkillInvoker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2tpbGxJbnZva2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3V0aWxzL3Rlc3RTdXBwb3J0L1NraWxsSW52b2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7OztBQUlILGlEQUEyRDtBQUszRDs7Ozs7OztHQU9HO0FBQ0gsTUFBYSxZQUFZO0lBS3JCLFlBQVkscUJBQTZDO1FBQ3JELElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFFLHFCQUE2QixDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsd0NBQXlCLENBQUMscUJBQXVDLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQThCLENBQUMsQ0FBQztJQUMvSyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFvQjtRQUNwQyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQztRQUNwRCxRQUFRLENBQUMsT0FBUSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyx1QkFBdUI7UUFFOUUsMkNBQTJDO1FBQzNDLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFdEUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLENBQUMscUJBQXFCO1FBRWxGLE1BQU0sVUFBVSxHQUFJLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxZQUFvQyxDQUFDLElBQUksQ0FBQztRQUN4RixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXpFLE1BQU0sWUFBWSxHQUFLLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxRQUF3QixDQUFDLFlBQW9DLENBQUMsSUFBSSxDQUFDO1FBQ3BILE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFN0UsTUFBTSxTQUFTLEdBQTRCLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDaEYsNEVBQTRFO1FBQzVFLE9BQU87WUFDSCxnQkFBZ0I7WUFDaEIsUUFBUSxFQUFFLGdCQUFnQixDQUFDLFFBQVE7WUFDbkMsTUFBTTtZQUNOLFFBQVE7WUFDUixTQUFTO1NBQ1osQ0FBQztJQUNOLENBQUM7Q0FDSjtBQXpDRCxvQ0F5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBTa2lsbCwgUmVxdWVzdEhhbmRsZXIgfSBmcm9tICdhc2stc2RrLWNvcmUnO1xuaW1wb3J0IHsgdWksIERpcmVjdGl2ZSwgUmVzcG9uc2UsIFJlc3BvbnNlRW52ZWxvcGUgfSBmcm9tICdhc2stc2RrLW1vZGVsJztcbmltcG9ydCB7IHdyYXBSZXF1ZXN0SGFuZGxlckFzU2tpbGwgfSBmcm9tICcuL1NraWxsV3JhcHBlcic7XG5pbXBvcnQgeyBJQ29udHJvbElucHV0IH0gZnJvbSAnLi4vLi4vY29udHJvbHMvaW50ZXJmYWNlcy9JQ29udHJvbElucHV0JztcblxudHlwZSBUU2Vzc2lvbkF0dHJpYnV0ZXMgPSB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIFV0aWxpdHkgdG8gaW52b2tlIGEgU2tpbGwgb3IgUmVxdWVzdEhhbmRsZXIgZm9yIHRlc3RpbmcuXG4gKlxuICogVGhpcyB3cmFwcGVyIG1pbWljcyB0aGUgbGlmZWN5Y2xlIG9mIGFuIEFTSyBTa2lsbCB1c2luZyBBV1MgTGFtYmRhXG4gKiB0aGF0IGlzIHJlcGVhdGVkbHkgaW52b2tlZCBhcyBhICdzdGF0ZWxlc3MnIGZ1bmN0aW9uIHdoaWNoIHJlY2VpdmVzIGFjdHVhbCBzdGF0ZVxuICogaW4gdGhlIHNlc3Npb24gYXR0cmlidXRlcyBvZiB0aGUgUmVxdWVzdCBvYmplY3QuXG4gKlxuICovXG5leHBvcnQgY2xhc3MgU2tpbGxJbnZva2VyIHtcblxuICAgIHByaXZhdGUgc2Vzc2lvbkF0dHJpYnV0ZXM6IFRTZXNzaW9uQXR0cmlidXRlcztcbiAgICBwcml2YXRlIHNraWxsOiBTa2lsbDtcblxuICAgIGNvbnN0cnVjdG9yKHNraWxsT3JSZXF1ZXN0SGFuZGxlcjogU2tpbGwgfCBSZXF1ZXN0SGFuZGxlcikge1xuICAgICAgICB0aGlzLnNraWxsID0gKCgoc2tpbGxPclJlcXVlc3RIYW5kbGVyIGFzIGFueSkuaGFuZGxlICE9PSB1bmRlZmluZWQpID8gd3JhcFJlcXVlc3RIYW5kbGVyQXNTa2lsbChza2lsbE9yUmVxdWVzdEhhbmRsZXIgYXMgUmVxdWVzdEhhbmRsZXIpIDogc2tpbGxPclJlcXVlc3RIYW5kbGVyIGFzIFNraWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2UgdGhlIHNraWxsIHdpdGggYSBjb250cm9sLWlucHV0IG9iamVjdC5cbiAgICAgKiBUaGUgY29udHJvbCBpbnB1dCBpcyBmaXJzdCBjb252ZXJ0ZWQgdG8gYSBSZXF1ZXN0RW52ZWxvcGUoSW50ZW50UmVxdWVzdClcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbnB1dCAtIElucHV0XG4gICAgICogQHJldHVybnMgW3Byb21wdCBzc21sIGlubmVyLXRleHQsIHJlcHJvbXB0IHNzbWwgaW5uZXItdGV4dF1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgaW52b2tlKGlucHV0OiBJQ29udHJvbElucHV0KTogUHJvbWlzZTxUZXN0UmVzcG9uc2VPYmplY3Q+IHtcbiAgICAgICAgY29uc3QgZW52ZWxvcGUgPSBpbnB1dC5oYW5kbGVySW5wdXQucmVxdWVzdEVudmVsb3BlO1xuICAgICAgICBlbnZlbG9wZS5zZXNzaW9uIS5hdHRyaWJ1dGVzID0gdGhpcy5zZXNzaW9uQXR0cmlidXRlczsgLy8gcG9wdWxhdGUgc2F2ZWQgc3RhdGVcblxuICAgICAgICAvLyAqKioqKioqKioqIElOVk9LRSBTS0lMTCAqKioqKioqKioqKioqKioqXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlRW52ZWxvcGUgPSBhd2FpdCB0aGlzLnNraWxsLmludm9rZShlbnZlbG9wZSwgdW5kZWZpbmVkKTtcblxuICAgICAgICB0aGlzLnNlc3Npb25BdHRyaWJ1dGVzID0gcmVzcG9uc2VFbnZlbG9wZS5zZXNzaW9uQXR0cmlidXRlczsgLy8gc2F2ZSB1cGRhdGVkIHN0YXRlXG5cbiAgICAgICAgY29uc3QgcHJvbXB0U1NNTCA9IChyZXNwb25zZUVudmVsb3BlLnJlc3BvbnNlLm91dHB1dFNwZWVjaCBhcyB1aS5Tc21sT3V0cHV0U3BlZWNoKS5zc21sO1xuICAgICAgICBjb25zdCBwcm9tcHQgPSBwcm9tcHRTU01MLnJlcGxhY2UoJzxzcGVhaz4nLCAnJykucmVwbGFjZSgnPC9zcGVhaz4nLCAnJyk7XG5cbiAgICAgICAgY29uc3QgcmVwcm9tcHRTU01MID0gKChyZXNwb25zZUVudmVsb3BlLnJlc3BvbnNlLnJlcHJvbXB0IGFzIHVpLlJlcHJvbXB0KS5vdXRwdXRTcGVlY2ggYXMgdWkuU3NtbE91dHB1dFNwZWVjaCkuc3NtbDtcbiAgICAgICAgY29uc3QgcmVwcm9tcHQgPSByZXByb21wdFNTTUwucmVwbGFjZSgnPHNwZWFrPicsICcnKS5yZXBsYWNlKCc8L3NwZWFrPicsICcnKTtcblxuICAgICAgICBjb25zdCBkaXJlY3RpdmU6IERpcmVjdGl2ZVtdIHwgdW5kZWZpbmVkID0gcmVzcG9uc2VFbnZlbG9wZS5yZXNwb25zZS5kaXJlY3RpdmVzO1xuICAgICAgICAvLyBjb25zdCBjYXJkQ29udGVudCA9IChyZXNwb25zZUVudi5yZXNwb25zZS5jYXJkIGFzIHVpLlNpbXBsZUNhcmQpLmNvbnRlbnQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXNwb25zZUVudmVsb3BlLFxuICAgICAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlRW52ZWxvcGUucmVzcG9uc2UsXG4gICAgICAgICAgICBwcm9tcHQsXG4gICAgICAgICAgICByZXByb21wdCxcbiAgICAgICAgICAgIGRpcmVjdGl2ZVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIFRlc3RSZXNwb25zZU9iamVjdCB7XG4gICAgcmVzcG9uc2VFbnZlbG9wZTogUmVzcG9uc2VFbnZlbG9wZSxcbiAgICByZXNwb25zZTogUmVzcG9uc2UsXG4gICAgcHJvbXB0OiBzdHJpbmcsXG4gICAgcmVwcm9tcHQ/OiBzdHJpbmcsXG4gICAgZGlyZWN0aXZlPzogRGlyZWN0aXZlW11cbn1cbiJdfQ==