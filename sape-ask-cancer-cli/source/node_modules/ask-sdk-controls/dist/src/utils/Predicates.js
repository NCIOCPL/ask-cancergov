"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.falseIfGuardFailed = exports.failIf = exports.okIf = exports.GuardFailed = exports.StateConsistencyError = void 0;
/**
 * Represents that the state of a control is not consistent and cannot be used.
 */
class StateConsistencyError extends Error {
    constructor(message) {
        super(message);
        // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
        this.name = StateConsistencyError.name; // stack traces display correctly now
    }
}
exports.StateConsistencyError = StateConsistencyError;
/**
 * Represents that a predicate-guard expression failed.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 */
class GuardFailed extends Error {
    constructor(message) {
        super(message);
        // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
        this.name = GuardFailed.name; // stack traces display correctly now
    }
}
exports.GuardFailed = GuardFailed;
/**
 * Does nothing if the predicate is true. Otherwise throws GuardFailed error.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 */
function okIf(predicate) {
    if (!predicate) {
        throw new GuardFailed('okIf failed. predicate===false.');
    }
}
exports.okIf = okIf;
/**
 * Throws a GuardFailed error if predicate is true.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 * @param predicate - Predicate
 */
function failIf(predicate) {
    if (predicate) {
        throw new GuardFailed('failIf triggered. predicate===true.');
    }
}
exports.failIf = failIf;
/**
 * Consumes an GuardFailed error and returns false, but otherwise rethrows.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 *
 * @returns `false` if error is a `GuardFailed` error.
 * @throws Rethrows the error if it is not a `GuardFailed` error.
 */
function falseIfGuardFailed(err) {
    if (err instanceof GuardFailed) {
        return false;
    }
    throw err; // otherwise rethrow
}
exports.falseIfGuardFailed = falseIfGuardFailed;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJlZGljYXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9QcmVkaWNhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7O0FBR0g7O0dBRUc7QUFDSCxNQUFhLHFCQUFzQixTQUFRLEtBQUs7SUFDNUMsWUFBWSxPQUFnQjtRQUN4QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZiwwRUFBMEU7UUFDMUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLDBCQUEwQjtRQUM3RSxJQUFJLENBQUMsSUFBSSxHQUFHLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLHFDQUFxQztJQUNqRixDQUFDO0NBQ0o7QUFQRCxzREFPQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBYSxXQUFZLFNBQVEsS0FBSztJQUNsQyxZQUFZLE9BQWdCO1FBQ3hCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLDBFQUEwRTtRQUMxRSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsMEJBQTBCO1FBQzdFLElBQUksQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLHFDQUFxQztJQUN2RSxDQUFDO0NBQ0o7QUFQRCxrQ0FPQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsSUFBSSxDQUFDLFNBQWtCO0lBQ25DLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDWixNQUFNLElBQUksV0FBVyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7S0FDNUQ7QUFDTCxDQUFDO0FBSkQsb0JBSUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUFnQixNQUFNLENBQUMsU0FBa0I7SUFDckMsSUFBSSxTQUFTLEVBQUU7UUFDWCxNQUFNLElBQUksV0FBVyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7S0FDaEU7QUFDTCxDQUFDO0FBSkQsd0JBSUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLGtCQUFrQixDQUFDLEdBQVU7SUFDekMsSUFBSSxHQUFHLFlBQVksV0FBVyxFQUFFO1FBQzVCLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBQ0QsTUFBTSxHQUFHLENBQUMsQ0FBQyxvQkFBb0I7QUFDbkMsQ0FBQztBQUxELGdEQUtDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhhdCB0aGUgc3RhdGUgb2YgYSBjb250cm9sIGlzIG5vdCBjb25zaXN0ZW50IGFuZCBjYW5ub3QgYmUgdXNlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0YXRlQ29uc2lzdGVuY3lFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICAvLyBzZWU6IHR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL3JlbGVhc2Utbm90ZXMvdHlwZXNjcmlwdC0yLTIuaHRtbFxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpOyAvLyByZXN0b3JlIHByb3RvdHlwZSBjaGFpblxuICAgICAgICB0aGlzLm5hbWUgPSBTdGF0ZUNvbnNpc3RlbmN5RXJyb3IubmFtZTsgLy8gc3RhY2sgdHJhY2VzIGRpc3BsYXkgY29ycmVjdGx5IG5vd1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoYXQgYSBwcmVkaWNhdGUtZ3VhcmQgZXhwcmVzc2lvbiBmYWlsZWQuXG4gKlxuICogUHVycG9zZTpcbiAqICogVGhpcyBoZWxwcyB0byB3cml0ZSBwcmVkaWNhdGUgZnVuY3Rpb25zIGFzIGEgbGluZWFyIGNoYWluIG9mIGluZGl2aWR1YWwgdGVzdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBHdWFyZEZhaWxlZCBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICAvLyBzZWU6IHR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL3JlbGVhc2Utbm90ZXMvdHlwZXNjcmlwdC0yLTIuaHRtbFxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpOyAvLyByZXN0b3JlIHByb3RvdHlwZSBjaGFpblxuICAgICAgICB0aGlzLm5hbWUgPSBHdWFyZEZhaWxlZC5uYW1lOyAvLyBzdGFjayB0cmFjZXMgZGlzcGxheSBjb3JyZWN0bHkgbm93XG4gICAgfVxufVxuXG4vKipcbiAqIERvZXMgbm90aGluZyBpZiB0aGUgcHJlZGljYXRlIGlzIHRydWUuIE90aGVyd2lzZSB0aHJvd3MgR3VhcmRGYWlsZWQgZXJyb3IuXG4gKlxuICogUHVycG9zZTpcbiAqICogVGhpcyBoZWxwcyB0byB3cml0ZSBwcmVkaWNhdGUgZnVuY3Rpb25zIGFzIGEgbGluZWFyIGNoYWluIG9mIGluZGl2aWR1YWwgdGVzdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBva0lmKHByZWRpY2F0ZTogYm9vbGVhbikge1xuICAgIGlmICghcHJlZGljYXRlKSB7XG4gICAgICAgIHRocm93IG5ldyBHdWFyZEZhaWxlZCgnb2tJZiBmYWlsZWQuIHByZWRpY2F0ZT09PWZhbHNlLicpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBHdWFyZEZhaWxlZCBlcnJvciBpZiBwcmVkaWNhdGUgaXMgdHJ1ZS5cbiAqXG4gKiBQdXJwb3NlOlxuICogKiBUaGlzIGhlbHBzIHRvIHdyaXRlIHByZWRpY2F0ZSBmdW5jdGlvbnMgYXMgYSBsaW5lYXIgY2hhaW4gb2YgaW5kaXZpZHVhbCB0ZXN0cy5cbiAqIEBwYXJhbSBwcmVkaWNhdGUgLSBQcmVkaWNhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZhaWxJZihwcmVkaWNhdGU6IGJvb2xlYW4pIHtcbiAgICBpZiAocHJlZGljYXRlKSB7XG4gICAgICAgIHRocm93IG5ldyBHdWFyZEZhaWxlZCgnZmFpbElmIHRyaWdnZXJlZC4gcHJlZGljYXRlPT09dHJ1ZS4nKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ29uc3VtZXMgYW4gR3VhcmRGYWlsZWQgZXJyb3IgYW5kIHJldHVybnMgZmFsc2UsIGJ1dCBvdGhlcndpc2UgcmV0aHJvd3MuXG4gKlxuICogUHVycG9zZTpcbiAqICogVGhpcyBoZWxwcyB0byB3cml0ZSBwcmVkaWNhdGUgZnVuY3Rpb25zIGFzIGEgbGluZWFyIGNoYWluIG9mIGluZGl2aWR1YWwgdGVzdHMuXG4gKlxuICogQHJldHVybnMgYGZhbHNlYCBpZiBlcnJvciBpcyBhIGBHdWFyZEZhaWxlZGAgZXJyb3IuXG4gKiBAdGhyb3dzIFJldGhyb3dzIHRoZSBlcnJvciBpZiBpdCBpcyBub3QgYSBgR3VhcmRGYWlsZWRgIGVycm9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmFsc2VJZkd1YXJkRmFpbGVkKGVycjogRXJyb3IpOiBmYWxzZSB7XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIEd1YXJkRmFpbGVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhyb3cgZXJyOyAvLyBvdGhlcndpc2UgcmV0aHJvd1xufVxuIl19