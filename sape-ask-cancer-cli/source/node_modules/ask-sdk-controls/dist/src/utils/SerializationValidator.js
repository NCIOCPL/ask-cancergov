"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateSerializedState = void 0;
const Logger_1 = require("../logging/Logger");
const ControlHandler_1 = require("../runtime/ControlHandler");
const log = new Logger_1.Logger('AskSdkControls:SerializationValidator');
/**
 * Validates that the serialized state will survive the round-trip successfully.
 *
 * If round-trip fails, diagnostic information is printed to the console.
 * @param serializedState - Serialized state (a string in JSON format)
 * @param controlManager - Control manager
 * @param input - Input
 * @throws Error if round-trip fails.
 */
function validateSerializedState(serializedState, controlManager, input) {
    // perform deserialization
    const deserializedState = JSON.parse(serializedState);
    const rebuiltTopControl = controlManager.createControlTree(deserializedState);
    ControlHandler_1.attachStateToControlTree(rebuiltTopControl, deserializedState);
    // and then re-serialize to complete the round trip
    const roundTrippedUISerialized = JSON.stringify(ControlHandler_1.extractStateFromControlTree(rebuiltTopControl), null, 2);
    if (serializedState !== roundTrippedUISerialized) {
        log.info("serializedState did not survive the simulated round trip (deserialization into controlTree and re-serialization).");
        const lines1 = serializedState.split("\n");
        const lines2 = roundTrippedUISerialized.split("\n");
        if (lines1.length === lines2.length) {
            log.info("=================================================");
            for (const [i, line1] of lines1.entries()) {
                const line2 = lines2[i];
                if (line1 !== line2) {
                    log.info(`${i}: Expected: ${line1}`);
                    log.info(`${i}: Actual:   ${line2}`);
                }
            }
            log.info("=================================================");
        }
        else {
            log.info("Diff is complicated.. use a text differ on the following");
            log.info("=================================================");
            log.info(serializedState);
            log.info("=================================================");
            log.info("=================================================");
            log.info(roundTrippedUISerialized);
            log.info("=================================================");
            log.info("First diff:");
            for (const [i, line1] of lines1.entries()) {
                const line2 = lines2[i];
                if (line1 !== line2) {
                    log.info(`${i}: Expected: ${line1}`);
                    log.info(`${i}: Actual:   ${line2}`);
                    break;
                }
            }
        }
        throw new Error("Problem round-tripping JSON serialization (see logs above to obtain diff).  Do your custom controls have fromJson, new up correct type and pass all properties?");
    }
}
exports.validateSerializedState = validateSerializedState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VyaWFsaXphdGlvblZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9TZXJpYWxpemF0aW9uVmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7O0FBS0gsOENBQTJDO0FBQzNDLDhEQUFrRztBQUVsRyxNQUFNLEdBQUcsR0FBRyxJQUFJLGVBQU0sQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0FBRWhFOzs7Ozs7OztHQVFHO0FBQ0gsU0FBZ0IsdUJBQXVCLENBQUMsZUFBdUIsRUFBRSxjQUErQixFQUFFLEtBQW9CO0lBRWxILDBCQUEwQjtJQUMxQixNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdEQsTUFBTSxpQkFBaUIsR0FBYSxjQUFjLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUN4Rix5Q0FBd0IsQ0FBQyxpQkFBaUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBRS9ELG1EQUFtRDtJQUNuRCxNQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsNENBQTJCLENBQUMsaUJBQWlCLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFekcsSUFBSSxlQUFlLEtBQUssd0JBQXdCLEVBQUU7UUFDOUMsR0FBRyxDQUFDLElBQUksQ0FBQyxtSEFBbUgsQ0FBQyxDQUFDO1FBQzlILE1BQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsTUFBTSxNQUFNLEdBQUcsd0JBQXdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BELElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsbURBQW1ELENBQUMsQ0FBQztZQUM5RCxLQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUN2QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksS0FBSyxLQUFLLEtBQUssRUFBRTtvQkFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxLQUFLLEVBQUUsQ0FBQyxDQUFDO29CQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEtBQUssRUFBRSxDQUFDLENBQUM7aUJBQ3hDO2FBQ0o7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLG1EQUFtRCxDQUFDLENBQUM7U0FDakU7YUFDSTtZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsMERBQTBELENBQUMsQ0FBQztZQUNyRSxHQUFHLENBQUMsSUFBSSxDQUFDLG1EQUFtRCxDQUFDLENBQUM7WUFDOUQsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUMxQixHQUFHLENBQUMsSUFBSSxDQUFDLG1EQUFtRCxDQUFDLENBQUM7WUFDOUQsR0FBRyxDQUFDLElBQUksQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1lBQzlELEdBQUcsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztZQUNuQyxHQUFHLENBQUMsSUFBSSxDQUFDLG1EQUFtRCxDQUFDLENBQUM7WUFFOUQsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN4QixLQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUN2QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksS0FBSyxLQUFLLEtBQUssRUFBRTtvQkFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxLQUFLLEVBQUUsQ0FBQyxDQUFDO29CQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEtBQUssRUFBRSxDQUFDLENBQUM7b0JBQ3JDLE1BQU07aUJBQ1Q7YUFDSjtTQUNKO1FBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxpS0FBaUssQ0FBQyxDQUFDO0tBQ3RMO0FBQ0wsQ0FBQztBQS9DRCwwREErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBvciBpbiB0aGUgXCJsaWNlbnNlXCIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWRcbiAqIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJQ29udHJvbCB9IGZyb20gJy4uL2NvbnRyb2xzL2ludGVyZmFjZXMvSUNvbnRyb2wnO1xuaW1wb3J0IHsgSUNvbnRyb2xJbnB1dCB9IGZyb20gJy4uL2NvbnRyb2xzL2ludGVyZmFjZXMvSUNvbnRyb2xJbnB1dCc7XG5pbXBvcnQgeyBJQ29udHJvbE1hbmFnZXIgfSBmcm9tICcuLi9jb250cm9scy9pbnRlcmZhY2VzL0lDb250cm9sTWFuYWdlcic7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9sb2dnaW5nL0xvZ2dlcic7XG5pbXBvcnQgeyBhdHRhY2hTdGF0ZVRvQ29udHJvbFRyZWUsIGV4dHJhY3RTdGF0ZUZyb21Db250cm9sVHJlZSB9IGZyb20gJy4uL3J1bnRpbWUvQ29udHJvbEhhbmRsZXInO1xuXG5jb25zdCBsb2cgPSBuZXcgTG9nZ2VyKCdBc2tTZGtDb250cm9sczpTZXJpYWxpemF0aW9uVmFsaWRhdG9yJyk7XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoYXQgdGhlIHNlcmlhbGl6ZWQgc3RhdGUgd2lsbCBzdXJ2aXZlIHRoZSByb3VuZC10cmlwIHN1Y2Nlc3NmdWxseS5cbiAqXG4gKiBJZiByb3VuZC10cmlwIGZhaWxzLCBkaWFnbm9zdGljIGluZm9ybWF0aW9uIGlzIHByaW50ZWQgdG8gdGhlIGNvbnNvbGUuXG4gKiBAcGFyYW0gc2VyaWFsaXplZFN0YXRlIC0gU2VyaWFsaXplZCBzdGF0ZSAoYSBzdHJpbmcgaW4gSlNPTiBmb3JtYXQpXG4gKiBAcGFyYW0gY29udHJvbE1hbmFnZXIgLSBDb250cm9sIG1hbmFnZXJcbiAqIEBwYXJhbSBpbnB1dCAtIElucHV0XG4gKiBAdGhyb3dzIEVycm9yIGlmIHJvdW5kLXRyaXAgZmFpbHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNlcmlhbGl6ZWRTdGF0ZShzZXJpYWxpemVkU3RhdGU6IHN0cmluZywgY29udHJvbE1hbmFnZXI6IElDb250cm9sTWFuYWdlciwgaW5wdXQ6IElDb250cm9sSW5wdXQpOiB2b2lkIHtcblxuICAgIC8vIHBlcmZvcm0gZGVzZXJpYWxpemF0aW9uXG4gICAgY29uc3QgZGVzZXJpYWxpemVkU3RhdGUgPSBKU09OLnBhcnNlKHNlcmlhbGl6ZWRTdGF0ZSk7XG4gICAgY29uc3QgcmVidWlsdFRvcENvbnRyb2w6IElDb250cm9sID0gY29udHJvbE1hbmFnZXIuY3JlYXRlQ29udHJvbFRyZWUoZGVzZXJpYWxpemVkU3RhdGUpO1xuICAgIGF0dGFjaFN0YXRlVG9Db250cm9sVHJlZShyZWJ1aWx0VG9wQ29udHJvbCwgZGVzZXJpYWxpemVkU3RhdGUpO1xuXG4gICAgLy8gYW5kIHRoZW4gcmUtc2VyaWFsaXplIHRvIGNvbXBsZXRlIHRoZSByb3VuZCB0cmlwXG4gICAgY29uc3Qgcm91bmRUcmlwcGVkVUlTZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkoZXh0cmFjdFN0YXRlRnJvbUNvbnRyb2xUcmVlKHJlYnVpbHRUb3BDb250cm9sKSwgbnVsbCwgMik7XG5cbiAgICBpZiAoc2VyaWFsaXplZFN0YXRlICE9PSByb3VuZFRyaXBwZWRVSVNlcmlhbGl6ZWQpIHtcbiAgICAgICAgbG9nLmluZm8oXCJzZXJpYWxpemVkU3RhdGUgZGlkIG5vdCBzdXJ2aXZlIHRoZSBzaW11bGF0ZWQgcm91bmQgdHJpcCAoZGVzZXJpYWxpemF0aW9uIGludG8gY29udHJvbFRyZWUgYW5kIHJlLXNlcmlhbGl6YXRpb24pLlwiKTtcbiAgICAgICAgY29uc3QgbGluZXMxID0gc2VyaWFsaXplZFN0YXRlLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICBjb25zdCBsaW5lczIgPSByb3VuZFRyaXBwZWRVSVNlcmlhbGl6ZWQuc3BsaXQoXCJcXG5cIik7XG4gICAgICAgIGlmIChsaW5lczEubGVuZ3RoID09PSBsaW5lczIubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2cuaW5mbyhcIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cIik7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtpLCBsaW5lMV0gb2YgbGluZXMxLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUyID0gbGluZXMyW2ldO1xuICAgICAgICAgICAgICAgIGlmIChsaW5lMSAhPT0gbGluZTIpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLmluZm8oYCR7aX06IEV4cGVjdGVkOiAke2xpbmUxfWApO1xuICAgICAgICAgICAgICAgICAgICBsb2cuaW5mbyhgJHtpfTogQWN0dWFsOiAgICR7bGluZTJ9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nLmluZm8oXCI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nLmluZm8oXCJEaWZmIGlzIGNvbXBsaWNhdGVkLi4gdXNlIGEgdGV4dCBkaWZmZXIgb24gdGhlIGZvbGxvd2luZ1wiKTtcbiAgICAgICAgICAgIGxvZy5pbmZvKFwiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVwiKTtcbiAgICAgICAgICAgIGxvZy5pbmZvKHNlcmlhbGl6ZWRTdGF0ZSk7XG4gICAgICAgICAgICBsb2cuaW5mbyhcIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cIik7XG4gICAgICAgICAgICBsb2cuaW5mbyhcIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cIik7XG4gICAgICAgICAgICBsb2cuaW5mbyhyb3VuZFRyaXBwZWRVSVNlcmlhbGl6ZWQpO1xuICAgICAgICAgICAgbG9nLmluZm8oXCI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XCIpO1xuXG4gICAgICAgICAgICBsb2cuaW5mbyhcIkZpcnN0IGRpZmY6XCIpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBbaSwgbGluZTFdIG9mIGxpbmVzMS5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lMiA9IGxpbmVzMltpXTtcbiAgICAgICAgICAgICAgICBpZiAobGluZTEgIT09IGxpbmUyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy5pbmZvKGAke2l9OiBFeHBlY3RlZDogJHtsaW5lMX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nLmluZm8oYCR7aX06IEFjdHVhbDogICAke2xpbmUyfWApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm9ibGVtIHJvdW5kLXRyaXBwaW5nIEpTT04gc2VyaWFsaXphdGlvbiAoc2VlIGxvZ3MgYWJvdmUgdG8gb2J0YWluIGRpZmYpLiAgRG8geW91ciBjdXN0b20gY29udHJvbHMgaGF2ZSBmcm9tSnNvbiwgbmV3IHVwIGNvcnJlY3QgdHlwZSBhbmQgcGFzcyBhbGwgcHJvcGVydGllcz9cIik7XG4gICAgfVxufVxuXG4iXX0=