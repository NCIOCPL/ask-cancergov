/**
 * Represents that the state of a control is not consistent and cannot be used.
 */
export declare class StateConsistencyError extends Error {
    constructor(message?: string);
}
/**
 * Represents that a predicate-guard expression failed.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 */
export declare class GuardFailed extends Error {
    constructor(message?: string);
}
/**
 * Does nothing if the predicate is true. Otherwise throws GuardFailed error.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 */
export declare function okIf(predicate: boolean): void;
/**
 * Throws a GuardFailed error if predicate is true.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 * @param predicate - Predicate
 */
export declare function failIf(predicate: boolean): void;
/**
 * Consumes an GuardFailed error and returns false, but otherwise rethrows.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 *
 * @returns `false` if error is a `GuardFailed` error.
 * @throws Rethrows the error if it is not a `GuardFailed` error.
 */
export declare function falseIfGuardFailed(err: Error): false;
//# sourceMappingURL=Predicates.d.ts.map