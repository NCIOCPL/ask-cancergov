"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputUtil = void 0;
const Strings_1 = require("../constants/Strings");
const AmazonBuiltInIntent_1 = require("../intents/AmazonBuiltInIntent");
const GeneralControlIntent_1 = require("../intents/GeneralControlIntent");
const SingleValueControlIntent_1 = require("../intents/SingleValueControlIntent");
/**
 * Utilities to assist with input handling.
 */
var InputUtil;
(function (InputUtil) {
    /**
     * Test and assert if an object looks like an Intent.
     * (user-defined type guard)
     */
    function isIntentShape(x) {
        return (x.name !== undefined && x.confirmationStatus);
    }
    InputUtil.isIntentShape = isIntentShape;
    /**
     * Test if the input is a LaunchRequest.
     * @param input - Input
     */
    function isLaunchRequest(input) {
        return input.request.type === 'LaunchRequest';
    }
    InputUtil.isLaunchRequest = isLaunchRequest;
    /**
     * Test if the input is a SessionEndedRequest.
     * @param input - Input
     */
    function isSessionEndedRequest(input) {
        return input.request.type === 'SessionEndedRequest';
    }
    InputUtil.isSessionEndedRequest = isSessionEndedRequest;
    /**
     * Test if the input is an IntentRequest.
     * @param input - Input
     */
    function isIntent(input, intentName) {
        return input.request.type === 'IntentRequest' && input.request.intent.name === intentName;
    }
    InputUtil.isIntent = isIntent;
    /**
     * Test if the input is a SingleValueControlIntent for the provided slotType.
     * @param input - Input
     */
    function isSingleValueControlIntent(input, slotType) {
        return input.request.type === 'IntentRequest' && input.request.intent.name === SingleValueControlIntent_1.SingleValueControlIntent.intentName(slotType);
    }
    InputUtil.isSingleValueControlIntent = isSingleValueControlIntent;
    /**
     * Test if the input is an AMAZON.FallbackIntent.
     * @param input - Input
     */
    function isFallbackIntent(input) {
        return input.request.type === 'IntentRequest' && input.request.intent.name === 'AMAZON.FallbackIntent';
    }
    InputUtil.isFallbackIntent = isFallbackIntent;
    /**
     * Test if the input is an Alexa.Presentation.APL.UserEvent and has arguments.
     * @param input - Input
     */
    function isAPLUserEventWithArgs(input) {
        return input.request.type === 'Alexa.Presentation.APL.UserEvent' && input.request.arguments !== undefined && input.request.arguments.length > 0;
    }
    InputUtil.isAPLUserEventWithArgs = isAPLUserEventWithArgs;
    /**
     * Test if the input is an Alexa.Presentation.APL.UserEvent with a first
     * argument equal to the provided control ID.
     * @param input - Input
     */
    function isAPLUserEventWithMatchingControlId(input, controlId) {
        return isAPLUserEventWithArgs(input) && (input.request.arguments[0] === controlId);
    }
    InputUtil.isAPLUserEventWithMatchingControlId = isAPLUserEventWithMatchingControlId;
    /**
     * Test if the feedback is 'builtin_affirm'
     * @param feedback - Feedback slot value ID
     */
    // TODO: naming: improve name
    function feedbackIsTrue(feedback) {
        return (feedback === Strings_1.Strings.Feedback.Affirm);
    }
    InputUtil.feedbackIsTrue = feedbackIsTrue;
    /**
     * Test if the feedback is 'builtin_disaffirm'
     * @param feedback - Feedback slot value ID
     */
    // TODO: naming: improve name
    function feedbackIsFalse(feedback) {
        return (feedback === Strings_1.Strings.Feedback.Disaffirm);
    }
    InputUtil.feedbackIsFalse = feedbackIsFalse;
    /**
     * Test if the feedback is undefined
     * @param feedback - Feedback slot value ID
     */
    function feedbackIsUndefined(feedback) {
        return (feedback === undefined);
    }
    InputUtil.feedbackIsUndefined = feedbackIsUndefined;
    /**
     * Test if the feedback matches one of the provided identifiers, or is undefined.
     * @param feedback - Feedback slot value
     * @param feedbackIds - Feedback slot value IDs to match against
     */
    function feedbackIsMatchOrUndefined(feedback, feedbackIds) {
        return slotIsUndefinedOrMatch(feedback, feedbackIds);
    }
    InputUtil.feedbackIsMatchOrUndefined = feedbackIsMatchOrUndefined;
    /**
     * Test if the slot value matches one of the provided identifiers, or is undefined.
     * @param slotValue - Slot value ID
     * @param expectedValues - Slot value IDs to match against
     */
    function slotIsUndefinedOrMatch(slotValue, expectedValues) {
        return slotValue === undefined || expectedValues.includes(slotValue);
    }
    InputUtil.slotIsUndefinedOrMatch = slotIsUndefinedOrMatch;
    /**
     * Test if the action matches one of the provided identifiers, or is undefined.
     * @param action - Action slot value ID
     * @param expectedValues - Action slot value IDs to match against
     */
    function actionIsSetOrUndefined(action, expectedValues) {
        return slotIsUndefinedOrMatch(action, expectedValues);
    }
    InputUtil.actionIsSetOrUndefined = actionIsSetOrUndefined;
    /**
     * Test if the action is defined and matches one of the provided identifiers.
     * @param action - Action slot value ID
     * @param expectedValues - Action slot value IDs to match against
     */
    function actionIsMatch(action, expectedValues) {
        return action !== undefined && expectedValues.includes(action);
    }
    InputUtil.actionIsMatch = actionIsMatch;
    /**
     * Test if the action is undefined.
     * @param action - Action slot value ID
     */
    function actionIsUndefined(action) {
        return action === undefined;
    }
    InputUtil.actionIsUndefined = actionIsUndefined;
    /**
     * Test if the target is defined and matches one of the provided identifiers.
     * @param target - Target slot value ID
     * @param targetIds - Target slot value IDs to match against
     */
    function targetIsMatch(target, targetIds) {
        return target !== undefined && targetIds.includes(target);
    }
    InputUtil.targetIsMatch = targetIsMatch;
    /**
     * Test if the feedback is undefined.
     * @param target - Target slot value ID
     */
    function targetIsUndefined(target) {
        return target === undefined;
    }
    InputUtil.targetIsUndefined = targetIsUndefined;
    /**
     * Test if the target matches one of the provided identifiers, or is undefined.
     * @param target - Target slot value ID
     * @param targetIds - Target slot value IDs to match against
     */
    function targetIsMatchOrUndefined(target, targetIds) {
        return slotIsUndefinedOrMatch(target, targetIds);
    }
    InputUtil.targetIsMatchOrUndefined = targetIsMatchOrUndefined;
    /**
     * Test if the action matches one of the provided identifiers, or is undefined.
     * @param action - Action slot value ID
     * @param expectedValues - Action slot value IDs to match against
     */
    function actionIsMatchOrUndefined(action, actionIds) {
        return slotIsUndefinedOrMatch(action, actionIds);
    }
    InputUtil.actionIsMatchOrUndefined = actionIsMatchOrUndefined;
    /**
     * Test if the valueType is defined and matches the provided identifier.
     * @param valueType - ValueType slot value ID
     * @param expectedValueType - ValueType slot value ID to match against
     */
    function valueTypeMatch(valueType, expectedValueType) {
        return valueType !== undefined && valueType === expectedValueType;
    }
    InputUtil.valueTypeMatch = valueTypeMatch;
    /**
     * Test if the valueType is undefined.
     * @param valueType - ValueType slot value ID
     */
    function valueTypeIsUndefined(valueType) {
        return valueType === undefined;
    }
    InputUtil.valueTypeIsUndefined = valueTypeIsUndefined;
    /**
     * Test if the value is defined.
     *
     * A value of '?' is interpreted as being equal to undefined.  (A value of
     * '?' is produced by NLU when slot elicitation is used but the response
     * cannot be understood.)
     * @param value - Value
     */
    function valueStrDefined(value) {
        return value !== undefined && value !== '?';
    }
    InputUtil.valueStrDefined = valueStrDefined;
    /**
     * Test if the value is undefined.
     *
     * A value of '?' is interpreted as being equal to undefined.  (A value of
     * '?' is produced by NLU when slot elicitation is used but the response
     * cannot be understood.)
     * @param value - Value
     */
    function valueStrIsUndefined(value) {
        return value === undefined || value === '?';
    }
    InputUtil.valueStrIsUndefined = valueStrIsUndefined;
    /**
     * Test if the input is equivalent to simply saying "yes".
     *
     * @param input - Input
     *
     * @returns true if the input is:
     * - `AMAZON.YesIntent`, or,
     * - A `GeneralControlIntent` with `feedback = builtin_affirm` and no other
     *   filled.
     */
    function isBareYes(input) {
        if (input.request.type !== 'IntentRequest') {
            return false;
        }
        else if (input.request.intent.name === AmazonBuiltInIntent_1.AmazonIntent.YesIntent) {
            return true;
        }
        else if (input.request.intent.name === GeneralControlIntent_1.GeneralControlIntent.name) {
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            if (feedback === Strings_1.Strings.Feedback.Affirm && action === undefined && target === undefined) {
                return true;
            }
        }
        return false;
    }
    InputUtil.isBareYes = isBareYes;
    /**
     * Test if the input is equivalent to simply saying "no".
     *
     * @param input - Input
     *
     * @returns true if the input is:
     * - `AMAZON.NoIntent`, or,
     * - A `GeneralControlIntent` with `feedback = builtin_disaffirm` and no other
     *   filled.
     */
    function isBareNo(input) {
        if (input.request.type !== 'IntentRequest') {
            return false;
        }
        else if (input.request.intent.name === AmazonBuiltInIntent_1.AmazonIntent.NoIntent) {
            return true;
        }
        else if (input.request.intent.name === GeneralControlIntent_1.GeneralControlIntent.name) {
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            if (feedback === Strings_1.Strings.Feedback.Disaffirm && action === undefined && target === undefined) {
                return true;
            }
        }
        return false;
    }
    InputUtil.isBareNo = isBareNo;
    /**
     * Extracts the value and erMatch from a SingleValueControlIntent
     * @param input - Input
     */
    function getValueResolution(input) {
        const { valueStr, erMatch } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
        return { valueStr: valueStr, erMatch: erMatch };
    }
    InputUtil.getValueResolution = getValueResolution;
})(InputUtil = exports.InputUtil || (exports.InputUtil = {}));
//# sourceMappingURL=data:application/json;base64,