"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SingleValueControlIntent = exports.unpackSingleValueControlIntent = void 0;
const ModelTypes_1 = require("../interactionModelGeneration/ModelTypes");
const IntentUtils_1 = require("../utils/IntentUtils");
const BaseControlIntent_1 = require("./BaseControlIntent");
/**
 * Unpacks the complete intent object into a simpler representation.
 *
 * Note re "empty slots":
 * - Slots in the intent with no value appear in the intent object as "".
 *   However, these are unpacked as **`undefined`** to be more explicit and ease
 *   the implementation of predicates.
 * @param intent - Intent
 */
function unpackSingleValueControlIntent(intent) {
    if (!intent.name.endsWith('ControlIntent')) {
        throw new Error(`Not a ControlIntent: ${intent.name}`);
    }
    let action;
    let feedback;
    let target;
    let valueStr;
    let valueType;
    let erMatch;
    for (const [name, slot] of Object.entries(intent.slots)) {
        const slotObject = IntentUtils_1.getSlotResolutions(slot);
        const slotValue = slotObject !== undefined ? slotObject.slotValue : undefined;
        switch (name) {
            case 'action':
                action = slotValue;
                break;
            case 'feedback':
                feedback = slotValue;
                break;
            case 'target':
                target = slotValue;
                break;
            case 'head': break;
            case 'tail': break;
            case 'preposition': break;
            default:
                // did we already capture a value?
                if (valueType !== undefined) {
                    throw new Error('a SingleValueControlIntent should only have one value slot');
                }
                // treat it as a slot whose name is an NLU slot type.
                valueStr = slotValue;
                valueType = name;
                erMatch = slotObject !== undefined ? slotObject.isEntityResolutionMatch : undefined;
        }
    }
    if (valueStr === undefined) {
        throw new Error(`SingleValueControlIntent did not have value slot filled.  This should have mapped to GeneralControlIntent. intent: ${JSON.stringify(intent)}`);
    }
    return {
        feedback,
        action,
        target,
        valueStr,
        valueType,
        erMatch
    };
}
exports.unpackSingleValueControlIntent = unpackSingleValueControlIntent;
/**
 * Intent that conveys feedback, action, target and an AMAZON.Ordinal value
 *
 * The value slot will be named according to the Slot type.
 * - For example `{'AMAZON.NUMBER': '2'}` or  `{ 'AMAZON.Ordinal': 'first' }`
 *
 * Every sample utterance for a SingleValueControlIntent includes the value
 * slot.  Utterances that do not include a value slot are handled by
 * `GeneralControlIntent`.
 *
 * Limitations
 *  - `AMAZON.SearchQuery` cannot be used due to restrictions in NLU. Custom
 *    intents should be defined instead.
 */
class SingleValueControlIntent extends BaseControlIntent_1.BaseControlIntent {
    constructor(valueSlotType) {
        super();
        if (valueSlotType === 'AMAZON.SearchQuery') {
            throw new Error('AMAZON.SearchQuery cannot be used with SingleValueControlIntent due to the special rules regarding its use. '
                + 'Specifically, utterances that include SearchQuery must have a carrier phrase and not be comprised entirely of slot references.');
        }
        this.valueSlotType = valueSlotType;
        this.name = SingleValueControlIntent.intentName(valueSlotType);
    }
    /**
     * Generates the intent name of a specialized `SingleValueControlIntent`.
     *
     * Example:
     * - The intent name for a `SingleValueControlIntent` that conveys an
     *   `AMAZON.NUMBER` is `AMAZON_NUMBER_ValueControlIntent`.
     *
     * @param slotTypeId - Specific slot type id.
     */
    static intentName(slotTypeId) {
        return `${slotTypeId}_ValueControlIntent`.replace('.', '_');
    }
    /**
     * Create Intent from specification of the slots
     *
     * Usage:
     *  * the value should be provided as a property with name = <SlotType>
     *
     * Examples:
     * - AMAZON.NUMBER:
     * ```
     * {
     *    name: AMAZON_NUMBER_ValueControlIntent
     *    slots: { target: 'count', 'AMAZON.NUMBER': '2' }
     *    confirmationStatus: 'NONE'
     * }
     * ```
     * - AMAZON.Ordinal:
     * ```
     * {
     *    name: AMAZON_ORDINAL_ValueControlIntent
     *    slots: { action: 'set', 'AMAZON.Ordinal': 'first'}
     *    confirmationStatus: 'NONE'
     * }
     * ```
     */
    static of(slotType, slots) {
        return IntentUtils_1.IntentBuilder.of(SingleValueControlIntent.intentName(slotType), slots);
    }
    // tsDoc: see BaseControlIntent
    generateIntent() {
        return {
            name: this.name,
            slots: this.generateSlots(),
            samples: [],
        };
    }
    generateSlots() {
        const slots = [
            {
                name: 'feedback',
                type: ModelTypes_1.SharedSlotType.FEEDBACK
            },
            {
                name: 'action',
                type: ModelTypes_1.SharedSlotType.ACTION
            },
            {
                name: 'target',
                type: ModelTypes_1.SharedSlotType.TARGET
            },
            {
                name: 'preposition',
                type: ModelTypes_1.SharedSlotType.PREPOSITION
            },
            {
                name: 'head',
                type: ModelTypes_1.SharedSlotType.HEAD
            },
            {
                name: 'tail',
                type: ModelTypes_1.SharedSlotType.TAIL
            },
            {
                name: `${this.valueSlotType}`,
                type: `${this.valueSlotType}`
            }
        ];
        return slots;
    }
}
exports.SingleValueControlIntent = SingleValueControlIntent;
//# sourceMappingURL=data:application/json;base64,