"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConjunctionControlIntent = exports.generateActionTaskPairs = exports.areConjunctionIntentSlotsValid = exports.hasOneOrMoreActions = exports.hasOneOrMoreTargets = exports.unpackConjunctionControlIntent = void 0;
const IntentUtils_1 = require("../utils/IntentUtils");
const ModelTypes_1 = require("../interactionModelGeneration/ModelTypes");
const BaseControlIntent_1 = require("./BaseControlIntent");
/**
 * Unpacks the complete intent object into a simpler representation.
 *
 * Note re "empty slots":
 * - Slots in the intent with no value appear in the intent object as "".
 *   However, these are unpacked as **`undefined`** to be more explicit and ease
 *   the implementation of predicates.
 * @param intent - Intent
 */
function unpackConjunctionControlIntent(intent) {
    if (!intent.name.startsWith('ConjunctionControlIntent')) {
        throw new Error(`Not a compatible intent : ${intent.name}`);
    }
    let feedback;
    let action;
    let target;
    let actionA;
    let targetA;
    let actionB;
    let targetB;
    for (const [name, slot] of Object.entries(intent.slots)) {
        const slotObject = IntentUtils_1.getSlotResolutions(slot);
        const slotValue = slotObject ? slotObject.slotValue : undefined;
        switch (name) {
            case 'feedback':
                feedback = slotValue;
                break;
            case 'action':
                action = slotValue;
                break;
            case 'target':
                target = slotValue;
                break;
            case 'action.a':
                actionA = slotValue;
                break;
            case 'target.a':
                targetA = slotValue;
                break;
            case 'action.b':
                actionB = slotValue;
                break;
            case 'target.b':
                targetB = slotValue;
                break;
            case 'head': break;
            case 'tail': break;
            case 'preposition': break;
            case 'conjunction': break;
            default: throw new Error('not handled');
        }
    }
    return {
        feedback,
        action,
        target,
        'action.a': actionA,
        'target.a': targetA,
        'action.b': actionB,
        'target.b': targetB,
    };
}
exports.unpackConjunctionControlIntent = unpackConjunctionControlIntent;
// TODO: refactor: move these to be members of the ConjunctionControlIntentSlots type
function hasOneOrMoreTargets(input) {
    if (!input) {
        return false;
    }
    if (input.target !== undefined || input['target.a'] !== undefined || input['target.b'] !== undefined) {
        return true;
    }
    return false;
}
exports.hasOneOrMoreTargets = hasOneOrMoreTargets;
function hasOneOrMoreActions(input) {
    if (!input) {
        return false;
    }
    if (input['action.a'] !== undefined || input['action.b'] !== undefined || input.action !== undefined) {
        return true;
    }
    return false;
}
exports.hasOneOrMoreActions = hasOneOrMoreActions;
function areConjunctionIntentSlotsValid(input) {
    if (!input) {
        return false;
    }
    // priorityRule, when action / target , no actionA, actionB, no targetA, targetB
    if (input.action !== undefined) {
        if (input["action.a"] !== undefined || input["action.b"] !== undefined) {
            return false;
        }
    }
    if (input.target !== undefined) {
        if (input['target.a'] !== undefined || input['target.b'] !== undefined) {
            return false;
        }
    }
    // pairRule, if .a exist, then .b must exist. Vice versa
    if ((input['action.a'] !== undefined && input['action.b'] === undefined) || (input['action.b'] !== undefined && input['action.a'] === undefined)) {
        return false;
    }
    if ((input['target.a'] !== undefined && input['target.b'] === undefined) || (input['target.b'] !== undefined && input['target.a'] === undefined)) {
        return false;
    }
    // when only one target, don't allow two action
    if (input.target !== undefined && input["action.a"] !== undefined && input["action.b"] !== undefined) {
        return false;
    }
    // only target is not allowed
    if (input.action === undefined && input["action.a"] === undefined) {
        return false;
    }
    return true;
}
exports.areConjunctionIntentSlotsValid = areConjunctionIntentSlotsValid;
function generateActionTaskPairs(input) {
    const inputs = [];
    const inputA = {
        action: '',
        target: '',
    };
    const inputB = {
        action: '',
        target: '',
    };
    if (hasOneOrMoreActions(input)) {
        // 1. Action exist
        if (input.action !== undefined) {
            inputA.action = input.action;
            inputB.action = input.action;
        }
        else { // two action
            inputA.action = input['action.a'];
            inputB.action = input['action.b'];
        }
        if (hasOneOrMoreTargets(input)) {
            // 1.1 Target exist
            if (input.target !== undefined) {
                inputA.target = input.target;
                inputB.target = input.target;
            }
            else {
                inputA.target = input['target.a'];
                inputB.target = input['target.b'];
            }
        }
    }
    // remove duplicate
    if (inputA.action === inputB.action && inputA.target === inputB.target) {
        inputs.push(inputA);
    }
    else {
        inputs.push(inputA);
        inputs.push(inputB);
    }
    return inputs;
}
exports.generateActionTaskPairs = generateActionTaskPairs;
/**
 * Intent that conveys feedback, up to two actions, and up two targets.
 *
 * This intent is a generalization of GeneralControlIntent that can convey more
 * information. It is used to convey the intent of utterances such as
 * "Change both the start and end date"
 */
class ConjunctionControlIntent extends BaseControlIntent_1.BaseControlIntent {
    /**
     * Create Intent from specification of the slots
     */
    static of(slots) {
        return IntentUtils_1.IntentBuilder.of(this.prototype.constructor.name, slots);
    }
    // tsDoc: see BaseControlIntent
    generateIntent() {
        return {
            name: this.name,
            slots: this.generateSlots(),
            samples: []
        };
    }
    generateSlots() {
        const slots = [
            {
                name: 'feedback',
                type: ModelTypes_1.SharedSlotType.FEEDBACK
            },
            {
                name: 'action',
                type: ModelTypes_1.SharedSlotType.ACTION
            },
            {
                name: 'conjunction',
                type: ModelTypes_1.SharedSlotType.CONJUNCTION
            },
            {
                name: 'target.a',
                type: ModelTypes_1.SharedSlotType.TARGET
            },
            {
                name: 'target.b',
                type: ModelTypes_1.SharedSlotType.TARGET
            },
            {
                name: 'head',
                type: ModelTypes_1.SharedSlotType.HEAD
            },
            {
                name: 'tail',
                type: ModelTypes_1.SharedSlotType.TAIL
            }
        ];
        return slots;
    }
}
exports.ConjunctionControlIntent = ConjunctionControlIntent;
//# sourceMappingURL=data:application/json;base64,