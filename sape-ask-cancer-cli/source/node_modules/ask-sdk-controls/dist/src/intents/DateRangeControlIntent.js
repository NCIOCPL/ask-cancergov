"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateRangeControlIntent = exports.validateControlInput = exports.hasOneOrMoreValues = exports.hasOneOrMoreActions = exports.hasOneOrMoreTargets = exports.unpackDateRangeControlIntent = void 0;
const ModelTypes_1 = require("../interactionModelGeneration/ModelTypes");
const IntentUtils_1 = require("../utils/IntentUtils");
const AmazonBuiltInSlotType_1 = require("./AmazonBuiltInSlotType");
const BaseControlIntent_1 = require("./BaseControlIntent");
/**
 * Unpacks the complete intent object into a simpler representation.
 *
 * Note re "empty slots":
 * - Slots in the intent with no value appear in the intent object as "".
 *   However, these are unpacked as **`undefined`** to be more explicit and ease
 *   the implementation of predicates.
 * @param intent - Intent
 */
function unpackDateRangeControlIntent(intent) {
    if (!intent.name.startsWith('DateRangeControlIntent')) {
        throw new Error(`Not an DateRangeControlIntent: ${intent.name}`);
    }
    let feedback;
    let action;
    let target;
    let amazonDate;
    let actionA;
    let targetA;
    let amazonDateA;
    let actionB;
    let targetB;
    let amazonDateB;
    for (const [name, slot] of Object.entries(intent.slots)) {
        const slotObject = IntentUtils_1.getSlotResolutions(slot);
        const slotValue = slotObject ? slotObject.slotValue : undefined;
        switch (name) {
            case 'feedback':
                feedback = slotValue;
                break;
            case 'action':
                action = slotValue;
                break;
            case 'target':
                target = slotValue;
                break;
            case 'AMAZON.DATE': {
                amazonDate = slotValue;
                break;
            }
            case 'action.a':
                actionA = slotValue;
                break;
            case 'target.a':
                targetA = slotValue;
                break;
            case 'AMAZON.DATE.a': {
                amazonDateA = slotValue;
                break;
            }
            case 'action.b':
                actionB = slotValue;
                break;
            case 'target.b':
                targetB = slotValue;
                break;
            case 'AMAZON.DATE.b': {
                amazonDateB = slotValue;
                break;
            }
            case 'head': break;
            case 'tail': break;
            case 'conjunction': break;
            case 'preposition.a': break;
            case 'preposition.b': break;
            default: break;
        }
    }
    return {
        feedback,
        action,
        target,
        'AMAZON.DATE': amazonDate,
        'action.a': actionA,
        'target.a': targetA,
        'AMAZON.DATE.a': amazonDateA,
        'action.b': actionB,
        'target.b': targetB,
        'AMAZON.DATE.b': amazonDateB
    };
}
exports.unpackDateRangeControlIntent = unpackDateRangeControlIntent;
function hasOneOrMoreTargets(input) {
    if (!input) {
        return false;
    }
    if (input.target !== undefined || (input['target.a'] !== undefined && input['target.b'] !== undefined)) {
        return true;
    }
    return false;
}
exports.hasOneOrMoreTargets = hasOneOrMoreTargets;
function hasOneOrMoreActions(input) {
    if (!input) {
        return false;
    }
    if (input['action.a'] !== undefined || input['action.b'] !== undefined || input.action !== undefined) {
        return true;
    }
    return false;
}
exports.hasOneOrMoreActions = hasOneOrMoreActions;
function hasOneOrMoreValues(input) {
    if (!input) {
        return false;
    }
    if (input['AMAZON.DATE.a'] !== undefined || input['AMAZON.DATE.b'] !== undefined || input['AMAZON.DATE'] !== undefined) {
        return true;
    }
    return false;
}
exports.hasOneOrMoreValues = hasOneOrMoreValues;
function validateControlInput(input) {
    if (!input) {
        return false;
    }
    // priorityRule, when action / target / Amazon.Date exist, no actionA, actionB, no targetA, targetB, no Amazon.Date.a, Amazon.Date.b
    if (input.action !== undefined) {
        if (input["action.a"] !== undefined || input["action.b"] !== undefined) {
            return false;
        }
    }
    if (input.target !== undefined) {
        if (input['target.a'] !== undefined || input['target.b'] !== undefined) {
            return false;
        }
    }
    if (input['AMAZON.DATE'] !== undefined) {
        if (input['AMAZON.DATE.a'] !== undefined || input['AMAZON.DATE.b'] !== undefined) {
            return false;
        }
        if (!(input['target.a'] !== undefined && input['target.b'] !== undefined)) {
            return false;
        }
    }
    // pairRule, if .a exist, then .b must exist. Vice versa
    if ((input['action.a'] !== undefined && input['action.b'] === undefined) || (input['action.b'] !== undefined && input['action.a'] === undefined)) {
        return false;
    }
    if ((input['target.a'] !== undefined && input['target.b'] === undefined) || (input['target.b'] !== undefined && input['target.a'] === undefined)) {
        return false;
    }
    if ((input['AMAZON.DATE.a'] !== undefined && input['AMAZON.DATE.b'] === undefined) || (input['AMAZON.DATE.b'] !== undefined && input['AMAZON.DATE.a'] === undefined)) {
        return false;
    }
    // For DateRangeControlIntent, value must exist
    if (input['AMAZON.DATE'] === undefined && input['AMAZON.DATE.a'] === undefined) {
        return false;
    }
    return true;
}
exports.validateControlInput = validateControlInput;
/**
 * Intent that conveys feedback, action, target and two AMAZON.DATE values.
 */
class DateRangeControlIntent extends BaseControlIntent_1.BaseControlIntent {
    /**
     * Create Intent from specification of the slots
     */
    static of(slots) {
        return IntentUtils_1.IntentBuilder.of(this.prototype.constructor.name, slots);
    }
    // tsDoc: see BaseControlIntent
    generateIntent() {
        return {
            name: this.name,
            slots: this.generateSlots(),
            samples: [],
        };
    }
    generateSlots() {
        const slots = [
            {
                name: 'feedback',
                type: ModelTypes_1.SharedSlotType.FEEDBACK
            },
            {
                name: 'action',
                type: ModelTypes_1.SharedSlotType.ACTION
            },
            {
                name: 'target',
                type: ModelTypes_1.SharedSlotType.TARGET
            },
            {
                name: 'preposition.a',
                type: ModelTypes_1.SharedSlotType.PREPOSITION
            },
            {
                name: 'preposition.b',
                type: ModelTypes_1.SharedSlotType.PREPOSITION
            },
            {
                name: 'conjunction',
                type: ModelTypes_1.SharedSlotType.CONJUNCTION
            },
            {
                name: 'target.a',
                type: ModelTypes_1.SharedSlotType.TARGET
            },
            {
                name: 'AMAZON.DATE.a',
                type: AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.DATE
            },
            {
                name: 'target.b',
                type: ModelTypes_1.SharedSlotType.TARGET
            },
            {
                name: 'AMAZON.DATE.b',
                type: AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.DATE
            },
            {
                name: 'head',
                type: ModelTypes_1.SharedSlotType.HEAD
            },
            {
                name: 'tail',
                type: ModelTypes_1.SharedSlotType.TAIL
            }
        ];
        return slots;
    }
}
exports.DateRangeControlIntent = DateRangeControlIntent;
//# sourceMappingURL=data:application/json;base64,