"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrdinalControlIntent = exports.unpackOrdinalControlIntent = void 0;
const ModelTypes_1 = require("../interactionModelGeneration/ModelTypes");
const IntentUtils_1 = require("../utils/IntentUtils");
const AmazonBuiltInSlotType_1 = require("./AmazonBuiltInSlotType");
const BaseControlIntent_1 = require("./BaseControlIntent");
/**
 * Unpacks the complete intent object into a simpler representation.
 *
 * Note re "empty slots":
 * - Slots in the intent with no value appear in the intent object as "".
 *   However, these are unpacked as **`undefined`** to be more explicit and ease
 *   the implementation of predicates.
 * @param intent - Intent
 */
function unpackOrdinalControlIntent(intent) {
    if (!intent.name.startsWith('OrdinalControlIntent')) {
        throw new Error(`Not a compatible intent: ${intent.name}`);
    }
    let action;
    let feedback;
    let target;
    let valueStr;
    for (const [name, slot] of Object.entries(intent.slots)) {
        const slotObject = IntentUtils_1.getSlotResolutions(slot);
        const slotValue = slotObject ? slotObject.slotValue : undefined;
        switch (name) {
            case 'feedback':
                feedback = slotValue !== undefined ? slotValue : undefined;
                break;
            case 'action':
                action = slotValue !== undefined ? slotValue : undefined;
                break;
            case 'target':
                target = slotValue !== undefined ? slotValue : undefined;
                break;
            case 'AMAZON.Ordinal':
                valueStr = slotValue !== undefined ? slotValue : undefined;
                break;
            // default: ignore content-free slots
        }
    }
    return {
        feedback,
        action,
        target,
        'AMAZON.Ordinal': valueStr
    };
}
exports.unpackOrdinalControlIntent = unpackOrdinalControlIntent;
/**
 * Intent that conveys feedback, action, target and an AMAZON.Ordinal value
 *
 * This general-purpose intent conveys the intent for utterances such as:
 * - "The time"
 * - "Change the date"
 * - "Yes, that one"
 * - "No, change the event date"
 */
class OrdinalControlIntent extends BaseControlIntent_1.BaseControlIntent {
    /**
     * Create Intent from specification of the slots
     */
    static of(slots) {
        return IntentUtils_1.IntentBuilder.of(this.prototype.constructor.name, slots);
    }
    // tsDoc: see BaseControlIntent
    generateIntent() {
        return {
            name: this.name,
            slots: this.generateSlots(),
            samples: [],
        };
    }
    generateSlots() {
        const slots = [
            {
                name: 'feedback',
                type: ModelTypes_1.SharedSlotType.FEEDBACK
            },
            {
                name: 'action',
                type: ModelTypes_1.SharedSlotType.ACTION
            },
            {
                name: 'target',
                type: ModelTypes_1.SharedSlotType.TARGET
            },
            {
                name: 'AMAZON.Ordinal',
                type: AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.ORDINAL
            },
            {
                name: 'preposition',
                type: ModelTypes_1.SharedSlotType.PREPOSITION
            },
            {
                name: 'head',
                type: ModelTypes_1.SharedSlotType.HEAD
            },
            {
                name: 'tail',
                type: ModelTypes_1.SharedSlotType.TAIL
            }
        ];
        return slots;
    }
}
exports.OrdinalControlIntent = OrdinalControlIntent;
//# sourceMappingURL=data:application/json;base64,