"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneralControlIntent = exports.unpackGeneralControlIntent = void 0;
const ModelTypes_1 = require("../interactionModelGeneration/ModelTypes");
const IntentUtils_1 = require("../utils/IntentUtils");
const BaseControlIntent_1 = require("./BaseControlIntent");
/**
 * Unpacks the complete intent object into a simpler representation.
 *
 * Note re "empty slots":
 * - Slots in the intent with no value appear in the intent object as "".
 *   However, these are unpacked as **`undefined`** to be more explicit and ease
 *   the implementation of predicates.
 * @param intent - Intent
 */
function unpackGeneralControlIntent(intent) {
    if (!intent.name.startsWith('GeneralControlIntent')) {
        throw new Error(`Not a compatible intent : ${intent.name}`);
    }
    let feedback;
    let action;
    let target;
    for (const [name, slot] of Object.entries(intent.slots)) {
        const slotObject = IntentUtils_1.getSlotResolutions(slot);
        const slotValue = slotObject ? slotObject.slotValue : undefined;
        switch (name) {
            case 'feedback':
                feedback = slotValue;
                break;
            case 'action':
                action = slotValue;
                break;
            case 'target':
                target = slotValue;
                break;
            case 'head': break;
            case 'tail': break;
            default: throw new Error('not handled');
        }
    }
    return {
        feedback,
        action,
        target,
    };
}
exports.unpackGeneralControlIntent = unpackGeneralControlIntent;
/**
 * Intent that conveys feedback, action, and target but no value.
 *
 * This general-purpose intent conveys the intent for utterances such as:
 * - "The time"
 * - "Change the date"
 * - "Yes, that one"
 * - "No, change the event date"
 */
class GeneralControlIntent extends BaseControlIntent_1.BaseControlIntent {
    /**
     * Create Intent from specification of the slots
     */
    static of(slots) {
        return IntentUtils_1.IntentBuilder.of(this.prototype.constructor.name, slots);
    }
    // tsDoc: see BaseControlIntent
    generateIntent() {
        return {
            name: this.name,
            slots: this.generateSlots(),
            samples: [],
        };
    }
    generateSlots() {
        const slots = [
            {
                name: 'feedback',
                type: ModelTypes_1.SharedSlotType.FEEDBACK,
            },
            {
                name: 'action',
                type: ModelTypes_1.SharedSlotType.ACTION
            },
            {
                name: 'target',
                type: ModelTypes_1.SharedSlotType.TARGET
            },
            {
                name: 'head',
                type: ModelTypes_1.SharedSlotType.HEAD
            },
            {
                name: 'tail',
                type: ModelTypes_1.SharedSlotType.TAIL
            }
        ];
        return slots;
    }
}
exports.GeneralControlIntent = GeneralControlIntent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2VuZXJhbENvbnRyb2xJbnRlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZW50cy9HZW5lcmFsQ29udHJvbEludGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7OztBQUlILHlFQUEwRTtBQUMxRSxzREFBeUU7QUFDekUsMkRBQXdEO0FBWXhEOzs7Ozs7OztHQVFHO0FBQ0gsU0FBZ0IsMEJBQTBCLENBQUMsTUFBYztJQUNyRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFBRTtRQUNqRCxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUMvRDtJQUVELElBQUksUUFBNEIsQ0FBQztJQUNqQyxJQUFJLE1BQTBCLENBQUM7SUFDL0IsSUFBSSxNQUEwQixDQUFDO0lBRS9CLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFNLENBQUMsRUFBRTtRQUN0RCxNQUFNLFVBQVUsR0FBRyxnQ0FBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QyxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUVoRSxRQUFRLElBQUksRUFBRTtZQUNWLEtBQUssVUFBVTtnQkFBRSxRQUFRLEdBQUcsU0FBUyxDQUFDO2dCQUFDLE1BQU07WUFDN0MsS0FBSyxRQUFRO2dCQUFFLE1BQU0sR0FBRyxTQUFTLENBQUM7Z0JBQUMsTUFBTTtZQUN6QyxLQUFLLFFBQVE7Z0JBQUUsTUFBTSxHQUFHLFNBQVMsQ0FBQztnQkFBQyxNQUFNO1lBQ3pDLEtBQUssTUFBTSxDQUFDLENBQUMsTUFBTTtZQUNuQixLQUFLLE1BQU0sQ0FBQyxDQUFDLE1BQU07WUFFbkIsT0FBTyxDQUFDLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMzQztLQUNKO0lBRUQsT0FBTztRQUNILFFBQVE7UUFDUixNQUFNO1FBQ04sTUFBTTtLQUNULENBQUM7QUFDTixDQUFDO0FBN0JELGdFQTZCQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBYSxvQkFBcUIsU0FBUSxxQ0FBaUI7SUFFdkQ7O09BRUc7SUFDSCxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQWdDO1FBQ3RDLE9BQU8sMkJBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCwrQkFBK0I7SUFDL0IsY0FBYztRQUNWLE9BQU87WUFDSCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUMzQixPQUFPLEVBQUUsRUFBRTtTQUNkLENBQUM7SUFDTixDQUFDO0lBRU8sYUFBYTtRQUNqQixNQUFNLEtBQUssR0FBK0M7WUFDdEQ7Z0JBQ0ksSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLElBQUksRUFBRSwyQkFBYyxDQUFDLFFBQVE7YUFDaEM7WUFDRDtnQkFDSSxJQUFJLEVBQUUsUUFBUTtnQkFDZCxJQUFJLEVBQUUsMkJBQWMsQ0FBQyxNQUFNO2FBQzlCO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsSUFBSSxFQUFFLDJCQUFjLENBQUMsTUFBTTthQUM5QjtZQUNEO2dCQUNJLElBQUksRUFBRSxNQUFNO2dCQUNaLElBQUksRUFBRSwyQkFBYyxDQUFDLElBQUk7YUFDNUI7WUFDRDtnQkFDSSxJQUFJLEVBQUUsTUFBTTtnQkFDWixJQUFJLEVBQUUsMkJBQWMsQ0FBQyxJQUFJO2FBQzVCO1NBQ0osQ0FBQztRQUVGLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Q0FDSjtBQTVDRCxvREE0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBvciBpbiB0aGUgXCJsaWNlbnNlXCIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWRcbiAqIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbnRlbnQgfSBmcm9tIFwiYXNrLXNkay1tb2RlbFwiO1xuaW1wb3J0IHsgdjEgfSBmcm9tICdhc2stc21hcGktbW9kZWwnO1xuaW1wb3J0IHsgU2hhcmVkU2xvdFR5cGUgfSBmcm9tICcuLi9pbnRlcmFjdGlvbk1vZGVsR2VuZXJhdGlvbi9Nb2RlbFR5cGVzJztcbmltcG9ydCB7IGdldFNsb3RSZXNvbHV0aW9ucywgSW50ZW50QnVpbGRlciB9IGZyb20gJy4uL3V0aWxzL0ludGVudFV0aWxzJztcbmltcG9ydCB7IEJhc2VDb250cm9sSW50ZW50IH0gZnJvbSAnLi9CYXNlQ29udHJvbEludGVudCc7XG5cblxuLyoqXG4gKiBTbG90IHZhbHVlcyBjb252ZXllZCBieSBhIEdlbmVyYWxDb250cm9sSW50ZW50XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJhbENvbnRyb2xJbnRlbnRTbG90cyB7XG4gICAgZmVlZGJhY2s/OiBzdHJpbmcsXG4gICAgYWN0aW9uPzogc3RyaW5nLFxuICAgIHRhcmdldD86IHN0cmluZyxcbn1cblxuLyoqXG4gKiBVbnBhY2tzIHRoZSBjb21wbGV0ZSBpbnRlbnQgb2JqZWN0IGludG8gYSBzaW1wbGVyIHJlcHJlc2VudGF0aW9uLlxuICpcbiAqIE5vdGUgcmUgXCJlbXB0eSBzbG90c1wiOlxuICogLSBTbG90cyBpbiB0aGUgaW50ZW50IHdpdGggbm8gdmFsdWUgYXBwZWFyIGluIHRoZSBpbnRlbnQgb2JqZWN0IGFzIFwiXCIuXG4gKiAgIEhvd2V2ZXIsIHRoZXNlIGFyZSB1bnBhY2tlZCBhcyAqKmB1bmRlZmluZWRgKiogdG8gYmUgbW9yZSBleHBsaWNpdCBhbmQgZWFzZVxuICogICB0aGUgaW1wbGVtZW50YXRpb24gb2YgcHJlZGljYXRlcy5cbiAqIEBwYXJhbSBpbnRlbnQgLSBJbnRlbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVucGFja0dlbmVyYWxDb250cm9sSW50ZW50KGludGVudDogSW50ZW50KTogR2VuZXJhbENvbnRyb2xJbnRlbnRTbG90cyB7XG4gICAgaWYgKCFpbnRlbnQubmFtZS5zdGFydHNXaXRoKCdHZW5lcmFsQ29udHJvbEludGVudCcpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm90IGEgY29tcGF0aWJsZSBpbnRlbnQgOiAke2ludGVudC5uYW1lfWApO1xuICAgIH1cblxuICAgIGxldCBmZWVkYmFjazogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGxldCBhY3Rpb246IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBsZXQgdGFyZ2V0OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBzbG90XSBvZiBPYmplY3QuZW50cmllcyhpbnRlbnQuc2xvdHMhKSkge1xuICAgICAgICBjb25zdCBzbG90T2JqZWN0ID0gZ2V0U2xvdFJlc29sdXRpb25zKHNsb3QpO1xuICAgICAgICBjb25zdCBzbG90VmFsdWUgPSBzbG90T2JqZWN0ID8gc2xvdE9iamVjdC5zbG90VmFsdWUgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICBjYXNlICdmZWVkYmFjayc6IGZlZWRiYWNrID0gc2xvdFZhbHVlOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FjdGlvbic6IGFjdGlvbiA9IHNsb3RWYWx1ZTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0YXJnZXQnOiB0YXJnZXQgPSBzbG90VmFsdWU7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaGVhZCc6IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndGFpbCc6IGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ25vdCBoYW5kbGVkJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBmZWVkYmFjayxcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICB0YXJnZXQsXG4gICAgfTtcbn1cblxuLyoqXG4gKiBJbnRlbnQgdGhhdCBjb252ZXlzIGZlZWRiYWNrLCBhY3Rpb24sIGFuZCB0YXJnZXQgYnV0IG5vIHZhbHVlLlxuICpcbiAqIFRoaXMgZ2VuZXJhbC1wdXJwb3NlIGludGVudCBjb252ZXlzIHRoZSBpbnRlbnQgZm9yIHV0dGVyYW5jZXMgc3VjaCBhczpcbiAqIC0gXCJUaGUgdGltZVwiXG4gKiAtIFwiQ2hhbmdlIHRoZSBkYXRlXCJcbiAqIC0gXCJZZXMsIHRoYXQgb25lXCJcbiAqIC0gXCJObywgY2hhbmdlIHRoZSBldmVudCBkYXRlXCJcbiAqL1xuZXhwb3J0IGNsYXNzIEdlbmVyYWxDb250cm9sSW50ZW50IGV4dGVuZHMgQmFzZUNvbnRyb2xJbnRlbnQge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIEludGVudCBmcm9tIHNwZWNpZmljYXRpb24gb2YgdGhlIHNsb3RzXG4gICAgICovXG4gICAgc3RhdGljIG9mKHNsb3RzOiBHZW5lcmFsQ29udHJvbEludGVudFNsb3RzKTogSW50ZW50IHtcbiAgICAgICAgcmV0dXJuIEludGVudEJ1aWxkZXIub2YodGhpcy5wcm90b3R5cGUuY29uc3RydWN0b3IubmFtZSwgc2xvdHMpO1xuICAgIH1cblxuICAgIC8vIHRzRG9jOiBzZWUgQmFzZUNvbnRyb2xJbnRlbnRcbiAgICBnZW5lcmF0ZUludGVudCgpOiB2MS5za2lsbC5pbnRlcmFjdGlvbk1vZGVsLkludGVudCB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBzbG90czogdGhpcy5nZW5lcmF0ZVNsb3RzKCksXG4gICAgICAgICAgICBzYW1wbGVzOiBbXSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlU2xvdHMoKTogdjEuc2tpbGwuaW50ZXJhY3Rpb25Nb2RlbC5TbG90RGVmaW5pdGlvbltdIHtcbiAgICAgICAgY29uc3Qgc2xvdHM6IHYxLnNraWxsLmludGVyYWN0aW9uTW9kZWwuU2xvdERlZmluaXRpb25bXSA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnZmVlZGJhY2snLFxuICAgICAgICAgICAgICAgIHR5cGU6IFNoYXJlZFNsb3RUeXBlLkZFRURCQUNLLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnYWN0aW9uJyxcbiAgICAgICAgICAgICAgICB0eXBlOiBTaGFyZWRTbG90VHlwZS5BQ1RJT05cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3RhcmdldCcsXG4gICAgICAgICAgICAgICAgdHlwZTogU2hhcmVkU2xvdFR5cGUuVEFSR0VUXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdoZWFkJyxcbiAgICAgICAgICAgICAgICB0eXBlOiBTaGFyZWRTbG90VHlwZS5IRUFEXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICd0YWlsJyxcbiAgICAgICAgICAgICAgICB0eXBlOiBTaGFyZWRTbG90VHlwZS5UQUlMXG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG5cbiAgICAgICAgcmV0dXJuIHNsb3RzO1xuICAgIH1cbn0iXX0=