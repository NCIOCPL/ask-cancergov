"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateControlIntent = exports.unpackDateControlIntent = void 0;
const IntentUtils_1 = require("../utils/IntentUtils");
const ModelTypes_1 = require("../interactionModelGeneration/ModelTypes");
const BaseControlIntent_1 = require("./BaseControlIntent");
const AmazonBuiltInSlotType_1 = require("./AmazonBuiltInSlotType");
function unpackDateControlIntent(intent) {
    if (!intent.name.startsWith('GeneralControlIntent') && !intent.name.startsWith('DateControlIntent')) {
        throw new Error(`Not an compatible intent: ${intent.name}`);
    }
    let feedback;
    let action;
    let target;
    let amazonDate;
    for (const [name, slot] of Object.entries(intent.slots)) {
        const slotObject = IntentUtils_1.getSlotResolutions(slot);
        const slotValue = slotObject ? slotObject.slotValue : undefined;
        switch (name) {
            case 'feedback':
                feedback = slotValue;
                break;
            case 'action':
                action = slotValue;
                break;
            case 'target':
                target = slotValue;
                break;
            case 'AMAZON.DATE':
                amazonDate = slotValue;
                break;
            // default: ignore content-free slots
        }
    }
    if (amazonDate === undefined) {
        throw new Error("Inconsistency. AMAZON.DATE is expected to be defined. Are canHandle/handle functions in sync");
    }
    return {
        feedback,
        action,
        target,
        'AMAZON.DATE': amazonDate,
    };
}
exports.unpackDateControlIntent = unpackDateControlIntent;
class DateControlIntent extends BaseControlIntent_1.BaseControlIntent {
    static of(slots) {
        return IntentUtils_1.IntentBuilder.of(this.prototype.constructor.name, slots);
    }
    generateIntent() {
        return {
            name: this.name,
            slots: this.generateSlots(),
            samples: [],
        };
    }
    generateSlots() {
        const slots = [
            {
                name: 'feedback',
                type: ModelTypes_1.SharedSlotType.FEEDBACK
            },
            {
                name: 'action',
                type: ModelTypes_1.SharedSlotType.ACTION
            },
            {
                name: 'target',
                type: ModelTypes_1.SharedSlotType.TARGET
            },
            {
                name: 'preposition',
                type: ModelTypes_1.SharedSlotType.PREPOSITION
            },
            {
                name: 'AMAZON.DATE',
                type: AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.DATE
            },
            {
                name: 'head',
                type: ModelTypes_1.SharedSlotType.HEAD
            },
            {
                name: 'tail',
                type: ModelTypes_1.SharedSlotType.TAIL
            }
        ];
        return slots;
    }
    generateSlotTypes() {
        return [];
    }
}
exports.DateControlIntent = DateControlIntent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0ZUNvbnRyb2xJbnRlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZW50cy9EYXRlQ29udHJvbEludGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7OztBQUlILHNEQUF5RTtBQUN6RSx5RUFBMEU7QUFDMUUsMkRBQXdEO0FBRXhELG1FQUFnRTtBQVNoRSxTQUFnQix1QkFBdUIsQ0FBQyxNQUFjO0lBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsRUFBRTtRQUNqRyxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUMvRDtJQUVELElBQUksUUFBNEIsQ0FBQztJQUNqQyxJQUFJLE1BQTBCLENBQUM7SUFDL0IsSUFBSSxNQUEwQixDQUFDO0lBQy9CLElBQUksVUFBOEIsQ0FBQztJQUVuQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBTSxDQUFDLEVBQUU7UUFDdEQsTUFBTSxVQUFVLEdBQUcsZ0NBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFFaEUsUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLFVBQVU7Z0JBQUUsUUFBUSxHQUFHLFNBQVMsQ0FBQztnQkFBQyxNQUFNO1lBQzdDLEtBQUssUUFBUTtnQkFBRSxNQUFNLEdBQUcsU0FBUyxDQUFDO2dCQUFDLE1BQU07WUFDekMsS0FBSyxRQUFRO2dCQUFFLE1BQU0sR0FBRyxTQUFTLENBQUM7Z0JBQUMsTUFBTTtZQUN6QyxLQUFLLGFBQWE7Z0JBQUUsVUFBVSxHQUFHLFNBQVMsQ0FBQztnQkFBQyxNQUFNO1lBQ2xELHFDQUFxQztTQUN4QztLQUNKO0lBRUQsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1FBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsOEZBQThGLENBQUMsQ0FBQztLQUNuSDtJQUVELE9BQU87UUFDSCxRQUFRO1FBQ1IsTUFBTTtRQUNOLE1BQU07UUFDTixhQUFhLEVBQUUsVUFBVTtLQUM1QixDQUFDO0FBQ04sQ0FBQztBQWpDRCwwREFpQ0M7QUFFRCxNQUFhLGlCQUFrQixTQUFRLHFDQUFpQjtJQUVwRCxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQTZCO1FBQ25DLE9BQU8sMkJBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxjQUFjO1FBQ1YsT0FBTztZQUNILElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQzNCLE9BQU8sRUFBRSxFQUFFO1NBQ2QsQ0FBQztJQUNOLENBQUM7SUFFRCxhQUFhO1FBQ1QsTUFBTSxLQUFLLEdBQStDO1lBQ3REO2dCQUNJLElBQUksRUFBRSxVQUFVO2dCQUNoQixJQUFJLEVBQUUsMkJBQWMsQ0FBQyxRQUFRO2FBQ2hDO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsSUFBSSxFQUFFLDJCQUFjLENBQUMsTUFBTTthQUM5QjtZQUNEO2dCQUNJLElBQUksRUFBRSxRQUFRO2dCQUNkLElBQUksRUFBRSwyQkFBYyxDQUFDLE1BQU07YUFDOUI7WUFDRDtnQkFDSSxJQUFJLEVBQUUsYUFBYTtnQkFDbkIsSUFBSSxFQUFFLDJCQUFjLENBQUMsV0FBVzthQUNuQztZQUNEO2dCQUNJLElBQUksRUFBRSxhQUFhO2dCQUNuQixJQUFJLEVBQUUsNkNBQXFCLENBQUMsSUFBSTthQUNuQztZQUNEO2dCQUNJLElBQUksRUFBRSxNQUFNO2dCQUNaLElBQUksRUFBRSwyQkFBYyxDQUFDLElBQUk7YUFDNUI7WUFDRDtnQkFDSSxJQUFJLEVBQUUsTUFBTTtnQkFDWixJQUFJLEVBQUUsMkJBQWMsQ0FBQyxJQUFJO2FBQzVCO1NBQ0osQ0FBQztRQUVGLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxpQkFBaUI7UUFDYixPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDSjtBQXBERCw4Q0FvREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTkgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBvciBpbiB0aGUgXCJsaWNlbnNlXCIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWRcbiAqIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbnRlbnQgfSBmcm9tIFwiYXNrLXNkay1tb2RlbFwiO1xuaW1wb3J0IHsgdjEgfSBmcm9tICdhc2stc21hcGktbW9kZWwnO1xuaW1wb3J0IHsgZ2V0U2xvdFJlc29sdXRpb25zLCBJbnRlbnRCdWlsZGVyIH0gZnJvbSAnLi4vdXRpbHMvSW50ZW50VXRpbHMnO1xuaW1wb3J0IHsgU2hhcmVkU2xvdFR5cGUgfSBmcm9tICcuLi9pbnRlcmFjdGlvbk1vZGVsR2VuZXJhdGlvbi9Nb2RlbFR5cGVzJztcbmltcG9ydCB7IEJhc2VDb250cm9sSW50ZW50IH0gZnJvbSAnLi9CYXNlQ29udHJvbEludGVudCc7XG5pbXBvcnQgU2xvdFR5cGUgPSB2MS5za2lsbC5pbnRlcmFjdGlvbk1vZGVsLlNsb3RUeXBlO1xuaW1wb3J0IHsgQW1hem9uQnVpbHRJblNsb3RUeXBlIH0gZnJvbSAnLi9BbWF6b25CdWlsdEluU2xvdFR5cGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERhdGVDb250cm9sSW50ZW50U2xvdHMge1xuICAgIGZlZWRiYWNrPzogc3RyaW5nLFxuICAgIGFjdGlvbj86IHN0cmluZyxcbiAgICB0YXJnZXQ/OiBzdHJpbmcsXG4gICAgJ0FNQVpPTi5EQVRFJzogc3RyaW5nLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5wYWNrRGF0ZUNvbnRyb2xJbnRlbnQoaW50ZW50OiBJbnRlbnQpOiBEYXRlQ29udHJvbEludGVudFNsb3RzIHtcbiAgICBpZiAoIWludGVudC5uYW1lLnN0YXJ0c1dpdGgoJ0dlbmVyYWxDb250cm9sSW50ZW50JykgJiYgIWludGVudC5uYW1lLnN0YXJ0c1dpdGgoJ0RhdGVDb250cm9sSW50ZW50JykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3QgYW4gY29tcGF0aWJsZSBpbnRlbnQ6ICR7aW50ZW50Lm5hbWV9YCk7XG4gICAgfVxuXG4gICAgbGV0IGZlZWRiYWNrOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgbGV0IGFjdGlvbjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGxldCB0YXJnZXQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBsZXQgYW1hem9uRGF0ZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgZm9yIChjb25zdCBbbmFtZSwgc2xvdF0gb2YgT2JqZWN0LmVudHJpZXMoaW50ZW50LnNsb3RzISkpIHtcbiAgICAgICAgY29uc3Qgc2xvdE9iamVjdCA9IGdldFNsb3RSZXNvbHV0aW9ucyhzbG90KTtcbiAgICAgICAgY29uc3Qgc2xvdFZhbHVlID0gc2xvdE9iamVjdCA/IHNsb3RPYmplY3Quc2xvdFZhbHVlIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnZmVlZGJhY2snOiBmZWVkYmFjayA9IHNsb3RWYWx1ZTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhY3Rpb24nOiBhY3Rpb24gPSBzbG90VmFsdWU7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndGFyZ2V0JzogdGFyZ2V0ID0gc2xvdFZhbHVlOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0FNQVpPTi5EQVRFJzogYW1hem9uRGF0ZSA9IHNsb3RWYWx1ZTsgYnJlYWs7XG4gICAgICAgICAgICAvLyBkZWZhdWx0OiBpZ25vcmUgY29udGVudC1mcmVlIHNsb3RzXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYW1hem9uRGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkluY29uc2lzdGVuY3kuIEFNQVpPTi5EQVRFIGlzIGV4cGVjdGVkIHRvIGJlIGRlZmluZWQuIEFyZSBjYW5IYW5kbGUvaGFuZGxlIGZ1bmN0aW9ucyBpbiBzeW5jXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGZlZWRiYWNrLFxuICAgICAgICBhY3Rpb24sXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgJ0FNQVpPTi5EQVRFJzogYW1hem9uRGF0ZSxcbiAgICB9O1xufVxuXG5leHBvcnQgY2xhc3MgRGF0ZUNvbnRyb2xJbnRlbnQgZXh0ZW5kcyBCYXNlQ29udHJvbEludGVudCB7XG5cbiAgICBzdGF0aWMgb2Yoc2xvdHM6IERhdGVDb250cm9sSW50ZW50U2xvdHMpOiBJbnRlbnQge1xuICAgICAgICByZXR1cm4gSW50ZW50QnVpbGRlci5vZih0aGlzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lLCBzbG90cyk7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVJbnRlbnQoKTogdjEuc2tpbGwuaW50ZXJhY3Rpb25Nb2RlbC5JbnRlbnQge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgc2xvdHM6IHRoaXMuZ2VuZXJhdGVTbG90cygpLFxuICAgICAgICAgICAgc2FtcGxlczogW10sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVTbG90cygpOiB2MS5za2lsbC5pbnRlcmFjdGlvbk1vZGVsLlNsb3REZWZpbml0aW9uW10ge1xuICAgICAgICBjb25zdCBzbG90czogdjEuc2tpbGwuaW50ZXJhY3Rpb25Nb2RlbC5TbG90RGVmaW5pdGlvbltdID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdmZWVkYmFjaycsXG4gICAgICAgICAgICAgICAgdHlwZTogU2hhcmVkU2xvdFR5cGUuRkVFREJBQ0tcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2FjdGlvbicsXG4gICAgICAgICAgICAgICAgdHlwZTogU2hhcmVkU2xvdFR5cGUuQUNUSU9OXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICd0YXJnZXQnLFxuICAgICAgICAgICAgICAgIHR5cGU6IFNoYXJlZFNsb3RUeXBlLlRBUkdFVFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAncHJlcG9zaXRpb24nLFxuICAgICAgICAgICAgICAgIHR5cGU6IFNoYXJlZFNsb3RUeXBlLlBSRVBPU0lUSU9OXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdBTUFaT04uREFURScsXG4gICAgICAgICAgICAgICAgdHlwZTogQW1hem9uQnVpbHRJblNsb3RUeXBlLkRBVEVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2hlYWQnLFxuICAgICAgICAgICAgICAgIHR5cGU6IFNoYXJlZFNsb3RUeXBlLkhFQURcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3RhaWwnLFxuICAgICAgICAgICAgICAgIHR5cGU6IFNoYXJlZFNsb3RUeXBlLlRBSUxcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcblxuICAgICAgICByZXR1cm4gc2xvdHM7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVTbG90VHlwZXMoKTogU2xvdFR5cGVbXSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cblxuXG4iXX0=