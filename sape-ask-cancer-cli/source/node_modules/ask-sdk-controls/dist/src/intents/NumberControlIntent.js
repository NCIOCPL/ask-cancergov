"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberControlIntent = exports.unpackNumberControlIntent = void 0;
const ModelTypes_1 = require("../interactionModelGeneration/ModelTypes");
const IntentUtils_1 = require("../utils/IntentUtils");
const AmazonBuiltInSlotType_1 = require("./AmazonBuiltInSlotType");
const BaseControlIntent_1 = require("./BaseControlIntent");
/**
 *
 *
 * empty slots are unpacked as 'undefined' to be more explicit about what is going on.
 * (this helps makes boolean tests in Controls more obvious and consistent)
 */
function unpackNumberControlIntent(intent) {
    if (!intent.name.startsWith('GeneralControlIntent') && !intent.name.startsWith('NumberControlIntent')) {
        throw new Error(`Not a compatible intent: ${intent.name}`);
    }
    let action;
    let feedback;
    let target;
    let valueStr;
    for (const [name, slot] of Object.entries(intent.slots)) {
        const slotObject = IntentUtils_1.getSlotResolutions(slot);
        const slotValue = slotObject ? slotObject.slotValue : undefined;
        switch (name) {
            case 'feedback':
                feedback = slotValue !== undefined ? slotValue : undefined;
                break;
            case 'action':
                action = slotValue !== undefined ? slotValue : undefined;
                break;
            case 'target':
                target = slotValue !== undefined ? slotValue : undefined;
                break;
            case 'AMAZON.NUMBER':
                valueStr = slotValue !== undefined ? slotValue : undefined;
                break;
            // default: ignore content-free slots
        }
    }
    return {
        feedback,
        action,
        target,
        'AMAZON.NUMBER': valueStr
    };
}
exports.unpackNumberControlIntent = unpackNumberControlIntent;
/**
 * Intent to capture an AMAZON.NUMBER, following the "ControlIntent" conventions
 */
class NumberControlIntent extends BaseControlIntent_1.BaseControlIntent {
    static of(slots) {
        return IntentUtils_1.IntentBuilder.of(this.prototype.constructor.name, slots);
    }
    generateIntent() {
        return {
            name: this.name,
            slots: this.generateSlots(),
            samples: [],
        };
    }
    generateSlots() {
        const slots = [
            {
                name: 'feedback',
                type: ModelTypes_1.SharedSlotType.FEEDBACK
            },
            {
                name: 'action',
                type: ModelTypes_1.SharedSlotType.ACTION
            },
            {
                name: 'target',
                type: ModelTypes_1.SharedSlotType.TARGET
            },
            {
                name: 'AMAZON.NUMBER',
                type: AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER
            },
            {
                name: 'preposition',
                type: ModelTypes_1.SharedSlotType.PREPOSITION
            },
            {
                name: 'head',
                type: ModelTypes_1.SharedSlotType.HEAD
            },
            {
                name: 'tail',
                type: ModelTypes_1.SharedSlotType.TAIL
            }
        ];
        return slots;
    }
    generateSlotTypes() {
        return [];
    }
}
exports.NumberControlIntent = NumberControlIntent;
//# sourceMappingURL=data:application/json;base64,