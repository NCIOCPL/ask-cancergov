"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Control = void 0;
const ArrayUtils_1 = require("../utils/ArrayUtils");
/**
 * Abstract base class for Controls.
 */
class Control {
    constructor(id) {
        this.id = id;
    }
    /**
     * Determines if the value is ready for use by other parts of the skill.
     *
     * @param input - Input object.
     * @returns `true` if the Control or one of its children can take the initiative, false otherwise.
     */
    async isReady(input) {
        return !(await this.canTakeInitiative(input));
    }
    /**
     * Gets the Control's state as an object that is serializable.
     *
     * Only durable state should be included and the object should be serializable with a
     * straightforward application of `JSON.stringify(object)`.
     *
     * Default:
     *  `{return this.state;}`
     *
     * Usage:
     *  * The default is sufficient for Controls that use the `.state` variable and only store simple data.
     *    * Non-simple data includes functions, and objects with functions, as these will not survive the round trip.
     *    * Other non-simple data include types with non-enumerable properties.
     *  * It is safe to pass the actual state object as the framework guarantees to not mutate it.
     *  * Functions that operate on the Control's state should be defined as members of the Control
     *
     * Framework behavior:
     *  * The framework serializes the data use a simple application of `JSON.stringify`.
     *  * On the subsequent turn the control tree is re-established and the state objects
     *    are re-attached to each Control via `control.setSerializableState(serializedState)`.
     *
     * @returns Serializable object defining the state of the Control
     */
    getSerializableState() {
        return this.state;
    }
    /**
     * Sets the state from a serialized state object.
     *
     * Default:
     * `{this.state = serializedState;}`
     *
     * Usage:
     *  * It is safe to use serializedState without copying as the framework guarantees to not mutate it.
     *
     * Framework behavior:
     *  * After the control tree is re-established, the state objects
     *    are re-attached to each Control via `control.setSerializableState(serializedState)`.
     *
     * @param serializedState - Serializable object defining the state of the Control
     */
    setSerializableState(serializedState) {
        this.state = serializedState;
    }
    /**
     * Add response content for a system act produced by this control.
     *
     * This is intended to be used with the default ControlManager.render() which implements a
     * simple concatenation strategy to form a complete response from multiple result items.
     *
     * @param act - System act
     * @param input - Input
     * @param responseBuilder - Response builder
     */
    renderAct(act, input, responseBuilder) {
        // The default is to let the act render itself
        return act.render(input, responseBuilder);
    }
    // TODO: remove and/or create a new class... class UnhandledActError extends Error.
    throwUnhandledActError(act) {
        throw new Error(`No NLG for ${act}`);
    }
    /**
     * Evaluate a prompt prop.
     *
     * @param act - act
     * @param propValue - Constant or function producing String or List-of-Strings
     * @param input - Input object
     */
    evaluatePromptProp(act, propValue, input) {
        const stringOrList = (typeof propValue === 'function') ? propValue.call(this, act, input) : propValue;
        if (typeof stringOrList === 'string') {
            return stringOrList;
        }
        return ArrayUtils_1.randomlyPick(stringOrList);
    }
    /**
     * Evaluate a boolean prop.
     *
     * @param propValue - Constant or function producing boolean
     * @param input - The input object
     */
    evaluateBooleanProp(propValue, input) {
        return (typeof propValue === 'function') ? propValue.call(this, input) : propValue;
    }
}
exports.Control = Control;
//# sourceMappingURL=data:application/json;base64,