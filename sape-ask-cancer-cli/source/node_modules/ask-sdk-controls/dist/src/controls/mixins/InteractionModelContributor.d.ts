import { ControlInteractionModelGenerator } from '../../interactionModelGeneration/ControlInteractionModelGenerator';
import { ModelData } from '../../interactionModelGeneration/ModelTypes';
/**
 * Optional interface for Controls that wish to customize Interaction Model.
 */
export interface InteractionModelContributor {
    /**
     * A list of Slot Value IDs for the "Target" slot type.
     *
     * Framework behavior:
     * - The Interaction Model generator will check that the slot value IDs
     *   exist in the Target Type and add them if missing. The added
     *   slot value definition will not have any synonyms defined - these must
     *   be added manually.
     */
    getTargetIds(): string[];
    /**
     * Updates the interaction model.
     *
     * Usage:
     * - Controls should add any content to the interaction model that they rely
     *   on.  In particular, intents, slot types and slot values.
     * - The imData parameter contains localized information for all known slot
     *   types and intents. The `updateInteractionModel()` method should use
     *   this to obtain the raw data that is added to the generator.
     *
     * @param generator - Interaction Model generator
     * @param imData - Localized data for all known intents and slots.
     *
     */
    updateInteractionModel(generator: ControlInteractionModelGenerator, imData: ModelData): void;
}
/**
 * Type-guard for the InteractionModelContributor interface.
 *
 * @param arg - Object to test
 * @returns `true` if the argument implements the InteractionModelContributor
 * interface.
 */
export declare function implementsInteractionModelContributor(arg: any): arg is InteractionModelContributor;
//# sourceMappingURL=InteractionModelContributor.d.ts.map