import { HandlerInput } from 'ask-sdk-core';
import { Request } from 'ask-sdk-model';
import { IControlInput } from './interfaces/IControlInput';
import { IControl } from './interfaces/IControl';
/**
 * Defines an expanded input object passed around during processing by Controls.
 *
 * Purpose:
 *   * Provides access to the HandlerInput and also conveniences such as simplified access
 *     to the Request object, a turn counter and a map of all controls in the control tree.
 */
export declare class ControlInput implements IControlInput {
    /**
     * The input from {@link CustomSkillRequestHandler}
     */
    readonly handlerInput: HandlerInput;
    /**
     * The request object
     *
     * This is a convenience for `handlerInput.requestEnvelope.request`.
     */
    readonly request: Request;
    /**
     * The number of incoming requests during the user session.
     */
    readonly turnNumber: number;
    /**
     * All the controls of the control tree, indexed by controlID.
     *
     * Usage:
     *  * This provides direct access to all other controls in the control tree which
     *    can be convenient for occasional use but it increases the coupling of specific controls.
     *  * When controls are close to one another, it is preferable to have their parents
     *    coordinate data transfer, e.g. by get() from one and set() on the other.
     *  * If controls that are not close to one another routinely need to share information
     *    it would be best to create an external datastore. Consider Redux or similar solutions.
     */
    readonly controls: {
        [index: string]: IControl;
    };
    constructor(handlerInput: HandlerInput, turnNumber: number, controlMap: {
        [index: string]: IControl;
    });
}
//# sourceMappingURL=ControlInput.d.ts.map