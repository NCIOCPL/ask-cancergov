"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateIMForControlTree = exports.renderActsInSequence = exports.ControlManager = void 0;
const tslib_1 = require("tslib");
const i18next_1 = tslib_1.__importDefault(require("i18next"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const LanguageStrings_1 = require("../commonControls/LanguageStrings");
const Control_1 = require("../controls/Control");
const InteractionModelContributor_1 = require("../controls/mixins/InteractionModelContributor");
const ControlInteractionModelGenerator_1 = require("../interactionModelGeneration/ControlInteractionModelGenerator");
const Logger_1 = require("../logging/Logger");
const IContainerControl_1 = require("./interfaces/IContainerControl");
const log = new Logger_1.Logger('AskSdkControls:ControlManager');
/**
 * Defines the high-level functionality for a skill built with Controls.
 *
 * Each skill that uses controls should define a concrete sub-class that
 * implements `createControlTree` and optionally overrides other methods.
 *
 * Summary:
 *  * createControlTree() creates a hierarchy of controls that cooperatively
 *    manage the skill behavior.
 *   * The methods on the root control will be called to process the user's
 *     input and to generate system initiative.
 *
 *  * render() is the entry-point for the render-phase.
 *   * High-level overrides and multi-act rendering should be performed by
 *     `controlManager.render()`. The default is to render each act one-by-one
 *     by calling `control.renderAct(act)`.  This builds up a result by
 *     concatenation of response fragments which is sufficient in many cases.
 *
 *  * The `ControlResult` contains a list of SystemActs that describe *what*
 *    should be communicated to the user but generally should not describe *how*
 *    to present it.
 *
 *  * `handleInternalError` provides an entry-point for custom handling of
 *    internal errors.
 *
 *  * `buildInteractionModel` provides an entry-point for building the
 *    Control-specific aspects of skill's Interaction Model.
 *
 * Internationalization and Localization
 *  * Controls themselves are location-agnostic.  They consume abstract inputs
 *    (Intents, etc) and produce abstract outputs (SystemActs)
 *
 *  * Mapping localized input to abstract inputs is the role of NLU and the
 *    necessary information is stored in the Interaction Model.
 *   * The ControlManager props includes a bag of localization data that is used
 *     during interaction-model building for a given locale.
 *   * The framework ships with a default set of interaction model data for
 *     en-US.
 *
 *  * Mapping abstract output to physical output (prompts, APL strings) etc is
 *    the role of the rendering phase.  This information is part of the skill
 *    definition but can be located in various places: either in a monolithic
 *    render() function, or scattered around the various Controls and Acts.
 */
class ControlManager {
    /**
     * Creates an instance of a Control Manager.
     * @param props - props
     */
    constructor(props) {
        this.props = ControlManager.mergeWithDefaultProps(props);
        const resource = lodash_1.default.merge(LanguageStrings_1.systemResource, this.props.i18nResources);
        i18nInit(this.props.locale, resource);
    }
    static mergeWithDefaultProps(props) {
        const defaults = {
            locale: 'en-US',
            i18nResources: {}
        };
        return lodash_1.default.mergeWith(defaults, props);
    }
    /**
     * Transforms the information in ControlResult into user-facing content
     * (prompts and APL).
     *
     * Default: The default rendering strategy renders each `SystemAct` in turn
     *          by calling `act.control.render(act)`. This strategy leads to
     *          prompts that are a concatenation of the prompt-fragment for each
     *          `SystemAct`.
     *
     * Usage:
     *  * In many situations rendering the acts one-by-one is sufficient as the
     *    concatenation of prompt fragments leads to usable prompts.  For
     *    example
     *
     * ```js
     *    [ValueSetAct(ageCtrl, 5), RequestValueAct(nameCtrl)]
     * ```
     *    may be rendered sequentially to produce:
     *
     * ```js
     *    -> 'OK, 5. What is your name?"
     * ```
     *
     *    * For more complex situations, override this method and implement a
     *      custom rendering strategy.  Often the solution will be to implement
     *      some special cases and otherwise fallback to the default by calling
     *      super.render() or by directly calling
     *      `ControlManager.renderActsOneByOne()`.
     *
     */
    render(result, input, controlResponseBuilder) {
        renderActsInSequence(result.acts, input, controlResponseBuilder);
    }
    /**
     * Handles an internal error.
     *
     * This is intended for logging, reporting and perhaps mentioning the
     * situation to the user. The user session will be automatically closed.
     *
     * Default: The error object is converted into an object with enumerable
     * properties and logged at logLevel=error
     * @param input - Input
     * @param error - Error
     * @param responseBuilder - Response builder
     */
    handleInternalError(input, error, responseBuilder) {
        const err = error.stack !== undefined ? { name: error.name, msg: error.message, stack: error.stack } : error; // Error doesn't have enumerable properties, so we convert it.
        log.error(`Error handled: ${JSON.stringify(err)}`);
    }
    /**
     * Builds interaction model content required by the Control tree.
     *
     * Usage:
     * - The imDataMap has 'en-US' modelData registered by default
     * - The developer may configure and register additional `imDataMap`
     *   instances to support additional locales
     *
     * * If imDataMap doesn't have data for the requested locale a
     *   `LocaleNotSupportedError` will be thrown
     *
     * @param generator - Interaction Model Generator
     */
    buildInteractionModel(generator) {
        const rootControl = this.createControlTree({});
        const imData = ControlInteractionModelGenerator_1.generateModelData();
        updateIMForControlTree(generator, rootControl, imData);
    }
}
exports.ControlManager = ControlManager;
/**
 * Render each of the acts, one-by-one.
 *
 *
 * @param systemActs - The system acts to render
 * @param input - Input
 * @param responseBuilder - Response builder.
 */
function renderActsInSequence(systemActs, input, controlResponseBuilder) {
    for (const act of systemActs) {
        act.control.renderAct(act, input, controlResponseBuilder);
    }
}
exports.renderActsInSequence = renderActsInSequence;
/**
 * Visits every control in the tree and updates the interaction model for each
 * control. Go through the entire control tree and update IM
 * @param generator - Interaction model generator
 * @param control - Root control
 * @param imData - Localized data for use in interaction model
 */
// TODO: param-ordering
function updateIMForControlTree(generator, control, imData) {
    if (control instanceof Control_1.Control && InteractionModelContributor_1.implementsInteractionModelContributor(control)) {
        control.updateInteractionModel(generator, imData);
        const targetIds = control.getTargetIds();
        if (targetIds !== undefined) {
            targetIds.forEach((targetId) => {
                generator.targetSlotIds = generator.targetSlotIds.add(targetId);
            });
        }
    }
    // If container control, do same thing recursively
    if (IContainerControl_1.isContainerControl(control)) {
        for (const child of control.children) {
            updateIMForControlTree(generator, child, imData);
        }
    }
}
exports.updateIMForControlTree = updateIMForControlTree;
/**
 * Initializes the internationalization system (i18next).
 *
 * This loads data for the specified local from the resources.
 *
 * @param locale - The locale to specialize to.
 * @param resources - Resources for all supported locales.
 */
function i18nInit(locale, resources) {
    if (!locale) {
        throw new Error('Please specify the language.');
    }
    void i18next_1.default.init({
        lng: locale,
        resources,
        fallbackLng: 'en',
    });
}
//# sourceMappingURL=data:application/json;base64,