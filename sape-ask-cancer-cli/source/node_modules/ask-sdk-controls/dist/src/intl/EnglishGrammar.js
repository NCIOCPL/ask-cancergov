"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnglishGrammar = void 0;
/**
  * Utilities for prompt generation in English
  */
var EnglishGrammar;
(function (EnglishGrammar) {
    /**
     * Choose the article to use in English noun phrases  (a vs an)
     *
     * This is only a partial implementation.
     * See https://www.grammar.com/a-vs-an-when-to-use/
     * @param antecedent - Antecedent
     */
    function article(antecedent) {
        const firstLetter = antecedent.trim()[0];
        if (["a", "e", "i", "o", "u"].includes(firstLetter)) {
            return "an";
        }
        else {
            return "a";
        }
    }
    EnglishGrammar.article = article;
    /**
     * Render a noun in singular or plural form
     *
     * Both the singular and plural form of the noun must be supplied as arguments.
     *
     * Rule:
     *  * `1 -> singular`
     *  * `else -> plural`  (including zero)
     *
     * @param count - Count
     * @param singular - Singular form
     * @param plural - Plural form
     */
    function renderNoun(count, singular, plural) {
        return (count === 1 || count === '1') ? singular : plural;
    }
    EnglishGrammar.renderNoun = renderNoun;
})(EnglishGrammar = exports.EnglishGrammar || (exports.EnglishGrammar = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5nbGlzaEdyYW1tYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50bC9FbmdsaXNoR3JhbW1hci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7OztBQUdIOztJQUVJO0FBQ0osSUFBaUIsY0FBYyxDQWtDOUI7QUFsQ0QsV0FBaUIsY0FBYztJQUMzQjs7Ozs7O09BTUc7SUFDSCxTQUFnQixPQUFPLENBQUMsVUFBa0I7UUFDdEMsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ2pELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7YUFDSTtZQUNELE9BQU8sR0FBRyxDQUFDO1NBQ2Q7SUFDTCxDQUFDO0lBUmUsc0JBQU8sVUFRdEIsQ0FBQTtJQUVEOzs7Ozs7Ozs7Ozs7T0FZRztJQUNILFNBQWdCLFVBQVUsQ0FBQyxLQUFzQixFQUFFLFFBQWdCLEVBQUUsTUFBYztRQUMvRSxPQUFPLENBQUMsS0FBSyxLQUFLLENBQUMsSUFBSSxLQUFLLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQzlELENBQUM7SUFGZSx5QkFBVSxhQUV6QixDQUFBO0FBQ0wsQ0FBQyxFQWxDZ0IsY0FBYyxHQUFkLHNCQUFjLEtBQWQsc0JBQWMsUUFrQzlCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG4vKipcbiAgKiBVdGlsaXRpZXMgZm9yIHByb21wdCBnZW5lcmF0aW9uIGluIEVuZ2xpc2hcbiAgKi9cbmV4cG9ydCBuYW1lc3BhY2UgRW5nbGlzaEdyYW1tYXIge1xuICAgIC8qKlxuICAgICAqIENob29zZSB0aGUgYXJ0aWNsZSB0byB1c2UgaW4gRW5nbGlzaCBub3VuIHBocmFzZXMgIChhIHZzIGFuKVxuICAgICAqXG4gICAgICogVGhpcyBpcyBvbmx5IGEgcGFydGlhbCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKiBTZWUgaHR0cHM6Ly93d3cuZ3JhbW1hci5jb20vYS12cy1hbi13aGVuLXRvLXVzZS9cbiAgICAgKiBAcGFyYW0gYW50ZWNlZGVudCAtIEFudGVjZWRlbnRcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gYXJ0aWNsZShhbnRlY2VkZW50OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZmlyc3RMZXR0ZXIgPSBhbnRlY2VkZW50LnRyaW0oKVswXTtcbiAgICAgICAgaWYgKFtcImFcIiwgXCJlXCIsIFwiaVwiLCBcIm9cIiwgXCJ1XCJdLmluY2x1ZGVzKGZpcnN0TGV0dGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiYW5cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcImFcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciBhIG5vdW4gaW4gc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm1cbiAgICAgKlxuICAgICAqIEJvdGggdGhlIHNpbmd1bGFyIGFuZCBwbHVyYWwgZm9ybSBvZiB0aGUgbm91biBtdXN0IGJlIHN1cHBsaWVkIGFzIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIFJ1bGU6XG4gICAgICogICogYDEgLT4gc2luZ3VsYXJgXG4gICAgICogICogYGVsc2UgLT4gcGx1cmFsYCAgKGluY2x1ZGluZyB6ZXJvKVxuICAgICAqXG4gICAgICogQHBhcmFtIGNvdW50IC0gQ291bnRcbiAgICAgKiBAcGFyYW0gc2luZ3VsYXIgLSBTaW5ndWxhciBmb3JtXG4gICAgICogQHBhcmFtIHBsdXJhbCAtIFBsdXJhbCBmb3JtXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlck5vdW4oY291bnQ6IG51bWJlciB8IHN0cmluZywgc2luZ3VsYXI6IHN0cmluZywgcGx1cmFsOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIChjb3VudCA9PT0gMSB8fCBjb3VudCA9PT0gJzEnKSA/IHNpbmd1bGFyIDogcGx1cmFsO1xuICAgIH1cbn0iXX0=