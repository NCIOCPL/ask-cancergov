"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListFormatting = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
/**
 * Utilities for rendering lists to strings/prompts.
 */
var ListFormatting;
(function (ListFormatting) {
    /**
     * Format a list with commas and a joiner word.
     *
     * Example: `formatList(['a', 'b', 'c'], 'and or') -> 'a, b, and or c'`
     *
     * This can mostly be replaced with Intl.ListFormat(style:'long', ..) once it is implemented for NodeJS.
     * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat
     *
     * @param arr - Array
     * @param joiner - Joiner
     */
    function format(arr, joiner = "or") {
        if (arr.length === 0) {
            return "(empty)";
        }
        if (arr.length === 1) {
            return arr[0];
        }
        if (arr.length === 2) {
            return `${arr[0]} ${joiner} ${arr[1]}`;
        }
        else {
            return `${lodash_1.default.join(lodash_1.default.take(arr, arr.length - 1), ", ")} ${joiner} ${arr[arr.length - 1]}`;
        }
    }
    ListFormatting.format = format;
})(ListFormatting = exports.ListFormatting || (exports.ListFormatting = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdEZvcm1hdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbnRsL0xpc3RGb3JtYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7OztHQVdHOzs7O0FBRUgsNERBQXVCO0FBRXZCOztHQUVHO0FBQ0gsSUFBaUIsY0FBYyxDQTBCOUI7QUExQkQsV0FBaUIsY0FBYztJQUMzQjs7Ozs7Ozs7OztPQVVHO0lBQ0gsU0FBZ0IsTUFBTSxDQUFDLEdBQWEsRUFBRSxNQUFNLEdBQUcsSUFBSTtRQUMvQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2xCLE9BQU8sU0FBUyxDQUFDO1NBQ3BCO1FBQ0QsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNsQixPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQjtRQUNELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDMUM7YUFDSTtZQUNELE9BQU8sR0FBRyxnQkFBQyxDQUFDLElBQUksQ0FBQyxnQkFBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxNQUFNLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUMxRjtJQUNMLENBQUM7SUFiZSxxQkFBTSxTQWFyQixDQUFBO0FBQ0wsQ0FBQyxFQTFCZ0IsY0FBYyxHQUFkLHNCQUFjLEtBQWQsc0JBQWMsUUEwQjlCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xuXG4vKipcbiAqIFV0aWxpdGllcyBmb3IgcmVuZGVyaW5nIGxpc3RzIHRvIHN0cmluZ3MvcHJvbXB0cy5cbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBMaXN0Rm9ybWF0dGluZyB7XG4gICAgLyoqXG4gICAgICogRm9ybWF0IGEgbGlzdCB3aXRoIGNvbW1hcyBhbmQgYSBqb2luZXIgd29yZC5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6IGBmb3JtYXRMaXN0KFsnYScsICdiJywgJ2MnXSwgJ2FuZCBvcicpIC0+ICdhLCBiLCBhbmQgb3IgYydgXG4gICAgICpcbiAgICAgKiBUaGlzIGNhbiBtb3N0bHkgYmUgcmVwbGFjZWQgd2l0aCBJbnRsLkxpc3RGb3JtYXQoc3R5bGU6J2xvbmcnLCAuLikgb25jZSBpdCBpcyBpbXBsZW1lbnRlZCBmb3IgTm9kZUpTLlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9JbnRsL0xpc3RGb3JtYXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcnIgLSBBcnJheVxuICAgICAqIEBwYXJhbSBqb2luZXIgLSBKb2luZXJcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gZm9ybWF0KGFycjogc3RyaW5nW10sIGpvaW5lciA9IFwib3JcIik6IHN0cmluZyB7XG4gICAgICAgIGlmIChhcnIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gXCIoZW1wdHkpXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyci5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHthcnJbMF19ICR7am9pbmVyfSAke2FyclsxXX1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGAke18uam9pbihfLnRha2UoYXJyLCBhcnIubGVuZ3RoIC0gMSksIFwiLCBcIil9ICR7am9pbmVyfSAke2FyclthcnIubGVuZ3RoIC0gMV19YDtcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=