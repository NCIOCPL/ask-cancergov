import { LiteralContentAct } from '../src';
import { ContainerControl, ContainerControlState } from '../src/controls/ContainerControl';
import { Control } from '../src/controls/Control';
import { ControlInput } from '../src/controls/ControlInput';
import { ControlManager } from '../src/controls/ControlManager';
import { ControlResultBuilder } from '../src/controls/ControlResult';
export declare class MyMultiControlState extends ContainerControlState {
    count: number;
}
export declare class MyMultiControl extends ContainerControl {
    state: MyMultiControlState;
    constructor(props: {
        id: string;
    }, initialState?: MyMultiControlState);
    canHandle(input: ControlInput): Promise<boolean>;
    handle(input: ControlInput, resultBuilder: ControlResultBuilder): Promise<void>;
    createContentAct(count: number): LiteralContentAct;
    static makeValueControl(index: number): Control;
}
export declare class VariableControlsManager extends ControlManager {
    createControlTree(state: any): Control;
}
//# sourceMappingURL=dynamic_controls.spec.d.ts.map