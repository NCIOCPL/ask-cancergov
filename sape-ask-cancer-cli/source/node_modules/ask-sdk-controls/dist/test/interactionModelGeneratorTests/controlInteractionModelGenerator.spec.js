"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const mocha_1 = require("mocha");
const chai_1 = require("chai");
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const src_1 = require("../../src");
const SingleValueControlIntent_1 = require("../../src/intents/SingleValueControlIntent");
const GeneralControlIntent_1 = require("../../src/intents/GeneralControlIntent");
const ControlInteractionModelGenerator_1 = require("../../src/interactionModelGeneration/ControlInteractionModelGenerator");
const interactionModelForTest_1 = require("./interactionModelForTest");
const ModelTypes_1 = require("../../src/interactionModelGeneration/ModelTypes");
const Logger_1 = require("../../src/logging/Logger");
class SingleValueTestControl extends src_1.Control {
    // dummy canHandle, handle, canTakeInitiative and takeInitiative cause
    // the ControlInteractionModelGenerator only cares about updateInteractionModel and getTargetIds
    canHandle() {
        return true;
    }
    handle() { }
    canTakeInitiative() {
        return true;
    }
    takeInitiative() { }
    updateInteractionModel(generator, imData) {
        generator.addControlIntent(new SingleValueControlIntent_1.SingleValueControlIntent('TEST'), imData);
    }
    getTargetIds() {
        return ['test'];
    }
}
class SimpleTestControl extends src_1.Control {
    canHandle() {
        return true;
    }
    handle() { }
    canTakeInitiative() {
        return true;
    }
    takeInitiative() { }
    updateInteractionModel(generator, imData) {
        generator.addControlIntent(new GeneralControlIntent_1.GeneralControlIntent(), imData);
    }
    getTargetIds() {
        return ['test'];
    }
}
class TestControlManager extends src_1.ControlManager {
    createControlTree() {
        const rootControl = new src_1.ContainerControl({
            id: 'testRootControl',
        });
        rootControl
            .addChild(new SingleValueTestControl('singleValueTestControl'))
            .addChild(new SimpleTestControl('simpleTestControl'));
        return rootControl;
    }
}
const TEST_INVOCATION_NAME = 'TEST_INVOCATION_NAME';
mocha_1.suite('ControlInteractionModel Generator tests', () => {
    afterEach(() => {
        sinon_1.default.restore();
    });
    mocha_1.suite('buildCoreModelForControls tests', () => {
        mocha_1.test('buildCoreModelForControls should successfully build IM for controls tree', () => {
            sinon_1.default.stub(Logger_1.Logger.prototype, 'warn');
            const interactionModel = new ControlInteractionModelGenerator_1.ControlInteractionModelGenerator()
                .buildCoreModelForControls(new TestControlManager())
                .withInvocationName(TEST_INVOCATION_NAME)
                .build();
            const expectedInteractionModel = interactionModelForTest_1.jsonProvider.loadFromMockControls();
            chai_1.expect(interactionModel).deep.equal(expectedInteractionModel);
        });
        mocha_1.test('When locale is not supported, it should use default i18n resources ', () => {
            const interactionModel = new ControlInteractionModelGenerator_1.ControlInteractionModelGenerator()
                .buildCoreModelForControls(new TestControlManager({ locale: 'fr-FR' }))
                .withInvocationName(TEST_INVOCATION_NAME)
                .build();
            const expectedInteractionModel = interactionModelForTest_1.jsonProvider.loadFromMockControls();
            chai_1.expect(interactionModel).deep.equal(expectedInteractionModel);
        });
        mocha_1.test('i18nOverride should work as expected', () => {
            var _a, _b, _c;
            sinon_1.default.stub(Logger_1.Logger.prototype, 'warn');
            const targetInFR = {
                name: ModelTypes_1.SharedSlotType.TARGET,
                values: [
                    {
                        id: 'it',
                        name: {
                            value: 'la',
                            synonyms: [
                                'it',
                                "il",
                                "le"
                            ]
                        }
                    },
                ]
            };
            const i18nOverride = {
                fr: {
                    translation: {
                        SHARED_SLOT_TYPES_TARGET: targetInFR
                    }
                }
            };
            const interactionModel = new ControlInteractionModelGenerator_1.ControlInteractionModelGenerator()
                .buildCoreModelForControls(new TestControlManager({ locale: 'fr-FR', i18nResources: i18nOverride }))
                .withInvocationName(TEST_INVOCATION_NAME)
                .build();
            const expectedInteractionModel = interactionModelForTest_1.jsonProvider.loadFromMockControls();
            (_c = (_b = (_a = expectedInteractionModel.interactionModel) === null || _a === void 0 ? void 0 : _a.languageModel) === null || _b === void 0 ? void 0 : _b.types) === null || _c === void 0 ? void 0 : _c.map(slotType => {
                if (slotType.name === ModelTypes_1.SharedSlotType.TARGET) {
                    slotType.values = targetInFR.values;
                }
                return slotType;
            });
            chai_1.expect(interactionModel).deep.equal(expectedInteractionModel);
        });
        mocha_1.test('When provided override is is not complete, should use the default resource', () => {
            const emptyResourceInEN = {
                en: {
                    translation: {}
                }
            };
            const interactionModel = new ControlInteractionModelGenerator_1.ControlInteractionModelGenerator()
                .buildCoreModelForControls(new TestControlManager({ i18nResources: emptyResourceInEN }))
                .withInvocationName(TEST_INVOCATION_NAME)
                .build();
            const expectedInteractionModel = interactionModelForTest_1.jsonProvider.loadFromMockControls();
            chai_1.expect(interactionModel).deep.equal(expectedInteractionModel);
        });
        mocha_1.test('3P controls without dependency on ControlIntent should be allowed to update IM', () => {
            class TESTControl extends src_1.Control {
                canHandle() {
                    return true;
                }
                handle() { }
                canTakeInitiative() {
                    return true;
                }
                takeInitiative() { }
                updateInteractionModel(generator) {
                    generator.addIntents({
                        name: 'testIntent',
                        samples: ['hello world']
                    });
                }
                getTargetIds() {
                    return [];
                }
            }
            class SimpleControlManager extends src_1.ControlManager {
                createControlTree() {
                    return new TESTControl('test');
                }
            }
            const interactionModel = new ControlInteractionModelGenerator_1.ControlInteractionModelGenerator()
                .buildCoreModelForControls(new SimpleControlManager())
                .withInvocationName(TEST_INVOCATION_NAME)
                .build();
            chai_1.expect(interactionModel).deep.equal({
                interactionModel: {
                    languageModel: {
                        intents: [
                            {
                                name: 'testIntent',
                                samples: ['hello world']
                            }
                        ],
                        invocationName: TEST_INVOCATION_NAME,
                        types: [],
                    },
                    prompts: []
                },
            });
        });
    });
    mocha_1.suite('build tests', () => {
        mocha_1.test('build should throw warning message if targetSlotIds are missing', () => {
            const spy = sinon_1.default.stub(Logger_1.Logger.prototype, 'warn');
            const interactionModel = new ControlInteractionModelGenerator_1.ControlInteractionModelGenerator()
                .buildCoreModelForControls(new TestControlManager())
                .withInvocationName(TEST_INVOCATION_NAME)
                .build();
            chai_1.expect(spy.calledOnceWith('target slot with id test is not present in InteractionModel.')).eq(true);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,