"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const mocha_1 = require("mocha");
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const src_1 = require("../src");
const Control_1 = require("../src/controls/Control");
const ControlManager_1 = require("../src/controls/ControlManager");
const GeneralControlIntent_1 = require("../src/intents/GeneralControlIntent");
const TestingUtils_1 = require("../src/utils/testSupport/TestingUtils");
class RenderingDemoControl extends Control_1.Control {
    canHandle(input) {
        return true;
    }
    handle(input, resultBuilder) {
        // Adds three system acts to the result for demonstration purposes.
        /* The UnusableInputValueAct act includes some surface information (renderedReason) so that the act can use default render logic
         * This breaks the separation of Controller & View, but can be handy for simple cases. The simplest acts, e.g. ValueSetAct,
         * don't require any data for their defaults.
         *
         * Production code will likely not use this approach.
         */
        resultBuilder.addAct(new src_1.UnusableInputValueAct(this, { reasonCode: 'exampleReasonCode', value: '<dummy>', renderedReason: 'That input is unusable for reasons' }));
        /*
         * The next two are 'pure' acts that will be translated during the render-phase.
         * The InvalidValueAct is rendered by this Control in renderAct().  This is the most common approach.
         * The RequestValueAct is rendered by the ControlManager in render(). This is used when full control is necessary, such as to render two acts as a cohesive pair.
         */
        resultBuilder.addAct(new src_1.InvalidValueAct(this, { reasonCode: 'exampleReasonCode', value: '<dummy>' }));
        resultBuilder.addAct(new src_1.RequestValueAct(this, {}));
    }
    canTakeInitiative(input) {
        return false;
    }
    takeInitiative(input, resultBuilder) {
    }
    renderAct(act, input, responseBuilder) {
        if (act instanceof src_1.InvalidValueAct) {
            responseBuilder.addPromptFragment('The current value is invalid.'); // <<---- 'rendering by Control'. this is the most common approach
        }
        else {
            super.renderAct(act, input, responseBuilder); // <<---- super.renderAct delegates to act.render(). this is 'self-render'. see UnusableInputValueAct.render()
        }
    }
}
class RenderingDemoControlManager extends ControlManager_1.ControlManager {
    createControlTree(state, input) {
        return new RenderingDemoControl('root');
    }
    render(result, input, controlResponseBuilder) {
        for (const act of result.acts) {
            if (act instanceof src_1.RequestValueAct) {
                controlResponseBuilder.addPromptFragment('How many ducks?'); // <<---- 'render by ControlManager'.. this offers maximum power.
            }
            else {
                act.control.renderAct(act, input, controlResponseBuilder); // <<---- the general case is to 'render by Control'
            }
        }
    }
}
/**
 * Demonstrate standard ControlState object but with different Controls to handle them
 * the choice of control to use is by controlState.type and by registering the control types
 * with the UserInterface so that it can function as a control factory.
 */
mocha_1.suite("== Result rendering (renderingResult.spec.ts) ==", () => {
    mocha_1.test("Demonstrate SystemAct self-render & rendering overrides.", async () => {
        const requestHandler = new src_1.ControlHandler(new RenderingDemoControlManager());
        const invoker = new src_1.SkillInvoker(requestHandler);
        await TestingUtils_1.testTurn(invoker, 'U: ', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({})), 'A: Sorry, That input is unusable for reasons. The current value is invalid. How many ducks?');
    });
});
mocha_1.suite("== i18n overrides scenarios ==", () => {
    class MyControlManager extends ControlManager_1.ControlManager {
        createControlTree(state) {
            const topControl = new src_1.ContainerControl({ id: "root" });
            topControl.addChild(new src_1.DateControl({
                id: 'DateControl',
                validation: [src_1.DateControlValidations.PAST_DATE_ONLY]
            }));
            return topControl;
        }
    }
    beforeEach(() => {
        // set now to 2019-01-03
        sinon_1.default.useFakeTimers(new Date('2019-01-03T21:55:38.151Z'));
    });
    afterEach(() => {
        sinon_1.default.restore();
    });
    mocha_1.test("user-defined renderedReason getting translated and used with default InvalidValue prompt", async () => {
        const i18nOverride = {
            en: {
                translation: {
                    DATE_CONTROL_DEFAULT_PROMPT_VALIDATION_FAIL_PAST_DATE_ONLY: 'PAST DATE ONLY PLEASE'
                }
            }
        };
        const requestHandler = new src_1.ControlHandler(new MyControlManager({ i18nResources: i18nOverride }));
        const invoker = new src_1.SkillInvoker(requestHandler);
        await TestingUtils_1.testTurn(invoker, 'U: 2020', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { 'AMAZON.DATE': '2020' })), 'A: Sorry but that\'s not a valid date because PAST DATE ONLY PLEASE. What date?');
    });
});
//# sourceMappingURL=data:application/json;base64,