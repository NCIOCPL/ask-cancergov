"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License').
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the 'license' file accompanying this file. This file is distributed
 * on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const mocha_1 = require("mocha");
const Strings_1 = require("../../src/constants/Strings");
const ControlManager_1 = require("../../src/controls/ControlManager");
const SingleValueControlIntent_1 = require("../../src/intents/SingleValueControlIntent");
const AmazonBuiltInIntent_1 = require("../../src/intents/AmazonBuiltInIntent");
const ControlHandler_1 = require("../../src/runtime/ControlHandler");
const TestingUtils_1 = require("../../src/utils/testSupport/TestingUtils");
const ValueControl_1 = require("../../src/commonControls/ValueControl");
const IntentUtils_1 = require("../../src/utils/IntentUtils");
TestingUtils_1.waitForDebugger();
mocha_1.suite('ValueControl e2e tests', () => {
    class ValueControlManager extends ControlManager_1.ControlManager {
        createControlTree(state) {
            return new ValueControl_1.ValueControl({
                id: 'userName',
                slotType: 'LOGIN.name',
                confirmationRequired: true,
                validation: (state, input) => ['Alexa', 'Amazon', 'Redfox'].includes(state.value) ? true : { renderedReason: 'Login name validation failed' },
                prompts: {
                    requestValue: 'What is your login name?',
                    valueSet: ''
                },
            });
        }
    }
    mocha_1.test('userName value valid, needs explicit affirming', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ValueControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: Amazon', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Amazon' })),
            'A: Was that Amazon?',
            'U: Yeah.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
            'A: Great.'
        ]);
    });
    mocha_1.test('userName value after disaffirmation, requires request value act', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ValueControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: Amazon', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Amazon' })),
            'A: Was that Amazon?',
            'U: No.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.NoIntent)),
            'A: My mistake. What is your login name?'
        ]);
    });
    mocha_1.test('userName value set and changing it requires confirmation and value changed act', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ValueControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: Alexa', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Alexa' })),
            'A: Was that Alexa?',
            'U: Yes.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
            'A: Great.',
            'U: Change to Redfox.', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Redfox', "action": Strings_1.Strings.Action.Change })),
            'A: OK, I changed it to Redfox. Was that Redfox?',
            'U: Yes.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
            'A: Great.',
        ]);
    });
    mocha_1.test('userName value set and changing it to invalid requires confirmation and checks for validations', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ValueControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: Alexa', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Alexa' })),
            'A: Was that Alexa?',
            'U: Yes.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
            'A: Great.',
            'U: Change to Apple.', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Apple', "action": Strings_1.Strings.Action.Change })),
            'A: Sorry, Apple is not a valid choice because Login name validation failed. What should I change it to?',
            'U: Amazon', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Amazon' })),
            'A: OK, I changed it to Amazon. Was that Amazon?',
            'U: No.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.NoIntent)),
            'A: My mistake. What is your login name?',
            'U: Amazon', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Amazon' })),
            'A: OK, I changed it to Amazon. Was that Amazon?',
            'U: Yes.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
            'A: Great.'
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,