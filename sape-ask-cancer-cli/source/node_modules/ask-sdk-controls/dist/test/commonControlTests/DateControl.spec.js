"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestAct = exports.DateManagerWithConfirmation = exports.DateManager2 = exports.DateManager = void 0;
const tslib_1 = require("tslib");
const chai_1 = require("chai");
const mocha_1 = require("mocha");
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const DateControl_1 = require("../../src/commonControls/DateControl");
const Strings_1 = require("../../src/constants/Strings");
const ControlManager_1 = require("../../src/controls/ControlManager");
const ControlResult_1 = require("../../src/controls/ControlResult");
const GeneralControlIntent_1 = require("../../src/intents/GeneralControlIntent");
const ControlResponseBuilder_1 = require("../../src/responseGeneration/ControlResponseBuilder");
const ControlHandler_1 = require("../../src/runtime/ControlHandler");
const TestingUtils_1 = require("../../src/utils/testSupport/TestingUtils");
const OrdinalControlIntent_1 = require("../../src/intents/OrdinalControlIntent");
const src_1 = require("../../src");
function dateControlUnderTest() {
    return new DateControl_1.DateControl({
        id: 'dateControl',
        validation: [DateControl_1.DateControlValidations.FUTURE_DATE_ONLY],
        required: true,
        interactionModel: {
            targets: ['food', Strings_1.Strings.Target.Date],
            actions: {
                set: [Strings_1.Strings.Action.Set, 'deliver'],
                change: [Strings_1.Strings.Action.Change]
            },
        }
    });
}
function dateControlUnderTest2() {
    return new DateControl_1.DateControl({
        id: 'dateControl2',
        validation: [DateControl_1.DateControlValidations.PAST_DATE_ONLY],
        required: true,
        interactionModel: {
            targets: [Strings_1.Strings.Target.Date],
            actions: {
                set: [Strings_1.Strings.Action.Set],
                change: [Strings_1.Strings.Action.Change]
            },
        }
    });
}
class DateManager extends ControlManager_1.ControlManager {
    createControlTree() {
        return dateControlUnderTest();
    }
}
exports.DateManager = DateManager;
class DateManager2 extends ControlManager_1.ControlManager {
    createControlTree() {
        return dateControlUnderTest2();
    }
}
exports.DateManager2 = DateManager2;
class DateManagerWithConfirmation extends ControlManager_1.ControlManager {
    createControlTree() {
        return new DateControl_1.DateControl({
            id: 'dateControlConfirm',
            required: true,
            confirmationRequired: true,
            validation: DateControl_1.DateControlValidations.PAST_DATE_ONLY,
            interactionModel: {
                targets: [Strings_1.Strings.Target.Date],
                actions: {
                    set: [Strings_1.Strings.Action.Set],
                    change: [Strings_1.Strings.Action.Change]
                },
            },
            prompts: {
                valueSet: '',
                valueChanged: ''
            }
        });
    }
}
exports.DateManagerWithConfirmation = DateManagerWithConfirmation;
class TestAct extends src_1.ContentAct {
    constructor(control, test) {
        super(control);
        this.test = test;
    }
    render(input, responseBuilder) {
        throw new Error('Not implemented.');
    }
}
exports.TestAct = TestAct;
TestingUtils_1.waitForDebugger();
mocha_1.suite('DateControl tests', () => {
    beforeEach(() => {
        // set now to 2019-01-03
        sinon_1.default.useFakeTimers(new Date('2019-01-03T21:55:38.151Z'));
    });
    afterEach(() => {
        sinon_1.default.restore();
    });
    mocha_1.suite('DateControl scenarios', () => {
        const emptyInput = TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({}));
        mocha_1.test('set value with valid date should be processed.', async () => {
            const control = dateControlUnderTest();
            const input = TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { 'AMAZON.DATE': '2020' }));
            const canHandleResult = control.canHandle(input);
            chai_1.expect(canHandleResult).true;
            const result = new ControlResult_1.ControlResultBuilder(undefined);
            await control.handle(input, result);
            chai_1.expect(result.acts).length(1);
            chai_1.expect(result.acts[0]).instanceOf(src_1.ValueSetAct);
            chai_1.expect(result.acts[0].payload.value).eq('2020');
        });
        mocha_1.test('set value with invalid choice should be rejected.', async () => {
            const control = dateControlUnderTest();
            const input = TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { 'action': Strings_1.Strings.Action.Set, 'target': 'food', 'AMAZON.DATE': '2019-01-01' }));
            const canHandleResult = control.canHandle(input);
            chai_1.expect(canHandleResult).true;
            const result = new ControlResult_1.ControlResultBuilder(undefined);
            await control.handle(input, result);
            chai_1.expect(result.acts).length(2);
            chai_1.expect(result.acts[0]).instanceOf(src_1.InvalidValueAct);
            chai_1.expect(result.acts[1]).instanceOf(src_1.RequestValueAct);
        });
        mocha_1.test('change date intent should be handled.', async () => {
            const control = dateControlUnderTest();
            const input = TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Change, target: Strings_1.Strings.Target.Date }));
            const canHandleResult = control.canHandle(input);
            chai_1.expect(canHandleResult).true;
            const result = new ControlResult_1.ControlResultBuilder(undefined);
            await control.handle(input, result);
            chai_1.expect(result.acts).length(1);
            chai_1.expect(result.acts[0]).instanceOf(src_1.RequestChangedValueAct);
        });
        mocha_1.test('test controller clear state function.', async () => {
            const control = dateControlUnderTest();
            const input = TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { 'AMAZON.DATE': '2019-01-01' }));
            const canHandleResult = control.canHandle(input);
            chai_1.expect(canHandleResult).true;
            const result = new ControlResult_1.ControlResultBuilder(undefined);
            await control.handle(input, result);
            chai_1.expect(result.acts).length(2);
            chai_1.expect(result.acts[0]).instanceOf(src_1.InvalidValueAct);
            chai_1.expect(result.acts[1]).instanceOf(src_1.RequestValueAct);
            control.clear();
            chai_1.expect(control.state.value).equal(undefined);
        });
        mocha_1.test('test controller renderResultItem throws error for unhandled acts.', async () => {
            const control = dateControlUnderTest();
            const input = TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Change, target: Strings_1.Strings.Target.Date }));
            const result = new ControlResponseBuilder_1.ControlResponseBuilder(undefined);
            try {
                control.renderAct(new TestAct(control, 'test'), input, result);
            }
            catch (err) {
                chai_1.expect(err.message).equal('No NLG for TestAct:{"takesInitiative":false,"test":"test","controlId":"dateControl"}');
            }
        });
        mocha_1.test('test controller handle call with invalid canHandle boolean throws error.', async () => {
            const control = dateControlUnderTest();
            const input = TestingUtils_1.TestInput.of(OrdinalControlIntent_1.OrdinalControlIntent.of({}));
            const result = new ControlResult_1.ControlResultBuilder(undefined);
            try {
                await control.handle(input, result);
            }
            catch (err) {
                chai_1.expect(err.message).equal(`${OrdinalControlIntent_1.OrdinalControlIntent.name} can not be handled by ${control.constructor.name}.`);
            }
        });
        mocha_1.test('test controller takeInitiative call with invalid canTakeInitiative throws error', async () => {
            const control = dateControlUnderTest();
            const input = emptyInput;
            const result = new ControlResult_1.ControlResultBuilder(undefined);
            try {
                await control.takeInitiative(input, result);
            }
            catch (err) {
                chai_1.expect(err.message).equal('DateControl: takeInitiative called but this.initiativeFunc is not set. canTakeInitiative() should be called first to set this.initiativeFunc.');
            }
        });
        mocha_1.test('test controller askElicitationQuestion throws error for invalid action.', async () => {
            const control = dateControlUnderTest();
            const input = emptyInput;
            const result = new ControlResult_1.ControlResultBuilder(undefined);
            try {
                await control.askElicitationQuestion(input, result, 'delete');
            }
            catch (err) {
                chai_1.expect(err.message).equal('Unhandled. Unknown elicitationAction: delete');
            }
        });
    });
    mocha_1.suite('DateControl e2e tests', () => {
        mocha_1.test('Respond to Alexa\'s question with valid date', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new DateManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: set', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Set })),
                'A: What date?',
                'U: 2020', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2020' })),
                'A: OK.',
            ]);
        });
        mocha_1.test('Respond to Alexa\'s question with invalid date', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new DateManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: 2018', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2018' })),
                'A: Sorry but that\'s not a valid date because the date cannot be less than today. What date?',
                'U: 2020', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2020-01-01' })),
                'A: OK.'
            ]);
        });
        mocha_1.test('Respond to Alexa\'s question with invalid past date', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new DateManager2());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: 2021', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2021' })),
                'A: Sorry but that\'s not a valid date because the date cannot be greater than today. What date?',
                'U: 2018', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2018' })),
                'A: OK.',
            ]);
        });
        mocha_1.test('Change date with value after setting', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new DateManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: 2020', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2020' })),
                'A: OK.',
                'U: change date to 2021', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { 'action': Strings_1.Strings.Action.Change, 'target': Strings_1.Strings.Target.Date, "AMAZON.DATE": '2021' })),
                'A: Changed from 2020 to 2021.',
            ]);
        });
        mocha_1.test('Change date to invalid value after setting', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new DateManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: 2020', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2020' })),
                'A: OK.',
                'U: change date to 2016', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { 'action': Strings_1.Strings.Action.Change, 'target': Strings_1.Strings.Target.Date, "AMAZON.DATE": '2016' })),
                'A: Sorry but that\'s not a valid date because the date cannot be less than today. What should I change it to?',
                'U: 2021', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { 'action': Strings_1.Strings.Action.Change, "AMAZON.DATE": '2021' })),
                'A: Changed from 2016 to 2021.',
            ]);
        });
        mocha_1.test('Change date after setting', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new DateManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: 2020', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2020' })),
                'A: OK.',
                'U: change', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Change })),
                'A: What should I change it to?',
                'U: change to 2021', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { 'action': Strings_1.Strings.Action.Change, "AMAZON.DATE": '2021' })),
                'A: Changed from 2020 to 2021.',
            ]);
        });
        mocha_1.test('Change date after setting and later set it to a different value', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new DateManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: 1993', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '1993' })),
                'A: Sorry but that\'s not a valid date because the date cannot be less than today. What date?',
                'U: 2020', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2020' })),
                'A: OK.',
                'U: change', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Change })),
                'A: What should I change it to?',
                'U: change to 2021', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "action": Strings_1.Strings.Action.Change, "AMAZON.DATE": '2021' })),
                'A: Changed from 2020 to 2021.',
                'U: actually set it to', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Set })),
                'A: What date?',
                'U: 2025', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2025' })),
                'A: OK.'
            ]);
        });
        mocha_1.test('Change date to invalid value after setting', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new DateManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: change', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Change })),
                'A: What should I change it to?',
                'U: 2018', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2018' })),
                'A: Sorry but that\'s not a valid date because the date cannot be less than today. What should I change it to?',
                'U: 2021', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2021' })),
                'A: Changed from 2018 to 2021.'
            ]);
        });
        mocha_1.test('date valid, needs explicit affirming', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new DateManagerWithConfirmation());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: 2018', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2018' })),
                'A: Was that 2018?',
                'U: Yeah.', TestingUtils_1.TestInput.of(src_1.IntentBuilder.of(src_1.AmazonIntent.YesIntent)),
                'A: Great.'
            ]);
        });
        mocha_1.test('date value after disaffirmation, requires request value act', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new DateManagerWithConfirmation());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: 2018', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2018' })),
                'A: Was that 2018?',
                'U: No.', TestingUtils_1.TestInput.of(src_1.IntentBuilder.of(src_1.AmazonIntent.NoIntent)),
                'A: My mistake. What date?'
            ]);
        });
        mocha_1.test('date value set and changing it requires value changed act', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new DateManagerWithConfirmation());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: 2018', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2018' })),
                'A: Was that 2018?',
                'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
                'A: Great.',
                'U: Change to 08-12-1993.', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '08-12-1993', "action": Strings_1.Strings.Action.Change })),
                'A: Was that 08-12-1993?',
                'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
                'A: Great.'
            ]);
        });
        mocha_1.test('date value set and changing it to invalid requires confirmation and checks for validations', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new DateManagerWithConfirmation());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: 2018', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2018' })),
                'A: Was that 2018?',
                'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
                'A: Great.',
                'U: Change to 2021.', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2021', "action": Strings_1.Strings.Action.Change })),
                'A: Sorry but that\'s not a valid date because the date cannot be greater than today. What should I change it to?',
                'U: 2000.', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2000' })),
                'A: Was that 2000?',
                'U: No.', TestingUtils_1.TestInput.of(src_1.IntentBuilder.of(src_1.AmazonIntent.NoIntent)),
                'A: My mistake. What date?',
                'U: 2016.', TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { "AMAZON.DATE": '2016' })),
                'A: Was that 2016?',
                'U: Yes.', TestingUtils_1.TestInput.of(src_1.IntentBuilder.of(src_1.AmazonIntent.YesIntent)),
                'A: Great.'
            ]);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,