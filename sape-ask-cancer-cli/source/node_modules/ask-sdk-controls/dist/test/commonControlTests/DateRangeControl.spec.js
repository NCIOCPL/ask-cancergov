"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chai_1 = require("chai");
const mocha_1 = require("mocha");
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const ArrayUtil = tslib_1.__importStar(require("../../src/utils/ArrayUtils"));
const src_1 = require("../../src");
const Strings_1 = require("../../src/constants/Strings");
const ConjunctionControlIntent_1 = require("../../src/intents/ConjunctionControlIntent");
function dateRangeControlUnderTest(confirmationRequired = false) {
    return new src_1.DateRangeControl({
        id: 'DateRangeControl',
        interactionModel: {
            targets: {
                self: ['photos', Strings_1.Strings.Target.Date]
            },
            actions: {
                set: ['show', Strings_1.Strings.Action.Set],
                change: [Strings_1.Strings.Action.Change]
            },
        },
        validation: {
            rangeValid: [src_1.DateRangeControlValidations.START_BEFORE_END],
            startDateValid: [src_1.DateControlValidations.PAST_DATE_ONLY],
            endDateValid: [src_1.DateControlValidations.PAST_DATE_ONLY]
        },
        required: true,
        confirmationRequired,
    });
}
class StrictDateRangeControlManager extends src_1.ControlManager {
    createControlTree(state) {
        return dateRangeControlUnderTest();
    }
}
class ConfirmationDateRangeControlManager extends src_1.ControlManager {
    createControlTree(state) {
        return dateRangeControlUnderTest(true);
    }
}
const askForStartPrompts = ['start date please ?', 'Please give me the start date.'];
const valueSetPrompts = ['Ok.', 'Roger.'];
const askForEndPrompts = ['End date please ?', 'Please give me the end date.'];
const askForBothPrompts = ['What is the start date and end date you want ?', 'Please give me the start date and the end date.'];
class VariableResponseTwoDatesControlManager extends src_1.ControlManager {
    createControlTree(state) {
        return new src_1.DateRangeControl({
            id: 'DateRangeControl',
            interactionModel: {
                targets: {
                    self: ['photos', Strings_1.Strings.Target.Date]
                },
                actions: {
                    set: ['show', Strings_1.Strings.Action.Set],
                    change: [Strings_1.Strings.Action.Change]
                },
            },
            validation: {
                rangeValid: [src_1.DateRangeControlValidations.START_BEFORE_END]
            },
            prompts: {
                startDate: {
                    requestValue: askForStartPrompts,
                    valueSet: valueSetPrompts
                },
                endDate: {
                    requestValue: askForEndPrompts,
                    valueSet: valueSetPrompts
                },
                requestValue: askForBothPrompts
            }
        });
    }
}
mocha_1.suite('DateRangeControl', () => {
    beforeEach(() => {
        // set now to 2019-01-03
        sinon_1.default.useFakeTimers(new Date('2019-01-03T21:55:38.151Z'));
    });
    afterEach(() => {
        sinon_1.default.restore();
    });
    mocha_1.suite('E2E tests', () => {
        mocha_1.suite('Only DateRangeControlIntent & DateControlIntent', () => {
            mocha_1.test('both start date and end date provided', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017 and end date to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action.a': Strings_1.Strings.Action.Set,
                        'target.a': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE.a': '2017',
                        'action.b': Strings_1.Strings.Action.Set,
                        'target.b': Strings_1.Strings.Target.EndDate,
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                ]);
            });
            mocha_1.test('both start date and end date provided but in simple words', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                ]);
            });
            mocha_1.test('should ask for end date when only start date is set', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The start date is 2017. What is the end date you want?',
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2018',
                    })),
                    'A: Got it. The end date is 2018.',
                ]);
            });
            mocha_1.test('should ask for start date when end start date is set', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set end date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.EndDate,
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The end date is 2017. What is the start date you want?',
                    'U: 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2016',
                    })),
                    'A: Got it. The start date is 2016.',
                ]);
            });
            mocha_1.test('raw value input should use focus to determine target', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The start date is 2017. What is the end date you want?',
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2018',
                    })),
                    'A: Got it. The end date is 2018.',
                    'U: actually 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Change,
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The end date is changed to 2017.',
                ]);
            });
            mocha_1.test('should mention both change if two value changed together', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The start date is 2017. What is the end date you want?',
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2018',
                    })),
                    'A: Got it. The end date is 2018.',
                    'U: actually 2015 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016',
                    })),
                    'A: Got it. The start date is changed to 2015-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('only raw value input should be regarded as range if no previous context', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { 'AMAZON.DATE': '2018' })),
                    'A: Got it. The start date is 2018-01-01 and the end date is 2018-12-31.',
                ]);
            });
            mocha_1.test('When there is lastInitiative child and focus is actually on parent, raw value should be consumed by parent', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The start date is 2017. What is the end date you want?',
                    'U: Actually change date from 2015-01-01 to 2016-12-31', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Change,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016'
                    })),
                    'A: Got it. The start date is 2015-01-01 and the end date is 2016-12-31.',
                    'U: change date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Change,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The start date is changed to 2017-01-01 and the end date is changed to 2017-12-31.',
                ]);
            });
            mocha_1.test('when target ambiguous, and two value provided, should transfer date to startDate and endDate', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                ]);
            });
            mocha_1.test('when focus is both, one value will be considered as both', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2016'
                    })),
                    'A: Got it. The start date is changed to 2016-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('when focus is both, ambiguous target will be considered as both', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: set date to 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE': '2016'
                    })),
                    'A: Got it. The start date is changed to 2016-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
        });
        mocha_1.suite('Integrate with two builtin validation rules', () => {
            mocha_1.test('should ask for valid end date when end date fails validations', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2020', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2020',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2020-12-31. Sorry but that\'s not a valid end date because the date cannot be greater than today. What should I change the end date to?',
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2018',
                    })),
                    'A: Got it. The end date is changed to 2018.'
                ]);
            });
            mocha_1.test('should ask for valid start date when start date fails validations', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2020', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE': '2020',
                    })),
                    'A: Sorry but that\'s not a valid start date because the date cannot be greater than today. What is the start date you want?',
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2018',
                    })),
                    'A: Got it. The start date is 2018. What is the end date you want?',
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2018',
                    })),
                    'A: Got it. The end date is 2018.',
                ]);
            });
            mocha_1.test('should ask for both start date and end date when both value changed and start date is past end date', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2016',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2016-12-31. Sorry, invalid range because start date can not be greater than end date. What is the start date and end date you want?',
                ]);
            });
            mocha_1.test('should ask for valid end date when start date is past end date, and only end date is changed', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2016 to 2017', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE.a': '2016',
                        'AMAZON.DATE.b': '2017',
                    })),
                    'A: Got it. The start date is 2016-01-01 and the end date is 2017-12-31.',
                    'U: change end date to 2015', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Change,
                        'target': Strings_1.Strings.Target.EndDate,
                        'AMAZON.DATE': '2015'
                    })),
                    'A: Got it. The end date is changed to 2015. Sorry, invalid range because start date can not be greater than end date. What is the end date you want?',
                ]);
            });
        });
        mocha_1.suite('Integrate with SimpleControlIntent & ConjunctionControlIntent', () => {
            mocha_1.test('change with ambiguous target will ask for both start and end when focus is both, and treat one value input as a range', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: Change date', src_1.TestInput.of(src_1.GeneralControlIntent.of({
                        action: Strings_1.Strings.Action.Change,
                        target: Strings_1.Strings.Target.Date
                    })),
                    'A: What is the start date and end date you want?',
                    'U: 2015 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016',
                    })),
                    'A: Got it. The start date is changed to 2015-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('change with ambiguous target will only change start when focus is start', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: Change start date to 2015', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Change,
                        'target': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE': '2015'
                    })),
                    'A: Got it. The start date is changed to 2015.',
                    'U: change date to 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Change,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE': '2016',
                    })),
                    'A: Got it. The start date is changed to 2016.',
                ]);
            });
            mocha_1.test('change start date and end date', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017 and set end date to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action.a': Strings_1.Strings.Action.Set,
                        'action.b': Strings_1.Strings.Action.Set,
                        'target.a': Strings_1.Strings.Target.StartDate,
                        'target.b': Strings_1.Strings.Target.EndDate,
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: Change start date and end date', src_1.TestInput.of(ConjunctionControlIntent_1.ConjunctionControlIntent.of({
                        'action': Strings_1.Strings.Action.Change,
                        'target.a': Strings_1.Strings.Target.StartDate,
                        'target.b': Strings_1.Strings.Target.EndDate
                    })),
                    'A: What is the start date and end date you want?',
                    'U: 2015 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016'
                    })),
                    'A: Got it. The start date is changed to 2015-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('change with specific target', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: Change start date', src_1.TestInput.of(src_1.GeneralControlIntent.of({
                        action: Strings_1.Strings.Action.Change,
                        target: Strings_1.Strings.Target.StartDate,
                    })),
                    'A: What should I change the start date to?',
                    'U: 2015', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2015',
                    })),
                    'A: Got it. The start date is changed to 2015.',
                ]);
            });
            mocha_1.test('when focus is both, action "change" will be considered to change both start and end date', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: change', src_1.TestInput.of(src_1.GeneralControlIntent.of({
                        action: Strings_1.Strings.Action.Change,
                    })),
                    'A: What is the start date and end date you want?',
                    'U: 2015 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016'
                    })),
                    'A: Got it. The start date is changed to 2015-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('when focus is start date, action "change" will be considered to change start date', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: change start date to 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Change,
                        'target': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE': '2016',
                    })),
                    'A: Got it. The start date is changed to 2016.',
                    'U: change', src_1.TestInput.of(src_1.GeneralControlIntent.of({
                        action: Strings_1.Strings.Action.Change,
                    })),
                    'A: What should I change the start date to?',
                    'U: 2015', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2015',
                    })),
                    'A: Got it. The start date is changed to 2015.',
                ]);
            });
        });
        mocha_1.suite('Integrate with customized action & target', () => {
            mocha_1.test('DateRangeControl should understand customized target photos and action show', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: show photos from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': 'show',
                        'target': 'photos',
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                ]);
            });
            mocha_1.test('GeneralControlIntent & ConjunctionControlIntent should understand customized target photos', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: show photos from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': 'show',
                        'target': 'photos',
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: change photos', src_1.TestInput.of(src_1.GeneralControlIntent.of({
                        action: Strings_1.Strings.Action.Change,
                        target: 'photos',
                    })),
                    'A: What is the start date and end date you want?',
                    'U: 2015 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016'
                    })),
                    'A: Got it. The start date is changed to 2015-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
        });
        mocha_1.suite('Confirmation required scenarios', () => {
            mocha_1.test('should be able to confirm both start and end and accept affirmation', async () => {
                const handler = new src_1.ControlHandler(new ConfirmationDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017 and end date to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action.a': Strings_1.Strings.Action.Set,
                        'target.a': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE.a': '2017',
                        'action.b': Strings_1.Strings.Action.Set,
                        'target.b': Strings_1.Strings.Target.EndDate,
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Was that 2017-01-01 to 2018-12-31?',
                    'U: Yes', src_1.TestInput.intent(src_1.AmazonIntent.YesIntent),
                    'A: Great. Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                ]);
            });
            mocha_1.test('should be able to confirm both start and end and accept disaffirmation', async () => {
                const handler = new src_1.ControlHandler(new ConfirmationDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017 and end date to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action.a': Strings_1.Strings.Action.Set,
                        'target.a': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE.a': '2017',
                        'action.b': Strings_1.Strings.Action.Set,
                        'target.b': Strings_1.Strings.Target.EndDate,
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Was that 2017-01-01 to 2018-12-31?',
                    'U: No', src_1.TestInput.intent(src_1.AmazonIntent.NoIntent),
                    'A: My mistake. What is the start date and end date you want?',
                ]);
            });
            mocha_1.test('should be able to confirm date range and accept affirmation', async () => {
                const handler = new src_1.ControlHandler(new ConfirmationDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2016',
                    })),
                    'A: Was that 2016-01-01 to 2016-12-31?',
                    'U: Yes', src_1.TestInput.intent(src_1.AmazonIntent.YesIntent),
                    'A: Great. Got it. The start date is 2016-01-01 and the end date is 2016-12-31.',
                ]);
            });
            mocha_1.test('Should first do confirmation then do validation, and the second input also need to be confirmed', async () => {
                const handler = new src_1.ControlHandler(new ConfirmationDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2018 and end date to 2017', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action.a': Strings_1.Strings.Action.Set,
                        'target.a': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE.a': '2018',
                        'action.b': Strings_1.Strings.Action.Set,
                        'target.b': Strings_1.Strings.Target.EndDate,
                        'AMAZON.DATE.b': '2017',
                    })),
                    'A: Was that 2018-01-01 to 2017-12-31?',
                    'U: Yes', src_1.TestInput.intent(src_1.AmazonIntent.YesIntent),
                    'A: Sorry, invalid range because start date can not be greater than end date. What is the start date and end date you want?',
                    'U: 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2016',
                    })),
                    'A: Was that 2016-01-01 to 2016-12-31?',
                    'U: Yes', src_1.TestInput.intent(src_1.AmazonIntent.YesIntent),
                    'A: Great. Got it. The start date is changed to 2016-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('should work well with change both', async () => {
                const handler = new src_1.ControlHandler(new ConfirmationDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017 and end date to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action.a': Strings_1.Strings.Action.Set,
                        'target.a': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE.a': '2017',
                        'action.b': Strings_1.Strings.Action.Set,
                        'target.b': Strings_1.Strings.Target.EndDate,
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Was that 2017-01-01 to 2018-12-31?',
                    'U: Yes', src_1.TestInput.intent(src_1.AmazonIntent.YesIntent),
                    'A: Great. Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: Change date', src_1.TestInput.of(src_1.GeneralControlIntent.of({
                        action: Strings_1.Strings.Action.Change,
                        target: Strings_1.Strings.Target.Date
                    })),
                    'A: What is the start date and end date you want?',
                    'U: 2015 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016',
                    })),
                    'A: Was that 2015-01-01 to 2016-12-31?',
                    'U: Yes', src_1.TestInput.intent(src_1.AmazonIntent.YesIntent),
                    'A: Great. Got it. The start date is changed to 2015-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('should work well with change range', async () => {
                const handler = new src_1.ControlHandler(new ConfirmationDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017 and end date to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action.a': Strings_1.Strings.Action.Set,
                        'target.a': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE.a': '2017',
                        'action.b': Strings_1.Strings.Action.Set,
                        'target.b': Strings_1.Strings.Target.EndDate,
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Was that 2017-01-01 to 2018-12-31?',
                    'U: Yes', src_1.TestInput.intent(src_1.AmazonIntent.YesIntent),
                    'A: Great. Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: change date to 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Change,
                        'target': Strings_1.Strings.Target.Date,
                        'AMAZON.DATE': '2016',
                    })),
                    'A: Was that 2016-01-01 to 2016-12-31?',
                    'U: Yes', src_1.TestInput.intent(src_1.AmazonIntent.YesIntent),
                    'A: Great. Got it. The start date is changed to 2016-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('should work well with setting child value', async () => {
                const handler = new src_1.ControlHandler(new ConfirmationDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017 and end date to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action.a': Strings_1.Strings.Action.Set,
                        'target.a': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE.a': '2017',
                        'action.b': Strings_1.Strings.Action.Set,
                        'target.b': Strings_1.Strings.Target.EndDate,
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Was that 2017-01-01 to 2018-12-31?',
                    'U: Yes', src_1.TestInput.intent(src_1.AmazonIntent.YesIntent),
                    'A: Great. Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: set start date to 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE': '2016',
                    })),
                    'A: Got it. The start date is 2016. Was that 2016?',
                    'U: Yes', src_1.TestInput.intent(src_1.AmazonIntent.YesIntent),
                    'A: Great.',
                ]);
            });
            mocha_1.test('should work well with children\'s validation rule', async () => {
                const handler = new src_1.ControlHandler(new ConfirmationDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017 and end date to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action.a': Strings_1.Strings.Action.Set,
                        'target.a': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE.a': '2017',
                        'action.b': Strings_1.Strings.Action.Set,
                        'target.b': Strings_1.Strings.Target.EndDate,
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Was that 2017-01-01 to 2018-12-31?',
                    'U: Yes', src_1.TestInput.intent(src_1.AmazonIntent.YesIntent),
                    'A: Great. Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: set start date to 2020', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE': '2020',
                    })),
                    'A: Sorry but that\'s not a valid start date because the date cannot be greater than today. What is the start date you want?',
                    'U: set start date to 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': Strings_1.Strings.Target.StartDate,
                        'AMAZON.DATE': '2016',
                    })),
                    'A: Got it. The start date is 2016. Was that 2016?',
                    'U: Yes', src_1.TestInput.intent(src_1.AmazonIntent.YesIntent),
                    'A: Great.',
                ]);
            });
        });
    });
    mocha_1.suite('Variable response tests', () => {
        beforeEach(() => {
            // Force to return the last one in the array
            sinon_1.default.stub(ArrayUtil, 'randomlyPick').callsFake((input) => input[input.length - 1]);
        });
        afterEach(() => {
            sinon_1.default.restore();
        });
        mocha_1.test('should ask for end date when only start date is set, ', async () => {
            const handler = new src_1.ControlHandler(new VariableResponseTwoDatesControlManager());
            await src_1.testE2E(handler, [
                'U: set start date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                    'action': Strings_1.Strings.Action.Set,
                    'target': Strings_1.Strings.Target.StartDate,
                    'AMAZON.DATE': '2017',
                })),
                'A: Roger. Please give me the end date.',
                'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                    'AMAZON.DATE': '2018',
                })),
                'A: Roger.'
            ]);
        });
    });
    mocha_1.suite('DateRangeControl scenarios', () => {
        mocha_1.test('unknown single target should be rejected', async () => {
            const control = dateRangeControlUnderTest();
            const input = src_1.TestInput.of(src_1.DateRangeControlIntent.of({ 'action': Strings_1.Strings.Action.Set, 'target': 'food', 'AMAZON.DATE.a': '2016', 'AMAZON.DATE.b': '2017' }));
            const canHandleResult = await control.canHandle(input);
            chai_1.expect(canHandleResult).false;
        });
        mocha_1.test('two targets with either one unknown should be rejected', async () => {
            const control = dateRangeControlUnderTest();
            const input = src_1.TestInput.of(src_1.DateRangeControlIntent.of({ 'action': Strings_1.Strings.Action.Set, 'target.a': Strings_1.Strings.Target.StartDate, 'target.b': 'food', 'AMAZON.DATE.a': '2016', 'AMAZON.DATE.b': '2017' }));
            const canHandleResult = await control.canHandle(input);
            chai_1.expect(canHandleResult).false;
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0ZVJhbmdlQ29udHJvbC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdC9jb21tb25Db250cm9sVGVzdHMvRGF0ZVJhbmdlQ29udHJvbC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7O0FBRUgsK0JBQThCO0FBQzlCLGlDQUEwQztBQUMxQywwREFBMEI7QUFDMUIsOEVBQXdEO0FBQ3hELG1DQU1tQjtBQUNuQix5REFBMkQ7QUFDM0QseUZBQXNGO0FBRXRGLFNBQVMseUJBQXlCLENBQUMsdUJBQWdDLEtBQUs7SUFDcEUsT0FBTyxJQUFJLHNCQUFnQixDQUN2QjtRQUNJLEVBQUUsRUFBRSxrQkFBa0I7UUFDdEIsZ0JBQWdCLEVBQUU7WUFDZCxPQUFPLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLGlCQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQzthQUNsQztZQUNELE9BQU8sRUFBRTtnQkFDTCxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsaUJBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO2dCQUMzQixNQUFNLEVBQUUsQ0FBQyxpQkFBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7YUFDNUI7U0FDSjtRQUNELFVBQVUsRUFBRTtZQUNSLFVBQVUsRUFBRSxDQUFDLGlDQUEyQixDQUFDLGdCQUFnQixDQUFDO1lBQzFELGNBQWMsRUFBRSxDQUFDLDRCQUFzQixDQUFDLGNBQWMsQ0FBQztZQUN2RCxZQUFZLEVBQUUsQ0FBQyw0QkFBc0IsQ0FBQyxjQUFjLENBQUM7U0FDeEQ7UUFDRCxRQUFRLEVBQUUsSUFBSTtRQUNkLG9CQUFvQjtLQUN2QixDQUNKLENBQUM7QUFDTixDQUFDO0FBQ0QsTUFBTSw2QkFBOEIsU0FBUSxvQkFBYztJQUN0RCxpQkFBaUIsQ0FBQyxLQUFVO1FBQ3hCLE9BQU8seUJBQXlCLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0NB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TSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkwsTUFBTSxlQUFlLEdBQUcsTUFBTSxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZELGFBQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgeyBzdWl0ZSwgdGVzdCwgVGVzdCB9IGZyb20gJ21vY2hhJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgKiBhcyBBcnJheVV0aWwgZnJvbSAnLi4vLi4vc3JjL3V0aWxzL0FycmF5VXRpbHMnO1xuaW1wb3J0IHtcbiAgICBBbWF6b25CdWlsdEluU2xvdFR5cGUsIENvbnRyb2wsXG4gICAgQ29udHJvbEhhbmRsZXIsIENvbnRyb2xNYW5hZ2VyLCBEYXRlQ29udHJvbFZhbGlkYXRpb25zLFxuICAgIERhdGVSYW5nZUNvbnRyb2wsIERhdGVSYW5nZUNvbnRyb2xJbnRlbnQsXG4gICAgRGF0ZVJhbmdlQ29udHJvbFZhbGlkYXRpb25zLCBHZW5lcmFsQ29udHJvbEludGVudCwgU2luZ2xlVmFsdWVDb250cm9sSW50ZW50LFxuICAgIHRlc3RFMkUsIFRlc3RJbnB1dCwgQW1hem9uSW50ZW50XG59IGZyb20gJy4uLy4uL3NyYyc7XG5pbXBvcnQgeyBTdHJpbmdzIGFzICQgfSBmcm9tIFwiLi4vLi4vc3JjL2NvbnN0YW50cy9TdHJpbmdzXCI7XG5pbXBvcnQgeyBDb25qdW5jdGlvbkNvbnRyb2xJbnRlbnQgfSBmcm9tICcuLi8uLi9zcmMvaW50ZW50cy9Db25qdW5jdGlvbkNvbnRyb2xJbnRlbnQnO1xuXG5mdW5jdGlvbiBkYXRlUmFuZ2VDb250cm9sVW5kZXJUZXN0KGNvbmZpcm1hdGlvblJlcXVpcmVkOiBib29sZWFuID0gZmFsc2UpOiBEYXRlUmFuZ2VDb250cm9sIHtcbiAgICByZXR1cm4gbmV3IERhdGVSYW5nZUNvbnRyb2woXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnRGF0ZVJhbmdlQ29udHJvbCcsXG4gICAgICAgICAgICBpbnRlcmFjdGlvbk1vZGVsOiB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0czoge1xuICAgICAgICAgICAgICAgICAgICBzZWxmOiBbJ3Bob3RvcycsICQuVGFyZ2V0LkRhdGVdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3Rpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHNldDogWydzaG93JywgJC5BY3Rpb24uU2V0XSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBbJC5BY3Rpb24uQ2hhbmdlXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsaWRhdGlvbjoge1xuICAgICAgICAgICAgICAgIHJhbmdlVmFsaWQ6IFtEYXRlUmFuZ2VDb250cm9sVmFsaWRhdGlvbnMuU1RBUlRfQkVGT1JFX0VORF0sXG4gICAgICAgICAgICAgICAgc3RhcnREYXRlVmFsaWQ6IFtEYXRlQ29udHJvbFZhbGlkYXRpb25zLlBBU1RfREFURV9PTkxZXSxcbiAgICAgICAgICAgICAgICBlbmREYXRlVmFsaWQ6IFtEYXRlQ29udHJvbFZhbGlkYXRpb25zLlBBU1RfREFURV9PTkxZXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlybWF0aW9uUmVxdWlyZWQsXG4gICAgICAgIH0sXG4gICAgKTtcbn1cbmNsYXNzIFN0cmljdERhdGVSYW5nZUNvbnRyb2xNYW5hZ2VyIGV4dGVuZHMgQ29udHJvbE1hbmFnZXIge1xuICAgIGNyZWF0ZUNvbnRyb2xUcmVlKHN0YXRlOiBhbnkpOiBDb250cm9sIHtcbiAgICAgICAgcmV0dXJuIGRhdGVSYW5nZUNvbnRyb2xVbmRlclRlc3QoKTtcbiAgICB9XG59XG5cbmNsYXNzIENvbmZpcm1hdGlvbkRhdGVSYW5nZUNvbnRyb2xNYW5hZ2VyIGV4dGVuZHMgQ29udHJvbE1hbmFnZXIge1xuICAgIGNyZWF0ZUNvbnRyb2xUcmVlKHN0YXRlOiBhbnkpOiBDb250cm9sIHtcbiAgICAgICAgcmV0dXJuIGRhdGVSYW5nZUNvbnRyb2xVbmRlclRlc3QodHJ1ZSk7XG4gICAgfVxufVxuXG5jb25zdCBhc2tGb3JTdGFydFByb21wdHMgPSBbJ3N0YXJ0IGRhdGUgcGxlYXNlID8nLCAnUGxlYXNlIGdpdmUgbWUgdGhlIHN0YXJ0IGRhdGUuJ107XG5jb25zdCB2YWx1ZVNldFByb21wdHMgPSBbJ09rLicsICdSb2dlci4nXTtcbmNvbnN0IGFza0ZvckVuZFByb21wdHMgPSBbJ0VuZCBkYXRlIHBsZWFzZSA/JywgJ1BsZWFzZSBnaXZlIG1lIHRoZSBlbmQgZGF0ZS4nXTtcbmNvbnN0IGFza0ZvckJvdGhQcm9tcHRzID0gWydXaGF0IGlzIHRoZSBzdGFydCBkYXRlIGFuZCBlbmQgZGF0ZSB5b3Ugd2FudCA/JywgJ1BsZWFzZSBnaXZlIG1lIHRoZSBzdGFydCBkYXRlIGFuZCB0aGUgZW5kIGRhdGUuJ107XG5jbGFzcyBWYXJpYWJsZVJlc3BvbnNlVHdvRGF0ZXNDb250cm9sTWFuYWdlciBleHRlbmRzIENvbnRyb2xNYW5hZ2VyIHtcbiAgICBjcmVhdGVDb250cm9sVHJlZShzdGF0ZTogYW55KTogQ29udHJvbCB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZVJhbmdlQ29udHJvbChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ0RhdGVSYW5nZUNvbnRyb2wnLFxuICAgICAgICAgICAgICAgIGludGVyYWN0aW9uTW9kZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZjogWydwaG90b3MnLCAkLlRhcmdldC5EYXRlXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IFsnc2hvdycsICQuQWN0aW9uLlNldF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2U6IFskLkFjdGlvbi5DaGFuZ2VdXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlVmFsaWQ6IFtEYXRlUmFuZ2VDb250cm9sVmFsaWRhdGlvbnMuU1RBUlRfQkVGT1JFX0VORF1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByb21wdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VmFsdWU6IGFza0ZvclN0YXJ0UHJvbXB0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0OiB2YWx1ZVNldFByb21wdHNcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZW5kRGF0ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFZhbHVlOiBhc2tGb3JFbmRQcm9tcHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQ6IHZhbHVlU2V0UHJvbXB0c1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VmFsdWU6IGFza0ZvckJvdGhQcm9tcHRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbnN1aXRlKCdEYXRlUmFuZ2VDb250cm9sJywgKCkgPT4ge1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIC8vIHNldCBub3cgdG8gMjAxOS0wMS0wM1xuICAgICAgICBzaW5vbi51c2VGYWtlVGltZXJzKG5ldyBEYXRlKCcyMDE5LTAxLTAzVDIxOjU1OjM4LjE1MVonKSk7XG4gICAgfSk7XG5cbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgICBzaW5vbi5yZXN0b3JlKCk7XG4gICAgfSk7XG5cbiAgICBzdWl0ZSgnRTJFIHRlc3RzJywgKCkgPT4ge1xuICAgICAgICBzdWl0ZSgnT25seSBEYXRlUmFuZ2VDb250cm9sSW50ZW50ICYgRGF0ZUNvbnRyb2xJbnRlbnQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0ZXN0KCdib3RoIHN0YXJ0IGRhdGUgYW5kIGVuZCBkYXRlIHByb3ZpZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgQ29udHJvbEhhbmRsZXIobmV3IFN0cmljdERhdGVSYW5nZUNvbnRyb2xNYW5hZ2VyKCkpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRlc3RFMkUoXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBzZXQgc3RhcnQgZGF0ZSB0byAyMDE3IGFuZCBlbmQgZGF0ZSB0byAyMDE4JywgVGVzdElucHV0Lm9mKERhdGVSYW5nZUNvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24uYSc6ICQuQWN0aW9uLlNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0LmEnOiAkLlRhcmdldC5TdGFydERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmEnOiAnMjAxNycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbi5iJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQuYic6ICQuVGFyZ2V0LkVuZERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmInOiAnMjAxOCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyAyMDE3LTAxLTAxIGFuZCB0aGUgZW5kIGRhdGUgaXMgMjAxOC0xMi0zMS4nLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0ZXN0KCdib3RoIHN0YXJ0IGRhdGUgYW5kIGVuZCBkYXRlIHByb3ZpZGVkIGJ1dCBpbiBzaW1wbGUgd29yZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgU3RyaWN0RGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IDIwMTcgdG8gMjAxOCcsIFRlc3RJbnB1dC5vZihEYXRlUmFuZ2VDb250cm9sSW50ZW50Lm9mKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYSc6ICcyMDE3JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYic6ICcyMDE4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIDIwMTctMDEtMDEgYW5kIHRoZSBlbmQgZGF0ZSBpcyAyMDE4LTEyLTMxLicsXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRlc3QoJ3Nob3VsZCBhc2sgZm9yIGVuZCBkYXRlIHdoZW4gb25seSBzdGFydCBkYXRlIGlzIHNldCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IENvbnRyb2xIYW5kbGVyKG5ldyBTdHJpY3REYXRlUmFuZ2VDb250cm9sTWFuYWdlcigpKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0ZXN0RTJFKFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogc2V0IHN0YXJ0IGRhdGUgdG8gMjAxNycsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoQW1hem9uQnVpbHRJblNsb3RUeXBlLkRBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiAkLlRhcmdldC5TdGFydERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNy4gV2hhdCBpcyB0aGUgZW5kIGRhdGUgeW91IHdhbnQ/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiAyMDE4JywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZihBbWF6b25CdWlsdEluU2xvdFR5cGUuREFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDE4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBlbmQgZGF0ZSBpcyAyMDE4LicsXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRlc3QoJ3Nob3VsZCBhc2sgZm9yIHN0YXJ0IGRhdGUgd2hlbiBlbmQgc3RhcnQgZGF0ZSBpcyBzZXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgU3RyaWN0RGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IHNldCBlbmQgZGF0ZSB0byAyMDE3JywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZihBbWF6b25CdWlsdEluU2xvdFR5cGUuREFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24nOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6ICQuVGFyZ2V0LkVuZERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIGVuZCBkYXRlIGlzIDIwMTcuIFdoYXQgaXMgdGhlIHN0YXJ0IGRhdGUgeW91IHdhbnQ/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiAyMDE2JywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZihBbWF6b25CdWlsdEluU2xvdFR5cGUuREFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDE2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIDIwMTYuJyxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGVzdCgncmF3IHZhbHVlIGlucHV0IHNob3VsZCB1c2UgZm9jdXMgdG8gZGV0ZXJtaW5lIHRhcmdldCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IENvbnRyb2xIYW5kbGVyKG5ldyBTdHJpY3REYXRlUmFuZ2VDb250cm9sTWFuYWdlcigpKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0ZXN0RTJFKFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogc2V0IHN0YXJ0IGRhdGUgdG8gMjAxNycsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoQW1hem9uQnVpbHRJblNsb3RUeXBlLkRBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiAkLlRhcmdldC5TdGFydERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNy4gV2hhdCBpcyB0aGUgZW5kIGRhdGUgeW91IHdhbnQ/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiAyMDE4JywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZihBbWF6b25CdWlsdEluU2xvdFR5cGUuREFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDE4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBlbmQgZGF0ZSBpcyAyMDE4LicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogYWN0dWFsbHkgMjAxNycsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoQW1hem9uQnVpbHRJblNsb3RUeXBlLkRBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uJzogJC5BY3Rpb24uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDE3JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBlbmQgZGF0ZSBpcyBjaGFuZ2VkIHRvIDIwMTcuJyxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGVzdCgnc2hvdWxkIG1lbnRpb24gYm90aCBjaGFuZ2UgaWYgdHdvIHZhbHVlIGNoYW5nZWQgdG9nZXRoZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgU3RyaWN0RGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IHNldCBzdGFydCBkYXRlIHRvIDIwMTcnLCBUZXN0SW5wdXQub2YoU2luZ2xlVmFsdWVDb250cm9sSW50ZW50Lm9mKEFtYXpvbkJ1aWx0SW5TbG90VHlwZS5EQVRFLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbic6ICQuQWN0aW9uLlNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogJC5UYXJnZXQuU3RhcnREYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDE3JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIDIwMTcuIFdoYXQgaXMgdGhlIGVuZCBkYXRlIHlvdSB3YW50PycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogMjAxOCcsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoQW1hem9uQnVpbHRJblNsb3RUeXBlLkRBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUnOiAnMjAxOCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgZW5kIGRhdGUgaXMgMjAxOC4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IGFjdHVhbGx5IDIwMTUgdG8gMjAxNicsIFRlc3RJbnB1dC5vZihEYXRlUmFuZ2VDb250cm9sSW50ZW50Lm9mKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYSc6ICcyMDE1JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYic6ICcyMDE2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNS0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNi0xMi0zMS4nLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0ZXN0KCdvbmx5IHJhdyB2YWx1ZSBpbnB1dCBzaG91bGQgYmUgcmVnYXJkZWQgYXMgcmFuZ2UgaWYgbm8gcHJldmlvdXMgY29udGV4dCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IENvbnRyb2xIYW5kbGVyKG5ldyBTdHJpY3REYXRlUmFuZ2VDb250cm9sTWFuYWdlcigpKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0ZXN0RTJFKFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogMjAxOCcsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoQW1hem9uQnVpbHRJblNsb3RUeXBlLkRBVEUsIHsgJ0FNQVpPTi5EQVRFJzogJzIwMTgnIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIDIwMTgtMDEtMDEgYW5kIHRoZSBlbmQgZGF0ZSBpcyAyMDE4LTEyLTMxLicsXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRlc3QoJ1doZW4gdGhlcmUgaXMgbGFzdEluaXRpYXRpdmUgY2hpbGQgYW5kIGZvY3VzIGlzIGFjdHVhbGx5IG9uIHBhcmVudCwgcmF3IHZhbHVlIHNob3VsZCBiZSBjb25zdW1lZCBieSBwYXJlbnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgU3RyaWN0RGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IHNldCBzdGFydCBkYXRlIHRvIDIwMTcnLCBUZXN0SW5wdXQub2YoU2luZ2xlVmFsdWVDb250cm9sSW50ZW50Lm9mKEFtYXpvbkJ1aWx0SW5TbG90VHlwZS5EQVRFLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbic6ICQuQWN0aW9uLlNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogJC5UYXJnZXQuU3RhcnREYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDE3JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIDIwMTcuIFdoYXQgaXMgdGhlIGVuZCBkYXRlIHlvdSB3YW50PycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogQWN0dWFsbHkgY2hhbmdlIGRhdGUgZnJvbSAyMDE1LTAxLTAxIHRvIDIwMTYtMTItMzEnLCBUZXN0SW5wdXQub2YoRGF0ZVJhbmdlQ29udHJvbEludGVudC5vZih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbic6ICQuQWN0aW9uLkNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogJC5UYXJnZXQuRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYSc6ICcyMDE1JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYic6ICcyMDE2J1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNS0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIDIwMTYtMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBjaGFuZ2UgZGF0ZSB0byAyMDE3JywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZihBbWF6b25CdWlsdEluU2xvdFR5cGUuREFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24nOiAkLkFjdGlvbi5DaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6ICQuVGFyZ2V0LkRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgY2hhbmdlZCB0byAyMDE3LTAxLTAxIGFuZCB0aGUgZW5kIGRhdGUgaXMgY2hhbmdlZCB0byAyMDE3LTEyLTMxLicsXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRlc3QoJ3doZW4gdGFyZ2V0IGFtYmlndW91cywgYW5kIHR3byB2YWx1ZSBwcm92aWRlZCwgc2hvdWxkIHRyYW5zZmVyIGRhdGUgdG8gc3RhcnREYXRlIGFuZCBlbmREYXRlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgQ29udHJvbEhhbmRsZXIobmV3IFN0cmljdERhdGVSYW5nZUNvbnRyb2xNYW5hZ2VyKCkpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRlc3RFMkUoXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBzZXQgZGF0ZSBmcm9tIDIwMTcgdG8gMjAxOCcsIFRlc3RJbnB1dC5vZihEYXRlUmFuZ2VDb250cm9sSW50ZW50Lm9mKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiAkLlRhcmdldC5EYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMTgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNy0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIDIwMTgtMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGVzdCgnd2hlbiBmb2N1cyBpcyBib3RoLCBvbmUgdmFsdWUgd2lsbCBiZSBjb25zaWRlcmVkIGFzIGJvdGgnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgU3RyaWN0RGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IHNldCBkYXRlIGZyb20gMjAxNyB0byAyMDE4JywgVGVzdElucHV0Lm9mKERhdGVSYW5nZUNvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24nOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6ICQuVGFyZ2V0LkRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmEnOiAnMjAxNycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmInOiAnMjAxOCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyAyMDE3LTAxLTAxIGFuZCB0aGUgZW5kIGRhdGUgaXMgMjAxOC0xMi0zMS4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IDIwMTYnLCBUZXN0SW5wdXQub2YoU2luZ2xlVmFsdWVDb250cm9sSW50ZW50Lm9mKEFtYXpvbkJ1aWx0SW5TbG90VHlwZS5EQVRFLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFJzogJzIwMTYnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyBjaGFuZ2VkIHRvIDIwMTYtMDEtMDEgYW5kIHRoZSBlbmQgZGF0ZSBpcyBjaGFuZ2VkIHRvIDIwMTYtMTItMzEuJyxcblxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0ZXN0KCd3aGVuIGZvY3VzIGlzIGJvdGgsIGFtYmlndW91cyB0YXJnZXQgd2lsbCBiZSBjb25zaWRlcmVkIGFzIGJvdGgnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgU3RyaWN0RGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IHNldCBkYXRlIGZyb20gMjAxNyB0byAyMDE4JywgVGVzdElucHV0Lm9mKERhdGVSYW5nZUNvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24nOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6ICQuVGFyZ2V0LkRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmEnOiAnMjAxNycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmInOiAnMjAxOCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyAyMDE3LTAxLTAxIGFuZCB0aGUgZW5kIGRhdGUgaXMgMjAxOC0xMi0zMS4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IHNldCBkYXRlIHRvIDIwMTYnLCBUZXN0SW5wdXQub2YoU2luZ2xlVmFsdWVDb250cm9sSW50ZW50Lm9mKEFtYXpvbkJ1aWx0SW5TbG90VHlwZS5EQVRFLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbic6ICQuQWN0aW9uLlNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogJC5UYXJnZXQuRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUnOiAnMjAxNidcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNi0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNi0xMi0zMS4nLFxuXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3VpdGUoJ0ludGVncmF0ZSB3aXRoIHR3byBidWlsdGluIHZhbGlkYXRpb24gcnVsZXMnLCAoKSA9PiB7XG4gICAgICAgICAgICB0ZXN0KCdzaG91bGQgYXNrIGZvciB2YWxpZCBlbmQgZGF0ZSB3aGVuIGVuZCBkYXRlIGZhaWxzIHZhbGlkYXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgQ29udHJvbEhhbmRsZXIobmV3IFN0cmljdERhdGVSYW5nZUNvbnRyb2xNYW5hZ2VyKCkpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRlc3RFMkUoXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBzZXQgZGF0ZSBmcm9tIDIwMTcgdG8gMjAyMCcsIFRlc3RJbnB1dC5vZihEYXRlUmFuZ2VDb250cm9sSW50ZW50Lm9mKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiAkLlRhcmdldC5EYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMjAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNy0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIDIwMjAtMTItMzEuIFNvcnJ5IGJ1dCB0aGF0XFwncyBub3QgYSB2YWxpZCBlbmQgZGF0ZSBiZWNhdXNlIHRoZSBkYXRlIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gdG9kYXkuIFdoYXQgc2hvdWxkIEkgY2hhbmdlIHRoZSBlbmQgZGF0ZSB0bz8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IDIwMTgnLCBUZXN0SW5wdXQub2YoU2luZ2xlVmFsdWVDb250cm9sSW50ZW50Lm9mKEFtYXpvbkJ1aWx0SW5TbG90VHlwZS5EQVRFLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFJzogJzIwMTgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIGVuZCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxOC4nXG5cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGVzdCgnc2hvdWxkIGFzayBmb3IgdmFsaWQgc3RhcnQgZGF0ZSB3aGVuIHN0YXJ0IGRhdGUgZmFpbHMgdmFsaWRhdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgU3RyaWN0RGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IHNldCBzdGFydCBkYXRlIHRvIDIwMjAnLCBUZXN0SW5wdXQub2YoU2luZ2xlVmFsdWVDb250cm9sSW50ZW50Lm9mKEFtYXpvbkJ1aWx0SW5TbG90VHlwZS5EQVRFLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbic6ICQuQWN0aW9uLlNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogJC5UYXJnZXQuU3RhcnREYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDIwJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IFNvcnJ5IGJ1dCB0aGF0XFwncyBub3QgYSB2YWxpZCBzdGFydCBkYXRlIGJlY2F1c2UgdGhlIGRhdGUgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiB0b2RheS4gV2hhdCBpcyB0aGUgc3RhcnQgZGF0ZSB5b3Ugd2FudD8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IDIwMTgnLCBUZXN0SW5wdXQub2YoU2luZ2xlVmFsdWVDb250cm9sSW50ZW50Lm9mKEFtYXpvbkJ1aWx0SW5TbG90VHlwZS5EQVRFLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFJzogJzIwMTgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxOC4gV2hhdCBpcyB0aGUgZW5kIGRhdGUgeW91IHdhbnQ/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiAyMDE4JywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZihBbWF6b25CdWlsdEluU2xvdFR5cGUuREFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDE4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBlbmQgZGF0ZSBpcyAyMDE4LicsXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRlc3QoJ3Nob3VsZCBhc2sgZm9yIGJvdGggc3RhcnQgZGF0ZSBhbmQgZW5kIGRhdGUgd2hlbiBib3RoIHZhbHVlIGNoYW5nZWQgYW5kIHN0YXJ0IGRhdGUgaXMgcGFzdCBlbmQgZGF0ZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IENvbnRyb2xIYW5kbGVyKG5ldyBTdHJpY3REYXRlUmFuZ2VDb250cm9sTWFuYWdlcigpKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0ZXN0RTJFKFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogc2V0IGRhdGUgZnJvbSAyMDE3IHRvIDIwMTYnLCBUZXN0SW5wdXQub2YoRGF0ZVJhbmdlQ29udHJvbEludGVudC5vZih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbic6ICQuQWN0aW9uLlNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogJC5UYXJnZXQuRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYSc6ICcyMDE3JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYic6ICcyMDE2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIDIwMTctMDEtMDEgYW5kIHRoZSBlbmQgZGF0ZSBpcyAyMDE2LTEyLTMxLiBTb3JyeSwgaW52YWxpZCByYW5nZSBiZWNhdXNlIHN0YXJ0IGRhdGUgY2FuIG5vdCBiZSBncmVhdGVyIHRoYW4gZW5kIGRhdGUuIFdoYXQgaXMgdGhlIHN0YXJ0IGRhdGUgYW5kIGVuZCBkYXRlIHlvdSB3YW50PycsXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRlc3QoJ3Nob3VsZCBhc2sgZm9yIHZhbGlkIGVuZCBkYXRlIHdoZW4gc3RhcnQgZGF0ZSBpcyBwYXN0IGVuZCBkYXRlLCBhbmQgb25seSBlbmQgZGF0ZSBpcyBjaGFuZ2VkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgQ29udHJvbEhhbmRsZXIobmV3IFN0cmljdERhdGVSYW5nZUNvbnRyb2xNYW5hZ2VyKCkpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRlc3RFMkUoXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBzZXQgZGF0ZSBmcm9tIDIwMTYgdG8gMjAxNycsIFRlc3RJbnB1dC5vZihEYXRlUmFuZ2VDb250cm9sSW50ZW50Lm9mKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiAkLlRhcmdldC5EYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNi0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIDIwMTctMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBjaGFuZ2UgZW5kIGRhdGUgdG8gMjAxNScsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoQW1hem9uQnVpbHRJblNsb3RUeXBlLkRBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uJzogJC5BY3Rpb24uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiAkLlRhcmdldC5FbmREYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDE1J1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIGVuZCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNS4gU29ycnksIGludmFsaWQgcmFuZ2UgYmVjYXVzZSBzdGFydCBkYXRlIGNhbiBub3QgYmUgZ3JlYXRlciB0aGFuIGVuZCBkYXRlLiBXaGF0IGlzIHRoZSBlbmQgZGF0ZSB5b3Ugd2FudD8nLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdWl0ZSgnSW50ZWdyYXRlIHdpdGggU2ltcGxlQ29udHJvbEludGVudCAmIENvbmp1bmN0aW9uQ29udHJvbEludGVudCcsICgpID0+IHtcbiAgICAgICAgICAgIHRlc3QoJ2NoYW5nZSB3aXRoIGFtYmlndW91cyB0YXJnZXQgd2lsbCBhc2sgZm9yIGJvdGggc3RhcnQgYW5kIGVuZCB3aGVuIGZvY3VzIGlzIGJvdGgsIGFuZCB0cmVhdCBvbmUgdmFsdWUgaW5wdXQgYXMgYSByYW5nZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IENvbnRyb2xIYW5kbGVyKG5ldyBTdHJpY3REYXRlUmFuZ2VDb250cm9sTWFuYWdlcigpKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0ZXN0RTJFKFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogMjAxNyB0byAyMDE4JywgVGVzdElucHV0Lm9mKERhdGVSYW5nZUNvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMTgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNy0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIDIwMTgtMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBDaGFuZ2UgZGF0ZScsIFRlc3RJbnB1dC5vZihHZW5lcmFsQ29udHJvbEludGVudC5vZih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAkLkFjdGlvbi5DaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAkLlRhcmdldC5EYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogV2hhdCBpcyB0aGUgc3RhcnQgZGF0ZSBhbmQgZW5kIGRhdGUgeW91IHdhbnQ/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiAyMDE1IHRvIDIwMTYnLCBUZXN0SW5wdXQub2YoRGF0ZVJhbmdlQ29udHJvbEludGVudC5vZih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmEnOiAnMjAxNScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmInOiAnMjAxNicsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyBjaGFuZ2VkIHRvIDIwMTUtMDEtMDEgYW5kIHRoZSBlbmQgZGF0ZSBpcyBjaGFuZ2VkIHRvIDIwMTYtMTItMzEuJyxcblxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0ZXN0KCdjaGFuZ2Ugd2l0aCBhbWJpZ3VvdXMgdGFyZ2V0IHdpbGwgb25seSBjaGFuZ2Ugc3RhcnQgd2hlbiBmb2N1cyBpcyBzdGFydCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IENvbnRyb2xIYW5kbGVyKG5ldyBTdHJpY3REYXRlUmFuZ2VDb250cm9sTWFuYWdlcigpKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0ZXN0RTJFKFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogMjAxNyB0byAyMDE4JywgVGVzdElucHV0Lm9mKERhdGVSYW5nZUNvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMTgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNy0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIDIwMTgtMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBDaGFuZ2Ugc3RhcnQgZGF0ZSB0byAyMDE1JywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZihBbWF6b25CdWlsdEluU2xvdFR5cGUuREFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24nOiAkLkFjdGlvbi5DaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6ICQuVGFyZ2V0LlN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUnOiAnMjAxNSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNS4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IGNoYW5nZSBkYXRlIHRvIDIwMTYnLCBUZXN0SW5wdXQub2YoU2luZ2xlVmFsdWVDb250cm9sSW50ZW50Lm9mKEFtYXpvbkJ1aWx0SW5TbG90VHlwZS5EQVRFLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbic6ICQuQWN0aW9uLkNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogJC5UYXJnZXQuRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUnOiAnMjAxNicsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyBjaGFuZ2VkIHRvIDIwMTYuJyxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGVzdCgnY2hhbmdlIHN0YXJ0IGRhdGUgYW5kIGVuZCBkYXRlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgQ29udHJvbEhhbmRsZXIobmV3IFN0cmljdERhdGVSYW5nZUNvbnRyb2xNYW5hZ2VyKCkpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRlc3RFMkUoXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBzZXQgc3RhcnQgZGF0ZSB0byAyMDE3IGFuZCBzZXQgZW5kIGRhdGUgdG8gMjAxOCcsIFRlc3RJbnB1dC5vZihEYXRlUmFuZ2VDb250cm9sSW50ZW50Lm9mKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uLmEnOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbi5iJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQuYSc6ICQuVGFyZ2V0LlN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0LmInOiAkLlRhcmdldC5FbmREYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMTgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNy0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIDIwMTgtMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBDaGFuZ2Ugc3RhcnQgZGF0ZSBhbmQgZW5kIGRhdGUnLCBUZXN0SW5wdXQub2YoQ29uanVuY3Rpb25Db250cm9sSW50ZW50Lm9mKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uJzogJC5BY3Rpb24uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQuYSc6ICQuVGFyZ2V0LlN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0LmInOiAkLlRhcmdldC5FbmREYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogV2hhdCBpcyB0aGUgc3RhcnQgZGF0ZSBhbmQgZW5kIGRhdGUgeW91IHdhbnQ/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiAyMDE1IHRvIDIwMTYnLCBUZXN0SW5wdXQub2YoRGF0ZVJhbmdlQ29udHJvbEludGVudC5vZih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmEnOiAnMjAxNScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmInOiAnMjAxNidcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNS0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNi0xMi0zMS4nLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0ZXN0KCdjaGFuZ2Ugd2l0aCBzcGVjaWZpYyB0YXJnZXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgU3RyaWN0RGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IDIwMTcgdG8gMjAxOCcsIFRlc3RJbnB1dC5vZihEYXRlUmFuZ2VDb250cm9sSW50ZW50Lm9mKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYSc6ICcyMDE3JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYic6ICcyMDE4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIDIwMTctMDEtMDEgYW5kIHRoZSBlbmQgZGF0ZSBpcyAyMDE4LTEyLTMxLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogQ2hhbmdlIHN0YXJ0IGRhdGUnLCBUZXN0SW5wdXQub2YoR2VuZXJhbENvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJC5BY3Rpb24uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogJC5UYXJnZXQuU3RhcnREYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IFdoYXQgc2hvdWxkIEkgY2hhbmdlIHRoZSBzdGFydCBkYXRlIHRvPycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogMjAxNScsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoQW1hem9uQnVpbHRJblNsb3RUeXBlLkRBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUnOiAnMjAxNScsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyBjaGFuZ2VkIHRvIDIwMTUuJyxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGVzdCgnd2hlbiBmb2N1cyBpcyBib3RoLCBhY3Rpb24gXCJjaGFuZ2VcIiB3aWxsIGJlIGNvbnNpZGVyZWQgdG8gY2hhbmdlIGJvdGggc3RhcnQgYW5kIGVuZCBkYXRlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgQ29udHJvbEhhbmRsZXIobmV3IFN0cmljdERhdGVSYW5nZUNvbnRyb2xNYW5hZ2VyKCkpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRlc3RFMkUoXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBzZXQgZGF0ZSBmcm9tIDIwMTcgdG8gMjAxOCcsIFRlc3RJbnB1dC5vZihEYXRlUmFuZ2VDb250cm9sSW50ZW50Lm9mKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiAkLlRhcmdldC5EYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMTgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNy0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIDIwMTgtMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBjaGFuZ2UnLCBUZXN0SW5wdXQub2YoR2VuZXJhbENvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJC5BY3Rpb24uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IFdoYXQgaXMgdGhlIHN0YXJ0IGRhdGUgYW5kIGVuZCBkYXRlIHlvdSB3YW50PycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogMjAxNSB0byAyMDE2JywgVGVzdElucHV0Lm9mKERhdGVSYW5nZUNvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMTYnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyBjaGFuZ2VkIHRvIDIwMTUtMDEtMDEgYW5kIHRoZSBlbmQgZGF0ZSBpcyBjaGFuZ2VkIHRvIDIwMTYtMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGVzdCgnd2hlbiBmb2N1cyBpcyBzdGFydCBkYXRlLCBhY3Rpb24gXCJjaGFuZ2VcIiB3aWxsIGJlIGNvbnNpZGVyZWQgdG8gY2hhbmdlIHN0YXJ0IGRhdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgU3RyaWN0RGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IHNldCBkYXRlIGZyb20gMjAxNyB0byAyMDE4JywgVGVzdElucHV0Lm9mKERhdGVSYW5nZUNvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24nOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6ICQuVGFyZ2V0LkRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmEnOiAnMjAxNycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmInOiAnMjAxOCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyAyMDE3LTAxLTAxIGFuZCB0aGUgZW5kIGRhdGUgaXMgMjAxOC0xMi0zMS4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IGNoYW5nZSBzdGFydCBkYXRlIHRvIDIwMTYnLCBUZXN0SW5wdXQub2YoU2luZ2xlVmFsdWVDb250cm9sSW50ZW50Lm9mKEFtYXpvbkJ1aWx0SW5TbG90VHlwZS5EQVRFLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbic6ICQuQWN0aW9uLkNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogJC5UYXJnZXQuU3RhcnREYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDE2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNi4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IGNoYW5nZScsIFRlc3RJbnB1dC5vZihHZW5lcmFsQ29udHJvbEludGVudC5vZih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAkLkFjdGlvbi5DaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogV2hhdCBzaG91bGQgSSBjaGFuZ2UgdGhlIHN0YXJ0IGRhdGUgdG8/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiAyMDE1JywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZihBbWF6b25CdWlsdEluU2xvdFR5cGUuREFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDE1JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNS4nLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN1aXRlKCdJbnRlZ3JhdGUgd2l0aCBjdXN0b21pemVkIGFjdGlvbiAmIHRhcmdldCcsICgpID0+IHtcbiAgICAgICAgICAgIHRlc3QoJ0RhdGVSYW5nZUNvbnRyb2wgc2hvdWxkIHVuZGVyc3RhbmQgY3VzdG9taXplZCB0YXJnZXQgcGhvdG9zIGFuZCBhY3Rpb24gc2hvdycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IENvbnRyb2xIYW5kbGVyKG5ldyBTdHJpY3REYXRlUmFuZ2VDb250cm9sTWFuYWdlcigpKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0ZXN0RTJFKFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogc2hvdyBwaG90b3MgZnJvbSAyMDE3IHRvIDIwMTgnLCBUZXN0SW5wdXQub2YoRGF0ZVJhbmdlQ29udHJvbEludGVudC5vZih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbic6ICdzaG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogJ3Bob3RvcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmEnOiAnMjAxNycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmInOiAnMjAxOCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyAyMDE3LTAxLTAxIGFuZCB0aGUgZW5kIGRhdGUgaXMgMjAxOC0xMi0zMS4nLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0ZXN0KCdHZW5lcmFsQ29udHJvbEludGVudCAmIENvbmp1bmN0aW9uQ29udHJvbEludGVudCBzaG91bGQgdW5kZXJzdGFuZCBjdXN0b21pemVkIHRhcmdldCBwaG90b3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgU3RyaWN0RGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IHNob3cgcGhvdG9zIGZyb20gMjAxNyB0byAyMDE4JywgVGVzdElucHV0Lm9mKERhdGVSYW5nZUNvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24nOiAnc2hvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6ICdwaG90b3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMTgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNy0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIDIwMTgtMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBjaGFuZ2UgcGhvdG9zJywgVGVzdElucHV0Lm9mKEdlbmVyYWxDb250cm9sSW50ZW50Lm9mKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICQuQWN0aW9uLkNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICdwaG90b3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IFdoYXQgaXMgdGhlIHN0YXJ0IGRhdGUgYW5kIGVuZCBkYXRlIHlvdSB3YW50PycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogMjAxNSB0byAyMDE2JywgVGVzdElucHV0Lm9mKERhdGVSYW5nZUNvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMTYnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyBjaGFuZ2VkIHRvIDIwMTUtMDEtMDEgYW5kIHRoZSBlbmQgZGF0ZSBpcyBjaGFuZ2VkIHRvIDIwMTYtMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3VpdGUoJ0NvbmZpcm1hdGlvbiByZXF1aXJlZCBzY2VuYXJpb3MnLCAoKSA9PiB7XG4gICAgICAgICAgICB0ZXN0KCdzaG91bGQgYmUgYWJsZSB0byBjb25maXJtIGJvdGggc3RhcnQgYW5kIGVuZCBhbmQgYWNjZXB0IGFmZmlybWF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgQ29udHJvbEhhbmRsZXIobmV3IENvbmZpcm1hdGlvbkRhdGVSYW5nZUNvbnRyb2xNYW5hZ2VyKCkpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRlc3RFMkUoXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBzZXQgc3RhcnQgZGF0ZSB0byAyMDE3IGFuZCBlbmQgZGF0ZSB0byAyMDE4JywgVGVzdElucHV0Lm9mKERhdGVSYW5nZUNvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24uYSc6ICQuQWN0aW9uLlNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0LmEnOiAkLlRhcmdldC5TdGFydERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmEnOiAnMjAxNycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbi5iJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQuYic6ICQuVGFyZ2V0LkVuZERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmInOiAnMjAxOCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogV2FzIHRoYXQgMjAxNy0wMS0wMSB0byAyMDE4LTEyLTMxPycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogWWVzJywgVGVzdElucHV0LmludGVudChBbWF6b25JbnRlbnQuWWVzSW50ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHcmVhdC4gR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyAyMDE3LTAxLTAxIGFuZCB0aGUgZW5kIGRhdGUgaXMgMjAxOC0xMi0zMS4nLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0ZXN0KCdzaG91bGQgYmUgYWJsZSB0byBjb25maXJtIGJvdGggc3RhcnQgYW5kIGVuZCBhbmQgYWNjZXB0IGRpc2FmZmlybWF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgQ29udHJvbEhhbmRsZXIobmV3IENvbmZpcm1hdGlvbkRhdGVSYW5nZUNvbnRyb2xNYW5hZ2VyKCkpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRlc3RFMkUoXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBzZXQgc3RhcnQgZGF0ZSB0byAyMDE3IGFuZCBlbmQgZGF0ZSB0byAyMDE4JywgVGVzdElucHV0Lm9mKERhdGVSYW5nZUNvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24uYSc6ICQuQWN0aW9uLlNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0LmEnOiAkLlRhcmdldC5TdGFydERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmEnOiAnMjAxNycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbi5iJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQuYic6ICQuVGFyZ2V0LkVuZERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFLmInOiAnMjAxOCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogV2FzIHRoYXQgMjAxNy0wMS0wMSB0byAyMDE4LTEyLTMxPycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogTm8nLCBUZXN0SW5wdXQuaW50ZW50KEFtYXpvbkludGVudC5Ob0ludGVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogTXkgbWlzdGFrZS4gV2hhdCBpcyB0aGUgc3RhcnQgZGF0ZSBhbmQgZW5kIGRhdGUgeW91IHdhbnQ/JyxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGVzdCgnc2hvdWxkIGJlIGFibGUgdG8gY29uZmlybSBkYXRlIHJhbmdlIGFuZCBhY2NlcHQgYWZmaXJtYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgQ29uZmlybWF0aW9uRGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IDIwMTYnLCBUZXN0SW5wdXQub2YoU2luZ2xlVmFsdWVDb250cm9sSW50ZW50Lm9mKEFtYXpvbkJ1aWx0SW5TbG90VHlwZS5EQVRFLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFJzogJzIwMTYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IFdhcyB0aGF0IDIwMTYtMDEtMDEgdG8gMjAxNi0xMi0zMT8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IFllcycsIFRlc3RJbnB1dC5pbnRlbnQoQW1hem9uSW50ZW50Llllc0ludGVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR3JlYXQuIEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNi0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIDIwMTYtMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGVzdCgnU2hvdWxkIGZpcnN0IGRvIGNvbmZpcm1hdGlvbiB0aGVuIGRvIHZhbGlkYXRpb24sIGFuZCB0aGUgc2Vjb25kIGlucHV0IGFsc28gbmVlZCB0byBiZSBjb25maXJtZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgQ29uZmlybWF0aW9uRGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IHNldCBzdGFydCBkYXRlIHRvIDIwMTggYW5kIGVuZCBkYXRlIHRvIDIwMTcnLCBUZXN0SW5wdXQub2YoRGF0ZVJhbmdlQ29udHJvbEludGVudC5vZih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbi5hJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQuYSc6ICQuVGFyZ2V0LlN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYSc6ICcyMDE4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uLmInOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldC5iJzogJC5UYXJnZXQuRW5kRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYic6ICcyMDE3JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBXYXMgdGhhdCAyMDE4LTAxLTAxIHRvIDIwMTctMTItMzE/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBZZXMnLCBUZXN0SW5wdXQuaW50ZW50KEFtYXpvbkludGVudC5ZZXNJbnRlbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IFNvcnJ5LCBpbnZhbGlkIHJhbmdlIGJlY2F1c2Ugc3RhcnQgZGF0ZSBjYW4gbm90IGJlIGdyZWF0ZXIgdGhhbiBlbmQgZGF0ZS4gV2hhdCBpcyB0aGUgc3RhcnQgZGF0ZSBhbmQgZW5kIGRhdGUgeW91IHdhbnQ/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiAyMDE2JywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZihBbWF6b25CdWlsdEluU2xvdFR5cGUuREFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDE2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBXYXMgdGhhdCAyMDE2LTAxLTAxIHRvIDIwMTYtMTItMzE/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBZZXMnLCBUZXN0SW5wdXQuaW50ZW50KEFtYXpvbkludGVudC5ZZXNJbnRlbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdyZWF0LiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNi0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNi0xMi0zMS4nLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0ZXN0KCdzaG91bGQgd29yayB3ZWxsIHdpdGggY2hhbmdlIGJvdGgnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgQ29uZmlybWF0aW9uRGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IHNldCBzdGFydCBkYXRlIHRvIDIwMTcgYW5kIGVuZCBkYXRlIHRvIDIwMTgnLCBUZXN0SW5wdXQub2YoRGF0ZVJhbmdlQ29udHJvbEludGVudC5vZih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbi5hJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQuYSc6ICQuVGFyZ2V0LlN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYSc6ICcyMDE3JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uLmInOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldC5iJzogJC5UYXJnZXQuRW5kRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYic6ICcyMDE4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBXYXMgdGhhdCAyMDE3LTAxLTAxIHRvIDIwMTgtMTItMzE/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBZZXMnLCBUZXN0SW5wdXQuaW50ZW50KEFtYXpvbkludGVudC5ZZXNJbnRlbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdyZWF0LiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIDIwMTctMDEtMDEgYW5kIHRoZSBlbmQgZGF0ZSBpcyAyMDE4LTEyLTMxLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogQ2hhbmdlIGRhdGUnLCBUZXN0SW5wdXQub2YoR2VuZXJhbENvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJC5BY3Rpb24uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogJC5UYXJnZXQuRGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IFdoYXQgaXMgdGhlIHN0YXJ0IGRhdGUgYW5kIGVuZCBkYXRlIHlvdSB3YW50PycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogMjAxNSB0byAyMDE2JywgVGVzdElucHV0Lm9mKERhdGVSYW5nZUNvbnRyb2xJbnRlbnQub2Yoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMTYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IFdhcyB0aGF0IDIwMTUtMDEtMDEgdG8gMjAxNi0xMi0zMT8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IFllcycsIFRlc3RJbnB1dC5pbnRlbnQoQW1hem9uSW50ZW50Llllc0ludGVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR3JlYXQuIEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgY2hhbmdlZCB0byAyMDE1LTAxLTAxIGFuZCB0aGUgZW5kIGRhdGUgaXMgY2hhbmdlZCB0byAyMDE2LTEyLTMxLicsXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRlc3QoJ3Nob3VsZCB3b3JrIHdlbGwgd2l0aCBjaGFuZ2UgcmFuZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgQ29uZmlybWF0aW9uRGF0ZVJhbmdlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdEUyRShcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IHNldCBzdGFydCBkYXRlIHRvIDIwMTcgYW5kIGVuZCBkYXRlIHRvIDIwMTgnLCBUZXN0SW5wdXQub2YoRGF0ZVJhbmdlQ29udHJvbEludGVudC5vZih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbi5hJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQuYSc6ICQuVGFyZ2V0LlN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYSc6ICcyMDE3JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uLmInOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldC5iJzogJC5UYXJnZXQuRW5kRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUuYic6ICcyMDE4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBXYXMgdGhhdCAyMDE3LTAxLTAxIHRvIDIwMTgtMTItMzE/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBZZXMnLCBUZXN0SW5wdXQuaW50ZW50KEFtYXpvbkludGVudC5ZZXNJbnRlbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdyZWF0LiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIDIwMTctMDEtMDEgYW5kIHRoZSBlbmQgZGF0ZSBpcyAyMDE4LTEyLTMxLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogY2hhbmdlIGRhdGUgdG8gMjAxNicsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoQW1hem9uQnVpbHRJblNsb3RUeXBlLkRBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uJzogJC5BY3Rpb24uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiAkLlRhcmdldC5EYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURSc6ICcyMDE2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBXYXMgdGhhdCAyMDE2LTAxLTAxIHRvIDIwMTYtMTItMzE/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBZZXMnLCBUZXN0SW5wdXQuaW50ZW50KEFtYXpvbkludGVudC5ZZXNJbnRlbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdyZWF0LiBHb3QgaXQuIFRoZSBzdGFydCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNi0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIGNoYW5nZWQgdG8gMjAxNi0xMi0zMS4nLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0ZXN0KCdzaG91bGQgd29yayB3ZWxsIHdpdGggc2V0dGluZyBjaGlsZCB2YWx1ZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IENvbnRyb2xIYW5kbGVyKG5ldyBDb25maXJtYXRpb25EYXRlUmFuZ2VDb250cm9sTWFuYWdlcigpKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0ZXN0RTJFKFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogc2V0IHN0YXJ0IGRhdGUgdG8gMjAxNyBhbmQgZW5kIGRhdGUgdG8gMjAxOCcsIFRlc3RJbnB1dC5vZihEYXRlUmFuZ2VDb250cm9sSW50ZW50Lm9mKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uLmEnOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldC5hJzogJC5UYXJnZXQuU3RhcnREYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24uYic6ICQuQWN0aW9uLlNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0LmInOiAkLlRhcmdldC5FbmREYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMTgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IFdhcyB0aGF0IDIwMTctMDEtMDEgdG8gMjAxOC0xMi0zMT8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IFllcycsIFRlc3RJbnB1dC5pbnRlbnQoQW1hem9uSW50ZW50Llllc0ludGVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR3JlYXQuIEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNy0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIDIwMTgtMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBzZXQgc3RhcnQgZGF0ZSB0byAyMDE2JywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZihBbWF6b25CdWlsdEluU2xvdFR5cGUuREFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24nOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6ICQuVGFyZ2V0LlN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUnOiAnMjAxNicsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR290IGl0LiBUaGUgc3RhcnQgZGF0ZSBpcyAyMDE2LiBXYXMgdGhhdCAyMDE2PycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogWWVzJywgVGVzdElucHV0LmludGVudChBbWF6b25JbnRlbnQuWWVzSW50ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBOiBHcmVhdC4nLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0ZXN0KCdzaG91bGQgd29yayB3ZWxsIHdpdGggY2hpbGRyZW5cXCdzIHZhbGlkYXRpb24gcnVsZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IENvbnRyb2xIYW5kbGVyKG5ldyBDb25maXJtYXRpb25EYXRlUmFuZ2VDb250cm9sTWFuYWdlcigpKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0ZXN0RTJFKFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogc2V0IHN0YXJ0IGRhdGUgdG8gMjAxNyBhbmQgZW5kIGRhdGUgdG8gMjAxOCcsIFRlc3RJbnB1dC5vZihEYXRlUmFuZ2VDb250cm9sSW50ZW50Lm9mKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uLmEnOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldC5hJzogJC5UYXJnZXQuU3RhcnREYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5hJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24uYic6ICQuQWN0aW9uLlNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0LmInOiAkLlRhcmdldC5FbmREYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTUFaT04uREFURS5iJzogJzIwMTgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IFdhcyB0aGF0IDIwMTctMDEtMDEgdG8gMjAxOC0xMi0zMT8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IFllcycsIFRlc3RJbnB1dC5pbnRlbnQoQW1hem9uSW50ZW50Llllc0ludGVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR3JlYXQuIEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNy0wMS0wMSBhbmQgdGhlIGVuZCBkYXRlIGlzIDIwMTgtMTItMzEuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdVOiBzZXQgc3RhcnQgZGF0ZSB0byAyMDIwJywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZihBbWF6b25CdWlsdEluU2xvdFR5cGUuREFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24nOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6ICQuVGFyZ2V0LlN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQU1BWk9OLkRBVEUnOiAnMjAyMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogU29ycnkgYnV0IHRoYXRcXCdzIG5vdCBhIHZhbGlkIHN0YXJ0IGRhdGUgYmVjYXVzZSB0aGUgZGF0ZSBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuIHRvZGF5LiBXaGF0IGlzIHRoZSBzdGFydCBkYXRlIHlvdSB3YW50PycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnVTogc2V0IHN0YXJ0IGRhdGUgdG8gMjAxNicsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoQW1hem9uQnVpbHRJblNsb3RUeXBlLkRBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWN0aW9uJzogJC5BY3Rpb24uU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiAkLlRhcmdldC5TdGFydERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFJzogJzIwMTYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0E6IEdvdCBpdC4gVGhlIHN0YXJ0IGRhdGUgaXMgMjAxNi4gV2FzIHRoYXQgMjAxNj8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1U6IFllcycsIFRlc3RJbnB1dC5pbnRlbnQoQW1hem9uSW50ZW50Llllc0ludGVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQTogR3JlYXQuJyxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzdWl0ZSgnVmFyaWFibGUgcmVzcG9uc2UgdGVzdHMnLCAoKSA9PiB7XG4gICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgLy8gRm9yY2UgdG8gcmV0dXJuIHRoZSBsYXN0IG9uZSBpbiB0aGUgYXJyYXlcbiAgICAgICAgICAgIHNpbm9uLnN0dWIoQXJyYXlVdGlsLCAncmFuZG9tbHlQaWNrJykuY2FsbHNGYWtlKChpbnB1dCkgPT4gaW5wdXRbaW5wdXQubGVuZ3RoIC0gMV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgICAgICAgIHNpbm9uLnJlc3RvcmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRlc3QoJ3Nob3VsZCBhc2sgZm9yIGVuZCBkYXRlIHdoZW4gb25seSBzdGFydCBkYXRlIGlzIHNldCwgJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgVmFyaWFibGVSZXNwb25zZVR3b0RhdGVzQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgICAgICBhd2FpdCB0ZXN0RTJFKFxuICAgICAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAnVTogc2V0IHN0YXJ0IGRhdGUgdG8gMjAxNycsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoQW1hem9uQnVpbHRJblNsb3RUeXBlLkRBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24nOiAkLkFjdGlvbi5TZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogJC5UYXJnZXQuU3RhcnREYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFJzogJzIwMTcnLFxuICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICdBOiBSb2dlci4gUGxlYXNlIGdpdmUgbWUgdGhlIGVuZCBkYXRlLicsXG4gICAgICAgICAgICAgICAgICAgICdVOiAyMDE4JywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZihBbWF6b25CdWlsdEluU2xvdFR5cGUuREFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0FNQVpPTi5EQVRFJzogJzIwMTgnLFxuICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICdBOiBSb2dlci4nXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzdWl0ZSgnRGF0ZVJhbmdlQ29udHJvbCBzY2VuYXJpb3MnLCAoKSA9PiB7XG4gICAgICAgIHRlc3QoJ3Vua25vd24gc2luZ2xlIHRhcmdldCBzaG91bGQgYmUgcmVqZWN0ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb250cm9sID0gZGF0ZVJhbmdlQ29udHJvbFVuZGVyVGVzdCgpO1xuICAgICAgICAgICAgY29uc3QgaW5wdXQgPSBUZXN0SW5wdXQub2YoRGF0ZVJhbmdlQ29udHJvbEludGVudC5vZih7ICdhY3Rpb24nOiAkLkFjdGlvbi5TZXQsICd0YXJnZXQnOiAnZm9vZCcsICdBTUFaT04uREFURS5hJzogJzIwMTYnLCAnQU1BWk9OLkRBVEUuYic6ICcyMDE3J30pKTtcbiAgICAgICAgICAgIGNvbnN0IGNhbkhhbmRsZVJlc3VsdCA9IGF3YWl0IGNvbnRyb2wuY2FuSGFuZGxlKGlucHV0KTtcbiAgICAgICAgICAgIGV4cGVjdChjYW5IYW5kbGVSZXN1bHQpLmZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCd0d28gdGFyZ2V0cyB3aXRoIGVpdGhlciBvbmUgdW5rbm93biBzaG91bGQgYmUgcmVqZWN0ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb250cm9sID0gZGF0ZVJhbmdlQ29udHJvbFVuZGVyVGVzdCgpO1xuICAgICAgICAgICAgY29uc3QgaW5wdXQgPSBUZXN0SW5wdXQub2YoRGF0ZVJhbmdlQ29udHJvbEludGVudC5vZih7ICdhY3Rpb24nOiAkLkFjdGlvbi5TZXQsICd0YXJnZXQuYSc6ICQuVGFyZ2V0LlN0YXJ0RGF0ZSwgJ3RhcmdldC5iJzogJ2Zvb2QnLCAnQU1BWk9OLkRBVEUuYSc6ICcyMDE2JywgJ0FNQVpPTi5EQVRFLmInOiAnMjAxNyd9KSk7XG4gICAgICAgICAgICBjb25zdCBjYW5IYW5kbGVSZXN1bHQgPSBhd2FpdCBjb250cm9sLmNhbkhhbmRsZShpbnB1dCk7XG4gICAgICAgICAgICBleHBlY3QoY2FuSGFuZGxlUmVzdWx0KS5mYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcbn0pO1xuIl19