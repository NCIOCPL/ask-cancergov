"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License').
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the 'license' file accompanying this file. This file is distributed
 * on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const mocha_1 = require("mocha");
const Strings_1 = require("../../src/constants/Strings");
const ControlManager_1 = require("../../src/controls/ControlManager");
const SingleValueControlIntent_1 = require("../../src/intents/SingleValueControlIntent");
const ControlHandler_1 = require("../../src/runtime/ControlHandler");
const TestingUtils_1 = require("../../src/utils/testSupport/TestingUtils");
const ListControl_1 = require("../../src/commonControls/listControl/ListControl");
const IntentUtils_1 = require("../../src/utils/IntentUtils");
const AmazonBuiltInIntent_1 = require("../../src/intents/AmazonBuiltInIntent");
TestingUtils_1.waitForDebugger();
mocha_1.suite('ListControl e2e tests', () => {
    class ListControlManager extends ControlManager_1.ControlManager {
        createControlTree(state) {
            return new ListControl_1.ListControl({
                id: 'apple',
                validation: (state, input) => ['iPhone', 'iPad', 'MacBook'].includes(state.value) ? true : { renderedReason: 'Apple Suite category validation failed' },
                listItemIDs: ['iPhone', 'iPad', 'MacBook'],
                slotType: 'AppleSuite',
                confirmationRequired: true,
                prompts: {
                    valueSet: '',
                }
            });
        }
    }
    mocha_1.test('product value valid, needs explicit affirming', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ListControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: iPhone', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPhone' })),
            'A: Was that iPhone?',
            'U: Yeah.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
            'A: Great.'
        ]);
    });
    mocha_1.test('product value after disaffirmation, requires request value act', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ListControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: iPhone', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPhone' })),
            'A: Was that iPhone?',
            'U: No.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.NoIntent)),
            'A: My mistake. What is your selection? Some suggestions are iPhone, iPad or MacBook.'
        ]);
    });
    mocha_1.test('product value set and changing it requires confirmation and value changed act', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ListControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: iPhone', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPhone' })),
            'A: Was that iPhone?',
            'U: Yes.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
            'A: Great.',
            'U: Change to iPad.', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPad', action: Strings_1.Strings.Action.Change })),
            'A: OK, I changed it to iPad. Was that iPad?',
            'U: Yes.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
            'A: Great.'
        ]);
    });
    mocha_1.test('product value set and changing it to invalid requires confirmation and checks for validations', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ListControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: iPhone', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPhone' })),
            'A: Was that iPhone?',
            'U: Yes.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
            'A: Great.',
            'U: Change to Airpods.', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'Airpods', action: Strings_1.Strings.Action.Change })),
            'A: Sorry, Airpods is not a valid choice because Apple Suite category validation failed. What should I change it to? Some suggestions are iPhone, iPad or MacBook.',
            'U: iPad', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPad' })),
            'A: OK, I changed it to iPad. Was that iPad?',
            'U: No.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.NoIntent)),
            'A: My mistake. What is your selection? Some suggestions are iPhone, iPad or MacBook.',
            'U: iPad', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPad' })),
            'A: OK, I changed it to iPad. Was that iPad?',
            'U: Yes.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
            'A: Great.'
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,