"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License').
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the 'license' file accompanying this file. This file is distributed
 * on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const mocha_1 = require("mocha");
const NumberControl_1 = require("../../src/commonControls/NumberControl");
const Strings_1 = require("../../src/constants/Strings");
const ControlManager_1 = require("../../src/controls/ControlManager");
const AmazonBuiltInSlotType_1 = require("../../src/intents/AmazonBuiltInSlotType");
const GeneralControlIntent_1 = require("../../src/intents/GeneralControlIntent");
const SingleValueControlIntent_1 = require("../../src/intents/SingleValueControlIntent");
const ControlHandler_1 = require("../../src/runtime/ControlHandler");
const TestingUtils_1 = require("../../src/utils/testSupport/TestingUtils");
const IntentUtils_1 = require("../../src/utils/IntentUtils");
const AmazonBuiltInIntent_1 = require("../../src/intents/AmazonBuiltInIntent");
TestingUtils_1.waitForDebugger();
mocha_1.suite('NumberControl e2e tests', () => {
    mocha_1.suite('NumberControl e2e tests - NumberControl without validation nor expectation', () => {
        const TEST_CONTROL_ID = 'NumberSelectorWithoutValidationExpectation';
        class NumberControlManager extends ControlManager_1.ControlManager {
            createControlTree(state) {
                return new NumberControl_1.NumberControl({
                    id: TEST_CONTROL_ID,
                    confirmationRequired: true
                });
            }
        }
        mocha_1.test('number valid but without expectation, needs explicit affirming', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: ', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({})),
                'A: What number?',
                'U: Sixteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '16' })),
                'A: Was that 16?',
                'U: Yes.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
                'A: Great.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(16);
        });
    });
    mocha_1.suite('NumberControl e2e tests - NumberControl with expectation function and validation functions', () => {
        const TEST_CONTROL_ID = 'NumberSelectorWithoutValidationExpectation';
        class NumberControlManager extends ControlManager_1.ControlManager {
            createControlTree(state) {
                return new NumberControl_1.NumberControl({
                    id: TEST_CONTROL_ID,
                    prompts: {},
                    validation: [
                        state => (state.value > 0) || { renderedReason: 'the value must be positive' },
                        state => (state.value % 2 === 0) || { renderedReason: 'the value must be even' }
                    ],
                    confirmationRequired: (state, input) => state.value !== undefined && (state.value < 10 || state.value > 20)
                });
            }
        }
        mocha_1.test('first number not valid but expected, second number valid and expected', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: ', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({})),
                'A: What number?',
                'U: Fifteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '15' })),
                'A: Sorry but that\'s not a valid choice because the value must be even. What number?',
                'U: Sixteen.', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '16' })),
                'A: Ok. Value set to 16.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(16);
        });
    });
    mocha_1.suite('NumberControl e2e tests - NumberControl with custom validation and expectation', () => {
        const TEST_CONTROL_ID = 'NumberSelectorWithValidationExpectation';
        class NumberControlManager extends ControlManager_1.ControlManager {
            createControlTree(state) {
                return new NumberControl_1.NumberControl({
                    id: TEST_CONTROL_ID,
                    prompts: {
                        requestValue: () => ['How many?']
                    },
                    validation: state => (state.value >= 0 && state.value <= 50) || { renderedReason: 'the value must be between zero and fifty inclusive' },
                    confirmationRequired: (state, input) => state.value !== undefined && ![1, 2, 3, 4, 5, 6].includes(state.value),
                });
            }
        }
        mocha_1.test('input number valid and expected, do not need confirmation', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: Six', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '6' })),
                'A: Ok. Value set to 6.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(6);
        });
        mocha_1.test('number valid but not expected, needs explicit affirming', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: ', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({})),
                'A: How many?',
                'U: Sixteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '16' })),
                'A: Was that 16?',
                'U: Yes.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
                'A: Great.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(16);
        });
        mocha_1.test('overfilling the affirmation', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: Sixteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '16' })),
                'A: Was that 16?',
                'U: Yes, change it to 16', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "feedback": Strings_1.Strings.Feedback.Affirm, "action": Strings_1.Strings.Action.Change, 'AMAZON.NUMBER': '16' })),
                'A: Great.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(16);
        });
        mocha_1.test('affirmation with a different value, confirm user with the latest number', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: Sixteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '16' })),
                'A: Was that 16?',
                'U: Yes, change it to 6', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "feedback": Strings_1.Strings.Feedback.Affirm, "action": Strings_1.Strings.Action.Change, 'AMAZON.NUMBER': '6' })),
                'A: Sorry the previous value is 16, but you confirmed to a different number. Was that 6?',
                'U: Yes.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
                'A: Great.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(6);
        });
        mocha_1.test('disaffirm with the same value, confirm user with the number', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: Sixteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '16' })),
                'A: Was that 16?',
                'U: No, change it to 16', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "feedback": Strings_1.Strings.Feedback.Disaffirm, "action": Strings_1.Strings.Action.Change, 'AMAZON.NUMBER': '16' })),
                'A: Sorry you disagreed but with the same number. How many?',
                'U: Six.', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '6' })),
                'A: Ok. Value set to 6.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(6);
        });
        mocha_1.test('only provide a same value during confirmation, confirm user with the existing number', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: Sixteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '16' })),
                'A: Was that 16?',
                'U: 16', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '16' })),
                'A: Great.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(16);
        });
        mocha_1.test('only provide a different value during confirmation, confirm user with the new number', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: Sixteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '16' })),
                'A: Was that 16?',
                'U: Change it to 6', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Change, 'AMAZON.NUMBER': '6' })),
                'A: Ok. Value set to 6.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(6);
        });
        mocha_1.test('first number strictly disaffirmed, propose user with ambiguous pair based on the first number', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: Fifteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '15' })),
                'A: Was that 15?',
                'U: No, fifteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "feedback": Strings_1.Strings.Feedback.Disaffirm, 'AMAZON.NUMBER': '15' })),
                'A: Sorry you disagreed but with the same number. Did you perhaps mean 50?',
                'U: Yes', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
                'A: Great.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(50);
        });
        mocha_1.test('first number strictly disaffirmed, but ambiguous pair invalid, request value from user', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: Sixteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '16' })),
                'A: Was that 16?',
                'U: No.', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.NoIntent)),
                'A: My mistake. How many?',
                'U: Set to five', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '5' })),
                'A: Ok. Value set to 5.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(5);
        });
        mocha_1.test('first number disaffirmed, second number invalid, third number expected', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: ', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({})),
                'A: How many?',
                'U: Sixteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '16' })),
                'A: Was that 16?',
                'U: No, sixteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "feedback": Strings_1.Strings.Feedback.Disaffirm, 'AMAZON.NUMBER': '16' })),
                'A: Sorry you disagreed but with the same number. How many?',
                'U: One thousand', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '1000' })),
                'A: Sorry but that\'s not a valid choice because the value must be between zero and fifty inclusive. How many?',
                'U: Change to 26', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Change, 'AMAZON.NUMBER': '26' })),
                'A: Was that 26?',
                'U: Yes', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
                'A: Great.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(26);
        });
        mocha_1.test('first number disaffirmed, ambiguous pair hit but still disaffirmed, third number expected', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: ', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({})),
                'A: How many?',
                'U: Forty', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '40' })),
                'A: Was that 40?',
                'U: No', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.NoIntent)),
                'A: My mistake. Did you perhaps mean 14?',
                'U: No', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.NoIntent)),
                'A: My mistake. How many?',
                'U: Three', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '3' })),
                'A: Ok. Value set to 3.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(3);
        });
        mocha_1.test('first number disaffirmed, unusable repeated number happens, third number expected', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: ', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({})),
                'A: How many?',
                'U: Sixteen', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '16' })),
                'A: Was that 16?',
                'U: No', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.NoIntent)),
                'A: My mistake. How many?',
                'U: Change the number', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Change, target: Strings_1.Strings.Target.Number })),
                'A: How many?',
                'U: I want sixteen of them', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '16' })),
                'A: I\'m really sorry but I heard 16 again. How many?',
                'U: Never mind I want 20', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '20' })),
                'A: Was that 20?',
                'U: No', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.NoIntent)),
                'A: My mistake. How many?',
                'U: I want sixteen of them', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Set, 'AMAZON.NUMBER': '16' })),
                'A: I\'m really sorry but I heard 16 again. How many?',
                'U: Never mind I want 20', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '20' })),
                'A: I\'m really sorry but I heard 20 again. How many?',
                'U: Change to Five', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { "action": Strings_1.Strings.Action.Change, 'AMAZON.NUMBER': '5' })),
                'A: Ok. Value set to 5.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(5);
        });
        mocha_1.test('handling special number like negative and zero', async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new NumberControlManager());
            await TestingUtils_1.testE2E(requestHandler, [
                'U: Minus ten.', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '-10' })),
                'A: Sorry but that\'s not a valid choice because the value must be between zero and fifty inclusive. How many?',
                'U: Zero', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '0' })),
                'A: Was that 0?',
                'U: Yes', TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of(AmazonBuiltInIntent_1.AmazonIntent.YesIntent)),
                'A: Great.'
            ]);
            chai_1.expect(requestHandler.getSerializableControlStates()[TEST_CONTROL_ID].value).eq(0);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,