"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chai_1 = require("chai");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const mocha_1 = require("mocha");
const Strings_1 = require("../src/constants/Strings");
const ControlManager_1 = require("../src/controls/ControlManager");
const ErrorUtils_1 = require("../src/utils/ErrorUtils");
const TestingUtils_1 = require("../src/utils/testSupport/TestingUtils");
const game_strings_1 = require("./game_strings");
const SingleValueControlIntent_1 = require("../src/intents/SingleValueControlIntent");
const GeneralControlIntent_1 = require("../src/intents/GeneralControlIntent");
const InitiativeActs_1 = require("../src/systemActs/InitiativeActs");
const ContainerControl_1 = require("../src/controls/ContainerControl");
const ValueControl_1 = require("../src/commonControls/ValueControl");
const NumberControl_1 = require("../src/commonControls/NumberControl");
/**
 * Demonstrate standard ControlState object but with different Controls to handle them
 * the choice of control to use is by controlState.type and by registering the control types
 * with the UserInterface so that it can function as a control factory.
 */
mocha_1.suite("== Custom policy scenarios (custom_policy.ts) ==", () => {
    mocha_1.test("container with custom canHandle that always returns false.", async () => {
        const rootControl = new CustomManager('never').createControlTree();
        const input = TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('CUSTOM.name', { 'action': Strings_1.Strings.Action.Set, 'target': game_strings_1.GameStrings.Target.Name, 'CUSTOM.name': "Mike" }));
        const result = await TestingUtils_1.simpleInvoke(rootControl, input);
        chai_1.expect(result.acts).length(0);
    });
    mocha_1.test("Default canHandle returns first listed control (playerName)", async () => {
        const rootControl = new CustomManager('normal').createControlTree();
        const input = TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Set })); // TODO:handle SingleValueControlIntent with just slotTypes
        const result = await TestingUtils_1.simpleInvoke(rootControl, input);
        chai_1.expect(result.acts[0]).instanceOf(InitiativeActs_1.RequestValueAct);
        chai_1.expect(result.acts[0].control.id).equals(game_strings_1.GameStrings.ID.PlayerName);
    });
    mocha_1.test("Custom policy for container.canHandle returns different initiative control (playerAge rather than playerName)", async () => {
        const rootControl = new CustomManager('reverse').createControlTree();
        const input = TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Set })); // TODO:handle SingleValueControlIntent with just slotTypes
        const result = await TestingUtils_1.simpleInvoke(rootControl, input);
        chai_1.expect(result.acts[0]).instanceOf(InitiativeActs_1.RequestValueAct);
        chai_1.expect(result.acts[0].control.id).equals(game_strings_1.GameStrings.ID.PlayerAge); // <====== RESULT: Requesting Age rather than Name.
    });
});
class CustomManager extends ControlManager_1.ControlManager {
    constructor(type) {
        super();
        this.type = type;
    }
    createControlTree(state, input) {
        let topControl;
        switch (this.type) {
            case 'normal':
                topControl = new ContainerControl_1.ContainerControl({ id: game_strings_1.GameStrings.ID.PlayerContainer });
                break;
            case 'never':
                topControl = new NeverHandlesControl({ id: game_strings_1.GameStrings.ID.PlayerContainer });
                break;
            case 'reverse':
                topControl = new ReverseOrderControl({ id: game_strings_1.GameStrings.ID.PlayerContainer });
                break;
            default: throw new Error();
        }
        topControl.addChild(new ValueControl_1.ValueControl({
            id: game_strings_1.GameStrings.ID.PlayerName,
            slotType: 'CUSTOM.name',
            prompts: { requestValue: "none" },
            interactionModel: { targets: [game_strings_1.GameStrings.Target.Name] }
        }));
        topControl.addChild(new NumberControl_1.NumberControl({
            id: game_strings_1.GameStrings.ID.PlayerAge,
            prompts: { requestValue: "none" },
            interactionModel: { targets: [game_strings_1.GameStrings.Target.Age] }
        }));
        return topControl;
    }
}
/**
 * A ContainerControl that will never handle an input.
 */
class NeverHandlesControl extends ContainerControl_1.ContainerControl {
    async canHandle(input) {
        return false;
    }
}
/**
 * A ContainerControl that iterates its children backwards when looking for a child to handle an input.
 */
class ReverseOrderControl extends ContainerControl_1.ContainerControl {
    async canHandle(input) {
        return this.canHandleByChild(input);
    }
    async handle(input, resultBuilder) {
        return this.handleByChild(input, resultBuilder);
    }
    async canTakeInitiative(input) {
        return this.canTakeInitiativeByChild(input);
    }
    async takeInitiative(input, resultBuilder) {
        return this.takeInitiativeByChild(input, resultBuilder);
    }
    async decideHandlingChild(candidates, input) {
        ErrorUtils_1.throwIf(candidates.length === 0, "options is empty");
        return lodash_1.default.last(candidates); // <====== CUSTOM: return last rather than first
    }
    async decideInitiativeChild(candidates, input) {
        ErrorUtils_1.throwIf(candidates.length === 0, "options is empty");
        return lodash_1.default.last(candidates); // <====== CUSTOM: return last rather than first
    }
}
//# sourceMappingURL=data:application/json;base64,