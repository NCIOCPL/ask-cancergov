"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableControlsManager = exports.MyMultiControl = exports.MyMultiControlState = void 0;
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
const chai_1 = require("chai");
const mocha_1 = require("mocha");
const src_1 = require("../src");
const Strings_1 = require("../src/constants/Strings");
const ContainerControl_1 = require("../src/controls/ContainerControl");
const ControlManager_1 = require("../src/controls/ControlManager");
const GeneralControlIntent_1 = require("../src/intents/GeneralControlIntent");
const ControlHandler_1 = require("../src/runtime/ControlHandler");
const ArrayUtils_1 = require("../src/utils/ArrayUtils");
const SkillInvoker_1 = require("../src/utils/testSupport/SkillInvoker");
const SkillWrapper_1 = require("../src/utils/testSupport/SkillWrapper");
const TestingUtils_1 = require("../src/utils/testSupport/TestingUtils");
TestingUtils_1.waitForDebugger();
/**
 * An example of a container than manages a variable number of child controls.
 */
mocha_1.suite("== dynamic controls ==", () => {
    mocha_1.test("e2e", async () => {
        let response;
        const requestHandler = new ControlHandler_1.ControlHandler(new VariableControlsManager());
        const skill = new SkillInvoker_1.SkillInvoker(SkillWrapper_1.wrapRequestHandlerAsSkill(requestHandler));
        // Note: this test demonstrates SkillInvoker.invoke() directly to observe all the surface form details of the response.
        response = await skill.invoke(TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Set }))); // TODO: Update tests to better demonstrate dynamic trees support.
        chai_1.expect(response.prompt).equals("I have 1 child control. What value for number 1?");
        response = await skill.invoke(TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: "addAnother" })));
        chai_1.expect(response.prompt).equals("I have 2 child controls. What value for number 1?");
        response = await skill.invoke(TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('CUSTOM.name', { 'CUSTOM.name': 'bob' })));
        chai_1.expect(response.prompt).equals("OK. I have 2 child controls. What value for number 2?");
        response = await skill.invoke(TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('CUSTOM.name', { 'CUSTOM.name': 'frank' })));
        chai_1.expect(response.prompt).equals("OK. I have 2 child controls.");
        chai_1.expect(response.reprompt).equals("OK. I have 2 child controls.");
    });
});
class MyMultiControlState extends ContainerControl_1.ContainerControlState {
}
exports.MyMultiControlState = MyMultiControlState;
class MyMultiControl extends ContainerControl_1.ContainerControl {
    constructor(props, initialState) {
        super(props);
        this.state = initialState !== null && initialState !== void 0 ? initialState : new MyMultiControlState();
    }
    async canHandle(input) {
        const request = input.request;
        if (request.type !== 'IntentRequest') {
            return false;
        }
        const intent = request.intent;
        const unpacked = (intent.name === 'GeneralControlIntent')
            ? GeneralControlIntent_1.unpackGeneralControlIntent(intent)
            : src_1.unpackSingleValueControlIntent(intent);
        if (unpacked.action === 'addAnother') {
            return true;
        }
        return this.canHandleByChild(input);
    }
    async handle(input, resultBuilder) {
        const request = input.request;
        if (request.type !== 'IntentRequest') {
            throw new Error();
        }
        const intent = request.intent;
        const unpacked = (intent.name === 'GeneralControlIntent')
            ? GeneralControlIntent_1.unpackGeneralControlIntent(intent)
            : src_1.unpackSingleValueControlIntent(intent);
        /*
         * Special behavior #1: Always include the content act to state how many controls we currently have.
         * Special behavior #2: If the action is addAnother, then handle it directly
         * Default behavior: do the usual containerControl handling. and merge with Special behavior #1.
         */
        if (unpacked.action === 'addAnother') {
            this.state.count = this.state.count + 1;
            resultBuilder.addAct(this.createContentAct(this.state.count));
            this.children.push(MyMultiControl.makeValueControl(this.state.count));
            return;
        }
        resultBuilder.addAct(this.createContentAct(this.state.count));
        await this.handleByChild(input, resultBuilder);
        /*
         * [1] Because handleByChild can produce multiple acts, after the merge we may end up with a strange ordering
         * .. so we detect it and fix it.
         *     [ contentAct, valueSetAct, <initiativeAct> ]
         *        ^-- reorder these --^
         */
        if (resultBuilder.acts[0] instanceof src_1.LiteralContentAct && resultBuilder.acts[1] instanceof src_1.ValueSetAct) {
            ArrayUtils_1.moveArrayItem(resultBuilder.acts, 1, 0);
        }
        return;
    }
    createContentAct(count) {
        return new src_1.LiteralContentAct(this, { promptFragment: `I have ${count} child control${count === 1 ? '' : 's'}.` });
    }
    static makeValueControl(index) {
        return new MyValueControl({
            id: `value${index.toString()}`,
            slotType: 'CUSTOM.name',
            prompts: {
                requestValue: act => `What value for number ${act.control.index}?`,
                valueSet: 'OK.'
            },
            reprompts: {
                requestValue: act => `What value for number ${act.control.index}?`,
                valueSet: 'OK.'
            },
            interactionModel: { targets: ['name'] },
            index
        });
    }
}
exports.MyMultiControl = MyMultiControl;
class VariableControlsManager extends ControlManager_1.ControlManager {
    createControlTree(state) {
        const controlCount = state.multiValueContainer !== undefined ? state.multiValueContainer.count !== undefined ? state.multiValueContainer.count : 1 : 1;
        const topControl = new MyMultiControl({ id: 'multiValueContainer' }, { count: 1 });
        for (let i = 1; i <= controlCount; i++) {
            topControl.addChild(MyMultiControl.makeValueControl(i));
        }
        return topControl;
    }
}
exports.VariableControlsManager = VariableControlsManager;
class MyValueControlState extends src_1.ValueControlState {
}
class MyValueControl extends src_1.ValueControl {
    constructor(props) {
        super(props);
        this.index = props.index;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pY19jb250cm9scy5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdC9keW5hbWljX2NvbnRyb2xzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCwrQkFBOEI7QUFDOUIsaUNBQW9DO0FBQ3BDLGdDQUFzSztBQUN0SyxzREFBd0Q7QUFDeEQsdUVBQTJGO0FBRzNGLG1FQUFnRTtBQUVoRSw4RUFBdUc7QUFDdkcsa0VBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCx3RUFBcUU7QUFDckUsd0VBQWtGO0FBQ2xGLHdFQUFtRjtBQUduRiw4QkFBZSxFQUFFLENBQUM7QUFFbEI7O0dBRUc7QUFDSCxhQUFLLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLFlBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkIsSUFBSSxRQUFRLENBQUM7UUFFYixNQUFNLGNBQWMsR0FBRyxJQUFJLCtCQUFjLENBQUMsSUFBSSx1QkFBdUIsRUFBRSxDQUFDLENBQUM7UUFDekUsTUFBTSxLQUFLLEdBQUcsSUFBSSwyQkFBWSxDQUFDLHdDQUF5QixDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFFMUUsdUhBQXVIO1FBRXZILFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsd0JBQVMsQ0FBQyxFQUFFLENBQUMsMkNBQW9CLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLGlCQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsa0VBQWtFO1FBQ2xLLGFBQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLGtEQUFrRCxDQUFDLENBQUM7UUFFbkYsUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyx3QkFBUyxDQUFDLEVBQUUsQ0FBQywyQ0FBb0IsQ0FBQyxFQUFF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LEtBQUssQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0lBQzdCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tIFwiY2hhaVwiO1xuaW1wb3J0IHsgc3VpdGUsIHRlc3QgfSBmcm9tIFwibW9jaGFcIjtcbmltcG9ydCB7IExpdGVyYWxDb250ZW50QWN0LCBTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQsIHVucGFja1NpbmdsZVZhbHVlQ29udHJvbEludGVudCwgVmFsdWVDb250cm9sLCBWYWx1ZUNvbnRyb2xQcm9wcywgVmFsdWVDb250cm9sU3RhdGUsIFZhbHVlU2V0QWN0IH0gZnJvbSAnLi4vc3JjJztcbmltcG9ydCB7IFN0cmluZ3MgYXMgJCB9IGZyb20gXCIuLi9zcmMvY29uc3RhbnRzL1N0cmluZ3NcIjtcbmltcG9ydCB7IENvbnRhaW5lckNvbnRyb2wsIENvbnRhaW5lckNvbnRyb2xTdGF0ZSB9IGZyb20gJy4uL3NyYy9jb250cm9scy9Db250YWluZXJDb250cm9sJztcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tICcuLi9zcmMvY29udHJvbHMvQ29udHJvbCc7XG5pbXBvcnQgeyBDb250cm9sSW5wdXQgfSBmcm9tICcuLi9zcmMvY29udHJvbHMvQ29udHJvbElucHV0JztcbmltcG9ydCB7IENvbnRyb2xNYW5hZ2VyIH0gZnJvbSAnLi4vc3JjL2NvbnRyb2xzL0NvbnRyb2xNYW5hZ2VyJztcbmltcG9ydCB7IENvbnRyb2xSZXN1bHRCdWlsZGVyIH0gZnJvbSAnLi4vc3JjL2NvbnRyb2xzL0NvbnRyb2xSZXN1bHQnO1xuaW1wb3J0IHsgR2VuZXJhbENvbnRyb2xJbnRlbnQsIHVucGFja0dlbmVyYWxDb250cm9sSW50ZW50IH0gZnJvbSAnLi4vc3JjL2ludGVudHMvR2VuZXJhbENvbnRyb2xJbnRlbnQnO1xuaW1wb3J0IHsgQ29udHJvbEhhbmRsZXIgfSBmcm9tICcuLi9zcmMvcnVudGltZS9Db250cm9sSGFuZGxlcic7XG5pbXBvcnQgeyBtb3ZlQXJyYXlJdGVtIH0gZnJvbSAnLi4vc3JjL3V0aWxzL0FycmF5VXRpbHMnO1xuaW1wb3J0IHsgU2tpbGxJbnZva2VyIH0gZnJvbSAnLi4vc3JjL3V0aWxzL3Rlc3RTdXBwb3J0L1NraWxsSW52b2tlcic7XG5pbXBvcnQgeyB3cmFwUmVxdWVzdEhhbmRsZXJBc1NraWxsIH0gZnJvbSAnLi4vc3JjL3V0aWxzL3Rlc3RTdXBwb3J0L1NraWxsV3JhcHBlcic7XG5pbXBvcnQgeyBUZXN0SW5wdXQsIHdhaXRGb3JEZWJ1Z2dlciB9IGZyb20gJy4uL3NyYy91dGlscy90ZXN0U3VwcG9ydC9UZXN0aW5nVXRpbHMnO1xuXG5cbndhaXRGb3JEZWJ1Z2dlcigpO1xuXG4vKipcbiAqIEFuIGV4YW1wbGUgb2YgYSBjb250YWluZXIgdGhhbiBtYW5hZ2VzIGEgdmFyaWFibGUgbnVtYmVyIG9mIGNoaWxkIGNvbnRyb2xzLlxuICovXG5zdWl0ZShcIj09IGR5bmFtaWMgY29udHJvbHMgPT1cIiwgKCkgPT4ge1xuICAgIHRlc3QoXCJlMmVcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQgcmVzcG9uc2U7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdEhhbmRsZXIgPSBuZXcgQ29udHJvbEhhbmRsZXIobmV3IFZhcmlhYmxlQ29udHJvbHNNYW5hZ2VyKCkpO1xuICAgICAgICBjb25zdCBza2lsbCA9IG5ldyBTa2lsbEludm9rZXIod3JhcFJlcXVlc3RIYW5kbGVyQXNTa2lsbChyZXF1ZXN0SGFuZGxlcikpO1xuXG4gICAgICAgIC8vIE5vdGU6IHRoaXMgdGVzdCBkZW1vbnN0cmF0ZXMgU2tpbGxJbnZva2VyLmludm9rZSgpIGRpcmVjdGx5IHRvIG9ic2VydmUgYWxsIHRoZSBzdXJmYWNlIGZvcm0gZGV0YWlscyBvZiB0aGUgcmVzcG9uc2UuXG5cbiAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBza2lsbC5pbnZva2UoVGVzdElucHV0Lm9mKEdlbmVyYWxDb250cm9sSW50ZW50Lm9mKHsgYWN0aW9uOiAkLkFjdGlvbi5TZXQgfSkpKTsgLy8gVE9ETzogVXBkYXRlIHRlc3RzIHRvIGJldHRlciBkZW1vbnN0cmF0ZSBkeW5hbWljIHRyZWVzIHN1cHBvcnQuXG4gICAgICAgIGV4cGVjdChyZXNwb25zZS5wcm9tcHQpLmVxdWFscyhcIkkgaGF2ZSAxIGNoaWxkIGNvbnRyb2wuIFdoYXQgdmFsdWUgZm9yIG51bWJlciAxP1wiKTtcblxuICAgICAgICByZXNwb25zZSA9IGF3YWl0IHNraWxsLmludm9rZShUZXN0SW5wdXQub2YoR2VuZXJhbENvbnRyb2xJbnRlbnQub2YoeyBhY3Rpb246IFwiYWRkQW5vdGhlclwiIH0pKSk7XG4gICAgICAgIGV4cGVjdChyZXNwb25zZS5wcm9tcHQpLmVxdWFscyhcIkkgaGF2ZSAyIGNoaWxkIGNvbnRyb2xzLiBXaGF0IHZhbHVlIGZvciBudW1iZXIgMT9cIik7XG5cbiAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBza2lsbC5pbnZva2UoVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZignQ1VTVE9NLm5hbWUnLCB7ICdDVVNUT00ubmFtZSc6ICdib2InIH0pKSk7XG4gICAgICAgIGV4cGVjdChyZXNwb25zZS5wcm9tcHQpLmVxdWFscyhcIk9LLiBJIGhhdmUgMiBjaGlsZCBjb250cm9scy4gV2hhdCB2YWx1ZSBmb3IgbnVtYmVyIDI/XCIpO1xuXG4gICAgICAgIHJlc3BvbnNlID0gYXdhaXQgc2tpbGwuaW52b2tlKFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoJ0NVU1RPTS5uYW1lJywgeyAnQ1VTVE9NLm5hbWUnOiAnZnJhbmsnIH0pKSk7XG4gICAgICAgIGV4cGVjdChyZXNwb25zZS5wcm9tcHQpLmVxdWFscyhcIk9LLiBJIGhhdmUgMiBjaGlsZCBjb250cm9scy5cIik7XG4gICAgICAgIGV4cGVjdChyZXNwb25zZS5yZXByb21wdCkuZXF1YWxzKFwiT0suIEkgaGF2ZSAyIGNoaWxkIGNvbnRyb2xzLlwiKTtcbiAgICB9KTtcbn0pO1xuXG5leHBvcnQgY2xhc3MgTXlNdWx0aUNvbnRyb2xTdGF0ZSBleHRlbmRzIENvbnRhaW5lckNvbnRyb2xTdGF0ZSB7XG4gICAgY291bnQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIE15TXVsdGlDb250cm9sIGV4dGVuZHMgQ29udGFpbmVyQ29udHJvbCB7XG5cbiAgICBzdGF0ZTogTXlNdWx0aUNvbnRyb2xTdGF0ZTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiB7IGlkOiBzdHJpbmcgfSwgaW5pdGlhbFN0YXRlPzogTXlNdWx0aUNvbnRyb2xTdGF0ZSkge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBpbml0aWFsU3RhdGUgPz8gbmV3IE15TXVsdGlDb250cm9sU3RhdGUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBjYW5IYW5kbGUoaW5wdXQ6IENvbnRyb2xJbnB1dCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gaW5wdXQucmVxdWVzdDtcbiAgICAgICAgaWYgKHJlcXVlc3QudHlwZSAhPT0gJ0ludGVudFJlcXVlc3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW50ZW50ID0gcmVxdWVzdC5pbnRlbnQ7XG5cbiAgICAgICAgY29uc3QgdW5wYWNrZWQgPSAoaW50ZW50Lm5hbWUgPT09ICdHZW5lcmFsQ29udHJvbEludGVudCcpXG4gICAgICAgICAgICA/IHVucGFja0dlbmVyYWxDb250cm9sSW50ZW50KGludGVudClcbiAgICAgICAgICAgIDogdW5wYWNrU2luZ2xlVmFsdWVDb250cm9sSW50ZW50KGludGVudCk7XG5cbiAgICAgICAgaWYgKHVucGFja2VkLmFjdGlvbiA9PT0gJ2FkZEFub3RoZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNhbkhhbmRsZUJ5Q2hpbGQoaW5wdXQpO1xuICAgIH1cblxuICAgIGFzeW5jIGhhbmRsZShpbnB1dDogQ29udHJvbElucHV0LCByZXN1bHRCdWlsZGVyOiBDb250cm9sUmVzdWx0QnVpbGRlcik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gaW5wdXQucmVxdWVzdDtcbiAgICAgICAgaWYgKHJlcXVlc3QudHlwZSAhPT0gJ0ludGVudFJlcXVlc3QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnRlbnQgPSByZXF1ZXN0LmludGVudDtcbiAgICAgICAgY29uc3QgdW5wYWNrZWQgPSAoaW50ZW50Lm5hbWUgPT09ICdHZW5lcmFsQ29udHJvbEludGVudCcpXG4gICAgICAgICAgICA/IHVucGFja0dlbmVyYWxDb250cm9sSW50ZW50KGludGVudClcbiAgICAgICAgICAgIDogdW5wYWNrU2luZ2xlVmFsdWVDb250cm9sSW50ZW50KGludGVudCk7XG5cbiAgICAgICAgLypcbiAgICAgICAgICogU3BlY2lhbCBiZWhhdmlvciAjMTogQWx3YXlzIGluY2x1ZGUgdGhlIGNvbnRlbnQgYWN0IHRvIHN0YXRlIGhvdyBtYW55IGNvbnRyb2xzIHdlIGN1cnJlbnRseSBoYXZlLlxuICAgICAgICAgKiBTcGVjaWFsIGJlaGF2aW9yICMyOiBJZiB0aGUgYWN0aW9uIGlzIGFkZEFub3RoZXIsIHRoZW4gaGFuZGxlIGl0IGRpcmVjdGx5XG4gICAgICAgICAqIERlZmF1bHQgYmVoYXZpb3I6IGRvIHRoZSB1c3VhbCBjb250YWluZXJDb250cm9sIGhhbmRsaW5nLiBhbmQgbWVyZ2Ugd2l0aCBTcGVjaWFsIGJlaGF2aW9yICMxLlxuICAgICAgICAgKi9cblxuICAgICAgICBpZiAodW5wYWNrZWQuYWN0aW9uID09PSAnYWRkQW5vdGhlcicpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuY291bnQgPSB0aGlzLnN0YXRlLmNvdW50ICsgMTtcbiAgICAgICAgICAgIHJlc3VsdEJ1aWxkZXIuYWRkQWN0KHRoaXMuY3JlYXRlQ29udGVudEFjdCh0aGlzLnN0YXRlLmNvdW50KSk7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goTXlNdWx0aUNvbnRyb2wubWFrZVZhbHVlQ29udHJvbCh0aGlzLnN0YXRlLmNvdW50KSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHRCdWlsZGVyLmFkZEFjdCh0aGlzLmNyZWF0ZUNvbnRlbnRBY3QodGhpcy5zdGF0ZS5jb3VudCkpO1xuICAgICAgICBhd2FpdCB0aGlzLmhhbmRsZUJ5Q2hpbGQoaW5wdXQsIHJlc3VsdEJ1aWxkZXIpO1xuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFsxXSBCZWNhdXNlIGhhbmRsZUJ5Q2hpbGQgY2FuIHByb2R1Y2UgbXVsdGlwbGUgYWN0cywgYWZ0ZXIgdGhlIG1lcmdlIHdlIG1heSBlbmQgdXAgd2l0aCBhIHN0cmFuZ2Ugb3JkZXJpbmdcbiAgICAgICAgICogLi4gc28gd2UgZGV0ZWN0IGl0IGFuZCBmaXggaXQuXG4gICAgICAgICAqICAgICBbIGNvbnRlbnRBY3QsIHZhbHVlU2V0QWN0LCA8aW5pdGlhdGl2ZUFjdD4gXVxuICAgICAgICAgKiAgICAgICAgXi0tIHJlb3JkZXIgdGhlc2UgLS1eXG4gICAgICAgICAqL1xuICAgICAgICBpZiAocmVzdWx0QnVpbGRlci5hY3RzWzBdIGluc3RhbmNlb2YgTGl0ZXJhbENvbnRlbnRBY3QgJiYgcmVzdWx0QnVpbGRlci5hY3RzWzFdIGluc3RhbmNlb2YgVmFsdWVTZXRBY3QpIHtcbiAgICAgICAgICAgIG1vdmVBcnJheUl0ZW0ocmVzdWx0QnVpbGRlci5hY3RzLCAxLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjcmVhdGVDb250ZW50QWN0KGNvdW50OiBudW1iZXIpOiBMaXRlcmFsQ29udGVudEFjdCB7XG4gICAgICAgIHJldHVybiBuZXcgTGl0ZXJhbENvbnRlbnRBY3QodGhpcywge3Byb21wdEZyYWdtZW50OiBgSSBoYXZlICR7Y291bnR9IGNoaWxkIGNvbnRyb2wke2NvdW50ID09PSAxID8gJycgOiAncyd9LmB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG1ha2VWYWx1ZUNvbnRyb2woaW5kZXg6IG51bWJlcik6IENvbnRyb2wge1xuICAgICAgICByZXR1cm4gbmV3IE15VmFsdWVDb250cm9sKHtcbiAgICAgICAgICAgIGlkOiBgdmFsdWUke2luZGV4LnRvU3RyaW5nKCl9YCxcbiAgICAgICAgICAgIHNsb3RUeXBlOiAnQ1VTVE9NLm5hbWUnLFxuICAgICAgICAgICAgcHJvbXB0czoge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RWYWx1ZTogYWN0ID0+IGBXaGF0IHZhbHVlIGZvciBudW1iZXIgJHsoYWN0LmNvbnRyb2wgYXMgTXlWYWx1ZUNvbnRyb2wpLmluZGV4fT9gLFxuICAgICAgICAgICAgICAgIHZhbHVlU2V0OiAnT0suJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcHJvbXB0czoge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RWYWx1ZTogYWN0ID0+IGBXaGF0IHZhbHVlIGZvciBudW1iZXIgJHsoYWN0LmNvbnRyb2wgYXMgTXlWYWx1ZUNvbnRyb2wpLmluZGV4fT9gLFxuICAgICAgICAgICAgICAgIHZhbHVlU2V0OiAnT0suJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGludGVyYWN0aW9uTW9kZWw6IHsgdGFyZ2V0czogWyduYW1lJ10gfSxcbiAgICAgICAgICAgIGluZGV4XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZhcmlhYmxlQ29udHJvbHNNYW5hZ2VyIGV4dGVuZHMgQ29udHJvbE1hbmFnZXIge1xuXG4gICAgcHVibGljIGNyZWF0ZUNvbnRyb2xUcmVlKHN0YXRlOiBhbnkpOiBDb250cm9sIHtcblxuICAgICAgICBjb25zdCBjb250cm9sQ291bnQgPSBzdGF0ZS5tdWx0aVZhbHVlQ29udGFpbmVyICE9PSB1bmRlZmluZWQgPyBzdGF0ZS5tdWx0aVZhbHVlQ29udGFpbmVyLmNvdW50ICE9PSB1bmRlZmluZWQgPyBzdGF0ZS5tdWx0aVZhbHVlQ29udGFpbmVyLmNvdW50IDogMSA6IDE7XG4gICAgICAgIGNvbnN0IHRvcENvbnRyb2wgPSBuZXcgTXlNdWx0aUNvbnRyb2woXG4gICAgICAgICAgICB7IGlkOiAnbXVsdGlWYWx1ZUNvbnRhaW5lcicgfSxcbiAgICAgICAgICAgIHsgY291bnQ6IDEgfVxuICAgICAgICApO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGNvbnRyb2xDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB0b3BDb250cm9sLmFkZENoaWxkKE15TXVsdGlDb250cm9sLm1ha2VWYWx1ZUNvbnRyb2woaSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvcENvbnRyb2w7XG4gICAgfVxuXG59XG5cblxuXG5pbnRlcmZhY2UgTXlWYWx1ZUNvbnRyb2xQcm9wcyBleHRlbmRzIFZhbHVlQ29udHJvbFByb3BzIHtcbiAgICBpbmRleDogbnVtYmVyO1xufVxuXG5jbGFzcyBNeVZhbHVlQ29udHJvbFN0YXRlIGV4dGVuZHMgVmFsdWVDb250cm9sU3RhdGUge1xuICAgIGNvdW50OiBudW1iZXI7XG59XG5cbmNsYXNzIE15VmFsdWVDb250cm9sIGV4dGVuZHMgVmFsdWVDb250cm9sIHtcbiAgICBpbmRleDogbnVtYmVyO1xuXG4gICAgc3RhdGU6IE15VmFsdWVDb250cm9sU3RhdGU7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogTXlWYWx1ZUNvbnRyb2xQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBwcm9wcy5pbmRleDtcbiAgICB9XG59Il19