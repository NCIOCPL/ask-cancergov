"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const mocha_1 = require("mocha");
const ArrayUtils_1 = require("../../src/utils/ArrayUtils");
mocha_1.suite("== ArrayUtils.randomlyPick() ==", () => {
    mocha_1.test("ensure distribution is reasonable", async () => {
        const array = [0, 1, 2];
        const histogram = [0, 0, 0, 0, 0, 0, 0];
        for (let i = 0; i < 30000; i++) {
            histogram[ArrayUtils_1.randomlyPick(array)]++;
        }
        for (let i = 0; i < array.length; i++) {
            const relativeDiff = Math.abs((histogram[0] / histogram[i]) - 1.0);
            chai_1.expect(relativeDiff).lessThan(0.1); // conservative comparison to reduce false negatives
        }
    });
});
mocha_1.suite("== ArrayUtils.reorder() ==", () => {
    mocha_1.test("basics", async () => {
        const array = [0, 1, 2];
        chai_1.expect(ArrayUtils_1.moveArrayItem([0, 1, 2, 3, 4], 1, 0)).deep.equal([1, 0, 2, 3, 4]);
        chai_1.expect(ArrayUtils_1.moveArrayItem([0, 1, 2, 3, 4], 0, 2)).deep.equal([1, 2, 0, 3, 4]);
        chai_1.expect(ArrayUtils_1.moveArrayItem([0, 1, 2, 3, 4], 0, 5)).deep.equal([1, 2, 3, 4, 0]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXlVdGlscy5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdC91dGlsc1Rlc3QvYXJyYXlVdGlscy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7QUFFSCwrQkFBOEI7QUFDOUIsaUNBQW9DO0FBQ3BDLDJEQUF5RTtBQUV6RSxhQUFLLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO0lBQzFDLFlBQUksQ0FBQyxtQ0FBbUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNqRCxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEIsTUFBTSxTQUFTLEdBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVCLFNBQVMsQ0FBQyx5QkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNwQztRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDbkUsYUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLG9EQUFvRDtTQUMzRjtJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUM7QUFFSCxhQUFLLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO0lBQ3JDLFlBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDdEIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLGFBQU0sQ0FBQywwQkFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RSxhQUFNLENBQUMsMEJBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekUsYUFBTSxDQUFDLDBCQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBvciBpbiB0aGUgXCJsaWNlbnNlXCIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWRcbiAqIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tIFwiY2hhaVwiO1xuaW1wb3J0IHsgc3VpdGUsIHRlc3QgfSBmcm9tIFwibW9jaGFcIjtcbmltcG9ydCB7IG1vdmVBcnJheUl0ZW0sIHJhbmRvbWx5UGljayB9IGZyb20gJy4uLy4uL3NyYy91dGlscy9BcnJheVV0aWxzJztcblxuc3VpdGUoXCI9PSBBcnJheVV0aWxzLnJhbmRvbWx5UGljaygpID09XCIsICgpID0+IHtcbiAgICB0ZXN0KFwiZW5zdXJlIGRpc3RyaWJ1dGlvbiBpcyByZWFzb25hYmxlXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBbMCwgMSwgMl07XG4gICAgICAgIGNvbnN0IGhpc3RvZ3JhbTogbnVtYmVyW10gPSBbMCwgMCwgMCwgMCwgMCwgMCwgMF07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMDAwMDsgaSsrKSB7XG4gICAgICAgICAgICBoaXN0b2dyYW1bcmFuZG9tbHlQaWNrKGFycmF5KV0rKztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlRGlmZiA9IE1hdGguYWJzKChoaXN0b2dyYW1bMF0gLyBoaXN0b2dyYW1baV0pIC0gMS4wKTtcbiAgICAgICAgICAgIGV4cGVjdChyZWxhdGl2ZURpZmYpLmxlc3NUaGFuKDAuMSk7IC8vIGNvbnNlcnZhdGl2ZSBjb21wYXJpc29uIHRvIHJlZHVjZSBmYWxzZSBuZWdhdGl2ZXNcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG5cbnN1aXRlKFwiPT0gQXJyYXlVdGlscy5yZW9yZGVyKCkgPT1cIiwgKCkgPT4ge1xuICAgIHRlc3QoXCJiYXNpY3NcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBhcnJheSA9IFswLCAxLCAyXTtcbiAgICAgICAgZXhwZWN0KG1vdmVBcnJheUl0ZW0oWzAsIDEsIDIsIDMsIDRdLCAxLCAwKSkuZGVlcC5lcXVhbChbMSwgMCwgMiwgMywgNF0pO1xuICAgICAgICBleHBlY3QobW92ZUFycmF5SXRlbShbMCwgMSwgMiwgMywgNF0sIDAsIDIpKS5kZWVwLmVxdWFsKFsxLCAyLCAwLCAzLCA0XSk7XG4gICAgICAgIGV4cGVjdChtb3ZlQXJyYXlJdGVtKFswLCAxLCAyLCAzLCA0XSwgMCwgNSkpLmRlZXAuZXF1YWwoWzEsIDIsIDMsIDQsIDBdKTtcbiAgICB9KTtcbn0pO1xuIl19