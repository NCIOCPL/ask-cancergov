"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const mocha_1 = require("mocha");
const src_1 = require("../src");
const NumberControl_1 = require("../src/commonControls/NumberControl");
const ValueControl_1 = require("../src/commonControls/ValueControl");
const Strings_1 = require("../src/constants/Strings");
const ContainerControl_1 = require("../src/controls/ContainerControl");
const ControlManager_1 = require("../src/controls/ControlManager");
const ControlResult_1 = require("../src/controls/ControlResult");
const GeneralControlIntent_1 = require("../src/intents/GeneralControlIntent");
const SingleValueControlIntent_1 = require("../src/intents/SingleValueControlIntent");
const SessionBehavior_1 = require("../src/runtime/SessionBehavior");
const ContentActs_1 = require("../src/systemActs/ContentActs");
const InitiativeActs_1 = require("../src/systemActs/InitiativeActs");
const TestingUtils_1 = require("../src/utils/testSupport/TestingUtils");
const game_strings_1 = require("./game_strings");
TestingUtils_1.waitForDebugger();
mocha_1.suite("== Single value selector scenarios ==", () => {
    class SingleSelectorManager extends ControlManager_1.ControlManager {
        createControlTree(state) {
            const topControl = new ContainerControl_1.ContainerControl({ id: "root" });
            topControl.addChild(new ValueControl_1.ValueControl({
                id: game_strings_1.GameStrings.ID.PlayerName,
                slotType: 'CUSTOM.name',
                prompts: { requestValue: "none" },
                interactionModel: { targets: [game_strings_1.GameStrings.Target.Name] }
            }));
            return topControl;
        }
    }
    mocha_1.test("simple set-value input should be processed.", async () => {
        // Note: this test demonstrates calling handle() on a single control (yielding a ControlResult)
        const rootControl = new SingleSelectorManager().createControlTree({});
        const input = TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('CUSTOM.name', { 'action': Strings_1.Strings.Action.Set, 'target': game_strings_1.GameStrings.Target.Name, 'CUSTOM.name': "Mike" }));
        const result = new ControlResult_1.ControlResultBuilder(undefined);
        await rootControl.canHandle(input);
        await rootControl.handle(input, result);
        const playerNameState = TestingUtils_1.findControlById(rootControl, game_strings_1.GameStrings.ID.PlayerName);
        chai_1.expect(playerNameState.state.value).eq("Mike");
        chai_1.expect(result.acts).length(1);
        chai_1.expect(result.acts[0]).instanceOf(ContentActs_1.ValueSetAct);
    });
    mocha_1.test("valueType mismatch should cause processing to throw", async () => {
        const rootControl = new SingleSelectorManager().createControlTree({});
        const input = TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AMAZON.Number', { 'action': Strings_1.Strings.Action.Set, 'target': game_strings_1.GameStrings.Target.Name, 'AMAZON.Number': 'Mike' }));
        chai_1.expect(async () => { await rootControl.handle(input, new ControlResult_1.ControlResultBuilder(undefined)); }).throws;
    });
    mocha_1.test("session ending due to lack of initiative", async () => {
        const rootControl = new SingleSelectorManager().createControlTree({});
        const input = TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('CUSTOM.name', { 'action': Strings_1.Strings.Action.Set, 'target': game_strings_1.GameStrings.Target.Name, 'CUSTOM.name': "Mike" }));
        const result = await TestingUtils_1.simpleInvoke(rootControl, input);
        chai_1.expect(result.acts[0]).instanceOf(ContentActs_1.ValueSetAct);
        chai_1.expect(result.sessionBehavior).equals(SessionBehavior_1.SessionBehavior.OPEN);
    });
});
mocha_1.suite("== Two controls that collect numbers. One is ValueControl{AMAZON.NUMBER} and other is NumberControl ==", () => {
    const PLAYER_COUNT = 'playerCount'; // used for both controlID and target.
    const PLAYER_AGE = 'playerAge'; // used for both controlID and target.
    class TwoSelectorManager extends ControlManager_1.ControlManager {
        createControlTree(state, input) {
            const rootControl = new ContainerControl_1.ContainerControl({ id: 'root' });
            rootControl
                .addChild(new ValueControl_1.ValueControl({
                id: PLAYER_COUNT,
                slotType: 'AMAZON.NUMBER',
                prompts: { requestValue: "none" },
                interactionModel: { targets: [PLAYER_COUNT] }
            }))
                .addChild(new NumberControl_1.NumberControl({
                id: PLAYER_AGE,
                prompts: { requestValue: "none" },
                interactionModel: { targets: [PLAYER_AGE] }
            }));
            return rootControl;
        }
    }
    mocha_1.test("U: set count, A: move focus and ask question", async () => {
        // Note: this test demonstrates calling simpleInvoke() which includes the initiative phase (yielding a composite ControlResult)
        const rootControl = new TwoSelectorManager().createControlTree({});
        const input = TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.NUMBER, { 'action': Strings_1.Strings.Action.Set, 'target': PLAYER_COUNT, 'AMAZON.NUMBER': "3" }));
        const result = await TestingUtils_1.simpleInvoke(rootControl, input);
        const playerCountState = TestingUtils_1.findControlById(rootControl, PLAYER_COUNT);
        chai_1.expect(playerCountState.state.value).eq("3");
        chai_1.expect(result.acts[0]).instanceOf(ContentActs_1.ValueSetAct);
        chai_1.expect(result.acts[1]).instanceOf(InitiativeActs_1.RequestValueAct);
    });
    mocha_1.test("U: set count, A:move focus and ask question, U: change count to specific value", async () => {
        const rootControl = new TwoSelectorManager().createControlTree({});
        // -- turn 1
        const input1 = TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.NUMBER, { 'action': Strings_1.Strings.Action.Set, 'target': PLAYER_COUNT, 'AMAZON.NUMBER': "3" }));
        const result1 = await TestingUtils_1.simpleInvoke(rootControl, input1);
        chai_1.expect(result1.acts).length(2);
        chai_1.expect(result1.acts[1].control.id).eq(PLAYER_AGE); // <-- ask for age
        // -- turn 2
        const request2 = TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.NUMBER, { 'action': Strings_1.Strings.Action.Change, 'target': PLAYER_COUNT, 'AMAZON.NUMBER': "4" }));
        const result2 = await TestingUtils_1.simpleInvoke(rootControl, request2);
        const playerCountState = TestingUtils_1.findControlById(rootControl, PLAYER_COUNT);
        chai_1.expect(playerCountState.state.value).eq("4"); // <--- changed successfully
        chai_1.expect(result2.acts[0]).instanceOf(ContentActs_1.ValueChangedAct); // <--- appropriate feedback act
        chai_1.expect(result2.acts[1]).instanceOf(InitiativeActs_1.RequestValueAct); // <-- ask for age again.
        chai_1.expect(result2.acts[1].control.id).eq(PLAYER_AGE); // <-- ask for age again.
    });
    mocha_1.test("U: set count, A:move focus and ask question, U: change count, A: request value, U: give value (multi-step set)", async () => {
        const rootControl = new TwoSelectorManager().createControlTree();
        // -- turn 1
        const input1 = TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.NUMBER, { 'action': Strings_1.Strings.Action.Set, 'target': PLAYER_COUNT, 'AMAZON.NUMBER': "3" }));
        const result1 = await TestingUtils_1.simpleInvoke(rootControl, input1);
        chai_1.expect(result1.acts).length(2);
        chai_1.expect(result1.acts[1]).instanceof(InitiativeActs_1.RequestValueAct);
        // -- turn 2
        const input2 = TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Change, target: PLAYER_COUNT }));
        const result2 = await TestingUtils_1.simpleInvoke(rootControl, input2);
        chai_1.expect(result2.acts[0]).instanceOf(InitiativeActs_1.RequestChangedValueAct);
        chai_1.expect(result2.acts[0].control.id).eq(PLAYER_COUNT);
        // -- turn 3
        const input3 = TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': '4' }));
        const result3 = await TestingUtils_1.simpleInvoke(rootControl, input3);
        chai_1.expect(result3.acts[0]).instanceOf(ContentActs_1.ValueChangedAct);
        chai_1.expect(result3.acts[0].control.id).eq(PLAYER_COUNT);
        chai_1.expect(result3.acts[1]).instanceOf(InitiativeActs_1.RequestValueAct);
        chai_1.expect(result3.acts[1].control.id === PLAYER_AGE);
    });
});
//# sourceMappingURL=data:application/json;base64,