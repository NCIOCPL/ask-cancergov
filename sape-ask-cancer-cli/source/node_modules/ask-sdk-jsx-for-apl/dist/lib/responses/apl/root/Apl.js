"use strict";
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.APL = void 0;
const react_1 = __importDefault(require("react"));
const uniqBy_1 = __importDefault(require("lodash/uniqBy"));
const skill_response_1 = require("../../skill-response");
const context_1 = require("../common/context");
const ask_sdk_runtime_1 = require("ask-sdk-runtime");
const APLVersion = '1.4';
class APL extends skill_response_1.SkillResponsePart {
    constructor() {
        super(...arguments);
        this.layouts = {};
        this.items = [];
        this.imports = [];
        this.mainTemplate = {
            parameters: [],
            items: [],
        };
        this.directive = {
            type: 'Alexa.Presentation.APL.RenderDocument',
            token: this.props.token,
            document: {
                type: 'APL',
                settings: this.props.settings,
                version: APLVersion,
                description: this.props.description,
                background: this.props.background,
                import: this.imports,
                export: this.props.export,
                theme: this.props.theme || 'dark',
                commands: this.props.commands,
                onMount: this.props.onMount,
                handleKeyDown: this.props.handleKeyDown,
                handleKeyUp: this.props.handleKeyUp,
                resources: this.props.resources,
                styles: this.props.styles,
                layouts: this.layouts,
                extensions: this.props.extensions,
                graphics: this.props.graphics,
                mainTemplate: this.mainTemplate,
            },
            datasources: this.props.dataSources,
        };
    }
    register(responseBuilder) {
        this.unifyDocumentFields();
        this.removeEmptyDocumentFields();
        this.registerUserAgent();
        responseBuilder.addDirective(this.directive);
    }
    unifyDocumentFields() {
        //Unify Imports
        if (this.props.import) {
            this.imports.push(...this.props.import);
        }
        const imports = uniqBy_1.default(this.imports, (i) => i.name + i.version);
        this.imports.length = 0;
        this.imports.push(...imports);
        //Unify Layouts
        if (this.props.layouts) {
            this.directive.document.layouts = Object.assign(this.props.layouts, this.layouts);
        }
    }
    removeEmptyDocumentFields() {
        if (this.directive.document.import && this.directive.document.import.length === 0) {
            delete this.directive.document.import;
        }
        if (this.directive.document.layouts && Object.keys(this.directive.document.layouts).length === 0) {
            delete this.directive.document.layouts;
        }
    }
    registerUserAgent() {
        if (!APL.packageVersion) {
            const packageInfo = __dirname.includes('dist')
                ? require('../../../../../package.json')
                : require('../../../../package.json');
            APL.packageVersion = `${packageInfo.name}/${packageInfo.version}`;
            ask_sdk_runtime_1.UserAgentManager.registerComponent(APL.packageVersion);
        }
    }
    render() {
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(context_1.APLProvider, { value: { imports: this.imports, layouts: this.layouts } },
                react_1.default.createElement(context_1.MainTemplateProvider, { value: Object.assign({}, this.mainTemplate) },
                    this.props.children,
                    react_1.default.createElement(context_1.ResponseBuilderCtx.Consumer, null, (responseBuilder) => {
                        if (responseBuilder) {
                            this.register(responseBuilder);
                        }
                        return null;
                    })))));
    }
}
exports.APL = APL;
