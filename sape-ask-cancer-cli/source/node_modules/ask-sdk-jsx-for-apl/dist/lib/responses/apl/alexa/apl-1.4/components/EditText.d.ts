import * as React from 'react';
import { LiteralUnion } from '../../../common';
declare type DisplayEnum = 'invisible' | 'none' | 'normal';
declare type fontStyleEnum = 'normal' | 'italic';
declare type fontWeightEnum = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';
declare type hintStyleEnum = 'normal' | 'italic';
declare type hintWeightEnum = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';
declare type keyboardTypeEnum = 'decimalPad' | 'emailAddress' | 'normal' | 'numberPad' | 'phonePad' | 'url';
declare type submitKeyTypeEnum = 'done' | 'go' | 'next' | 'search' | 'send';
declare type typeEnum = 'any' | 'string' | 'number' | 'integer' | 'style' | 'color' | 'boolean' | 'dimension' | 'component' | 'componentArray';
declare type Binding = {
    name: string;
    value: string;
    type?: LiteralUnion<typeEnum, string>;
};
declare type Entity = {
    id: string;
    type: string;
    name: string;
    nameSynonyms?: string[] | string;
    targetSlotName?: string;
};
declare type TickHandler = {
    commands: Command[] | string;
    description?: string;
    minimumDelay?: number | string;
    when?: boolean | string;
};
declare type KeyboardHandler = {
    commands?: Command[] | string;
    propagate?: boolean | string;
    when?: boolean | string;
};
declare type Command = {
    type: string;
    description?: string;
    delay?: number | string;
    screenLock?: boolean | string;
    when?: boolean | string;
    [key: string]: any;
};
declare type dimension = string | number;
declare type Transform = {
    rotate?: number | string;
    scale?: number | string;
    scaleX?: number | string;
    scaleY?: number | string;
    skewX?: number | string;
    skewY?: number | string;
    translateX?: dimension;
    translateY?: dimension;
};
export interface EditTextProps {
    accessibilityLabel?: string;
    bind?: Binding[] | string;
    description?: string;
    checked?: boolean | string;
    disabled?: boolean | string;
    display?: LiteralUnion<DisplayEnum, string>;
    entity?: Entity[] | string;
    entities?: Entity[] | string;
    handleTick?: TickHandler[] | string;
    height?: dimension;
    id?: string;
    inheritParentState?: boolean | string;
    maxHeight?: dimension;
    maxWidth?: dimension;
    minHeight?: dimension;
    minWidth?: dimension;
    onMount?: Command[] | string;
    onCursorEnter?: Command[] | string;
    onCursorExit?: Command[] | string;
    opacity?: number | string;
    paddingTop?: dimension;
    paddingRight?: dimension;
    paddingBottom?: dimension;
    paddingLeft?: dimension;
    shadowColor?: string;
    shadowHorizontalOffset?: dimension;
    shadowRadius?: dimension;
    shadowVerticalOffset?: dimension;
    speech?: string;
    style?: string;
    transform?: Transform[] | string;
    when?: boolean | string;
    width?: dimension;
    onFocus?: Command[] | string;
    onBlur?: Command[] | string;
    handleKeyDown?: KeyboardHandler[] | string;
    handleKeyUp?: KeyboardHandler[] | string;
    borderColor?: string;
    borderStrokeWidth?: dimension;
    borderWidth?: dimension;
    color?: string;
    fontFamily?: string;
    fontSize?: dimension;
    fontStyle?: LiteralUnion<fontStyleEnum, string>;
    fontWeight?: LiteralUnion<fontWeightEnum, string>;
    highlightColor?: string;
    hint?: string;
    hintColor?: string;
    hintStyle?: LiteralUnion<hintStyleEnum, string>;
    hintWeight?: LiteralUnion<hintWeightEnum, string>;
    keyboardType?: LiteralUnion<keyboardTypeEnum, string>;
    maxLength?: number | string;
    onTextChange?: Command[] | string;
    onSubmit?: Command[] | string;
    secureInput?: boolean | string;
    selectOnFocus?: boolean | string;
    size?: number | string;
    submitKeyType?: LiteralUnion<submitKeyTypeEnum, string>;
    text?: string;
    validCharacters?: string;
    [key: string]: unknown;
}
export declare const EditText: (props: React.PropsWithChildren<EditTextProps>) => JSX.Element;
export {};
